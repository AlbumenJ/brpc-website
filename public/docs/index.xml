<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>bRPC – MOSN 文档</title>
    <link>https://brpc.incubator.apache.org/docs/</link>
    <description>Recent content in MOSN 文档 on bRPC</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://brpc.incubator.apache.org/docs/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: SkyWalking 配置</title>
      <link>https://brpc.incubator.apache.org/docs/configuration/trace/skywalking/</link>
      <pubDate>Wed, 08 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://brpc.incubator.apache.org/docs/configuration/trace/skywalking/</guid>
      <description>
        
        
        &lt;p&gt;本文描述的是 SkyWalking Trace  配置。&lt;/p&gt;
&lt;p&gt;目前支持 &lt;code&gt;HTTP1&lt;/code&gt; 协议追踪。&lt;/p&gt;
&lt;p&gt;SkyWalking 描述的 MOSN 的基本全局参数如下所示。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;tracing&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;enable&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;driver&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;SkyWalking&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;config&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;reporter&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;gRPC&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;backend_service&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;127.0.0.1:11800&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;service_name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;mosn&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;max_send_queue_size&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;30000&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;authentication&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;mosn&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;tls&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;cert_file&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;cert.crt&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;server_name_override&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;mosn.io&amp;#34;&lt;/span&gt;
      &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;reporter&#34;&gt;reporter&lt;/h2&gt;
&lt;p&gt;trace 数据上报模式， 支持 &lt;code&gt;log&lt;/code&gt;（仅用于测试） 和 &lt;code&gt;gRPC&lt;/code&gt; 两种模式 。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果配置为空，则默认为 &lt;code&gt;log&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;backend_service&#34;&gt;backend_service&lt;/h2&gt;
&lt;p&gt;SkyWalking 后端服务地址，仅在上报模式为 &lt;code&gt;gRPC&lt;/code&gt; 模式时使用 。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;示例：&lt;code&gt;127.0.0.1:11800&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;service_name&#34;&gt;service_name&lt;/h2&gt;
&lt;p&gt;注册到 SkyWalking 的服务名称，仅在上报模式为 &lt;code&gt;gRPC&lt;/code&gt; 模式时使用 。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果配置为空，则默认为 &lt;code&gt;mosn&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;max_send_queue_size&#34;&gt;max_send_queue_size&lt;/h2&gt;
&lt;p&gt;trace 数据缓冲队列大小，仅在上报模式为 &lt;code&gt;gRPC&lt;/code&gt; 模式时使用 。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果配置为空，则默认为 &lt;code&gt;30000&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;authentication&#34;&gt;authentication&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;gRPC&lt;/code&gt; 身份认证参数，仅在上报模式为 &lt;code&gt;gRPC&lt;/code&gt; 模式时使用 。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果配置不为空，在与 SkyWalking 后端服务建立连接时会使用此参数进行身份认证。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;tls&#34;&gt;tls&lt;/h2&gt;
&lt;p&gt;仅在上报模式为 &lt;code&gt;gRPC&lt;/code&gt; 模式时使用 。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果配置不为空，将使用 TLS 连接 SkyWalking 后端服务。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;cert_file&#34;&gt;cert_file&lt;/h3&gt;
&lt;p&gt;TLS 客户端证书。&lt;/p&gt;
&lt;h3 id=&#34;server_name_override&#34;&gt;server_name_override&lt;/h3&gt;
&lt;p&gt;服务名称。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 文档贡献指南</title>
      <link>https://brpc.incubator.apache.org/docs/contribute/github/</link>
      <pubDate>Tue, 11 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://brpc.incubator.apache.org/docs/contribute/github/</guid>
      <description>
        
        
        &lt;p&gt;要处理 MOSN 文档，您需要：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建一个 &lt;a href=&#34;https://github.com/&#34;&gt;GitHub 账户&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;该文档是根据 &lt;a href=&#34;https://github.com/apache/incubator-brpc-website/blob/master/LICENSE&#34;&gt;Apache 2.0&lt;/a&gt; 协议许可发布的。&lt;/p&gt;
&lt;h2 id=&#34;how-to&#34;&gt;如何贡献&lt;/h2&gt;
&lt;p&gt;您可以通过以下三种方式为 MOSN 文档做出贡献：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果您想要编辑现有页面，可以在浏览器中打开页面，然后点击页面右侧的&lt;strong&gt;编辑本页&lt;/strong&gt;选项，这将带您到 GitHub 页面进行编辑操作并提交相应的更改。&lt;/li&gt;
&lt;li&gt;如果您想使用通用的方式，请遵循我们的&lt;a href=&#34;#add&#34;&gt;如何添加内容&lt;/a&gt;中的步骤。&lt;/li&gt;
&lt;li&gt;如果您想对现有的 pull request（PR）进行 review，请参考&lt;a href=&#34;#review&#34;&gt;如何 review&lt;/a&gt; 中的步骤。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PR 合并后会立即显示在 &lt;a href=&#34;https://mosn.io&#34;&gt;https://mosn.io&lt;/a&gt; 上。&lt;/p&gt;
&lt;h2 id=&#34;add&#34;&gt;如何添加内容&lt;/h2&gt;
&lt;p&gt;要添加内容，您必须创建存储库的分支，并从该分支向文档主存储库提交 PR。以下步骤描述了该过程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;访问 GitHub MOSN 官网仓库 &lt;a href=&#34;https://github.com/apache/incubator-brpc-website&#34;&gt;https://github.com/apache/incubator-brpc-website&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;单击屏幕右上角的 &lt;strong&gt;Fork&lt;/strong&gt; 按钮，以在您的 GitHub 帐户中创建 MOSN 官网仓库的副本。&lt;/li&gt;
&lt;li&gt;克隆您的 fork 到本地，然后进行所需的任何更改。&lt;/li&gt;
&lt;li&gt;当您准备将这些更改发送给我们时，请将更改推送到您的 fork 仓库。&lt;/li&gt;
&lt;li&gt;进入 fork 仓库的索引页面，然后单击 &lt;strong&gt;New Pull Request&lt;/strong&gt; 提交 PR。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;review&#34;&gt;如何 review&lt;/h2&gt;
&lt;p&gt;请直接在 PR 上发表评论。如果您评论的内容很详细，请按照以下步骤操作：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在 PR 中评论具体信息。如果可以的话，请在受影响的文件和文件行上直接评论特定的具体信息。&lt;/li&gt;
&lt;li&gt;适当的时候，在评论中向 PR 提交者与参与者提供建议。&lt;/li&gt;
&lt;li&gt;发布您的评论，与 PR 参与者分享您的评论和建议。&lt;/li&gt;
&lt;li&gt;发布评论后，大家经过讨论一致同意合并 PR。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;preview&#34;&gt;如何预览&lt;/h2&gt;
&lt;p&gt;您可以根据需要，选择在线预览，或者在本地使用 Hugo 命令行运行本站实时预览。&lt;/p&gt;
&lt;h3 id=&#34;在线预览&#34;&gt;在线预览&lt;/h3&gt;
&lt;p&gt;在提交 PR 后，GitHub 上对应的 PR 页面会显示一系列检查选项，其中 &lt;code&gt;deploy/netlify&lt;/code&gt; 选项将会生成 MOSN 官网的预览页面，点击 &lt;strong&gt;Details&lt;/strong&gt; 可以跳转到预览界面。对于同一个 PR 每次提交都会触发一次构建预览。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;website-preview.png&#34; alt=&#34;预览&#34;&gt;&lt;/p&gt;
&lt;p&gt;这个是个临时网站，可以确保本次 PR 合并后的页面显示正常。&lt;/p&gt;
&lt;h3 id=&#34;本地预览&#34;&gt;本地预览&lt;/h3&gt;
&lt;p&gt;除了在页面上预览以外，您还可以使用 &lt;a href=&#34;https://github.com/gohugoio/hugo&#34;&gt;Hugo&lt;/a&gt;（建议使用 v0.55.5 extended 版本），在代码仓库的根目录下执行 &lt;code&gt;hugo server&lt;/code&gt;，即可在浏览器中打开 &lt;code&gt;http://localhost:1313&lt;/code&gt; 预览。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: FilterChain</title>
      <link>https://brpc.incubator.apache.org/docs/configuration/server/listener/filter-chain/</link>
      <pubDate>Mon, 20 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://brpc.incubator.apache.org/docs/configuration/server/listener/filter-chain/</guid>
      <description>
        
        
        &lt;p&gt;本文描述的是 MOSN 的 FilterChain 配置。&lt;/p&gt;
&lt;p&gt;FilterChain 是 MOSN Listener 配置中核心逻辑配置，不同的 FilterChain 配置描述了 Listener 会如何处理请求。&lt;/p&gt;
&lt;p&gt;目前 MOSN 一个 Listener 只支持一个 FilterChain。&lt;/p&gt;
&lt;p&gt;FilterChain 的配置结构如下所示。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;tls_context&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{},&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;tls_context_set&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[],&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;filters&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[]&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;tls_context_set&#34;&gt;tls_context_set&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;一组 &lt;code&gt;tls_context&lt;/code&gt; 配置，MOSN 默认使用 &lt;code&gt;tls_context_set&lt;/code&gt; 来描述 listener 的 TLS 的证书信息。&lt;/li&gt;
&lt;li&gt;一个 listener 可同时支持配置多张 TLS 证书。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tls_context&#34;&gt;tls_context&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;单独配置 &lt;code&gt;tls_context&lt;/code&gt; 而不是使用 &lt;code&gt;tls_context_set&lt;/code&gt; 是兼容 MOSN 历史配置（只支持一张证书配置时）的场景，这种配置方式后面会逐步废弃。&lt;/li&gt;
&lt;li&gt;tls_context 的详细配置说明，参考 &lt;a href=&#34;../../custom#tls-context&#34;&gt;tls_context&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;filters&#34;&gt;filters&lt;/h3&gt;
&lt;p&gt;一组 network filter 配置。&lt;/p&gt;
&lt;h3 id=&#34;network-filter&#34;&gt;network filter&lt;/h3&gt;
&lt;p&gt;network filter 描述了 MOSN 在连接建立以后如何在 4 层处理连接数据。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;config&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{}&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;type 是一个字符串，描述了 filter 的类型。&lt;/li&gt;
&lt;li&gt;config 可以是任意 json 配置，描述不同 filter 的配置。&lt;/li&gt;
&lt;li&gt;network filter 可自定义扩展实现，默认支持的 type 包括 &lt;code&gt;proxy&lt;/code&gt;、&lt;code&gt;tcp proxy&lt;/code&gt;、&lt;code&gt;connection_manager&lt;/code&gt;。
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;connection_manager&lt;/code&gt; 是一个特殊的 network filter，它需要和 &lt;code&gt;proxy&lt;/code&gt; 一起使用，用于描述 &lt;code&gt;proxy&lt;/code&gt; 中路由相关的配置，是一个兼容性质的配置，后续可能有修改。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: proxy</title>
      <link>https://brpc.incubator.apache.org/docs/configuration/server/listener/network-filter/proxy/</link>
      <pubDate>Mon, 20 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://brpc.incubator.apache.org/docs/configuration/server/listener/network-filter/proxy/</guid>
      <description>
        
        
        &lt;p&gt;proxy 是 MOSN 最常用的 network filter，其配置格式如下。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;downstream_protocol&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;upstream_protocol&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;router_config_name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;extend_config&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:{}&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;downstream_protocol&lt;/code&gt; 描述 proxy 期望收到的请求协议，在连接收到数据时，会使用此协议去解析数据包并完成转发，如果收到的数据包协议和配置不符，MOSN 会将连接断开。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;upstream_protocol&lt;/code&gt; 描述 proxy 将以何种协议转发数据，通常情况下应该和&lt;code&gt;downstream_protocol&lt;/code&gt; 保持一致，只有特殊的场景会进行对应协议的转换。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;router_config_name&lt;/code&gt; 描述 proxy 的路由配置的索引，通常情况下，这个配置会和同 listener 下的 &lt;code&gt;connection_manager&lt;/code&gt; 中配置的 &lt;code&gt;router_config_name&lt;/code&gt; 保持一致。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;extend_config&lt;/code&gt; 扩展配置，目前仅在 MOSN 的 &lt;code&gt;XProtocol&lt;/code&gt; 协议中使用。&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 快速开始</title>
      <link>https://brpc.incubator.apache.org/docs/quick-start/proxy/</link>
      <pubDate>Mon, 20 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://brpc.incubator.apache.org/docs/quick-start/proxy/</guid>
      <description>
        
        
        &lt;p&gt;本文用于帮助初次接触 MOSN 项目的开发人员，快速搭建开发环境，完成构建，测试，打包和示例代码的运行。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注&lt;/strong&gt;：MOSN 基于 Go 1.12.7 开发，使用 dep 进行依赖管理。&lt;/p&gt;
&lt;h2 id=&#34;准备运行环境&#34;&gt;准备运行环境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;如果您使用容器运行 MOSN，请先 &lt;a href=&#34;https://docs.docker.com/install/&#34;&gt;安装 docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;如果您使用本地机器，请使用类 Unix 环境&lt;/li&gt;
&lt;li&gt;安装 Go 的编译环境&lt;/li&gt;
&lt;li&gt;安装 dep : 参考&lt;a href=&#34;https://golang.github.io/dep/docs/installation.html&#34;&gt;官方安装文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;获取代码&#34;&gt;获取代码&lt;/h2&gt;
&lt;p&gt;MOSN 项目的代码托管在 &lt;a href=&#34;https://github.com/mosn/mosn&#34;&gt;Github&lt;/a&gt;，获取方式如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;go get -u mosn.io/mosn
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果您的 go get 下载存在问题，请手动创建项目工程&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 进入 GOPATH 下的 src 目录&lt;/span&gt;
&lt;span style=&#34;color:#204a87&#34;&gt;cd&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;$GOPATH&lt;/span&gt;/src
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 创建 mosn.io 目录&lt;/span&gt;
mkdir -p mosn.io
&lt;span style=&#34;color:#204a87&#34;&gt;cd&lt;/span&gt; mosn.io

&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 克隆 MOSN 代码&lt;/span&gt;
git clone git@github.com:mosn/mosn.git
&lt;span style=&#34;color:#204a87&#34;&gt;cd&lt;/span&gt; mosn
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最终 MOSN 的源代码代码路径为 &lt;code&gt;$GOPATH/src/mosn.io/mosn&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;导入ide&#34;&gt;导入IDE&lt;/h2&gt;
&lt;p&gt;使用您喜爱的 Go IDE 导入 &lt;code&gt;$GOPATH/src/mosn.io/mosn&lt;/code&gt; 项目，推荐 Goland。&lt;/p&gt;
&lt;h2 id=&#34;编译代码&#34;&gt;编译代码&lt;/h2&gt;
&lt;p&gt;在项目根目录下，根据自己机器的类型以及欲执行二进制的环境，选择以下命令编译 MOSN 的二进制文件。&lt;/p&gt;
&lt;h3 id=&#34;使用-docker-镜像编译&#34;&gt;使用 docker 镜像编译&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;make build // 编译出 linux 64bit 可运行二进制文件
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;本地编译&#34;&gt;本地编译&lt;/h3&gt;
&lt;p&gt;使用下面的命令编译本地可运行二进制文件。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;make build-local
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在非 Linux 机器交叉编译 Linux 64bit 可运行二进制文件。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;make build-linux64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在非 Linux 机器交叉编译 Linux 32bit 可运行二进制文件。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;make build-linux32
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;完成后可以在 &lt;code&gt;build/bundles/${version}/binary&lt;/code&gt; 目录下找到编译好的二进制文件。&lt;/p&gt;
&lt;h2 id=&#34;打包&#34;&gt;打包&lt;/h2&gt;
&lt;p&gt;在项目根目录下执行如下命令进行打包。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;make rpm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;完成后可以在 &lt;code&gt;build/bundles/${version}/rpm&lt;/code&gt; 目录下找到打包好的文件。&lt;/p&gt;
&lt;h2 id=&#34;创建镜像&#34;&gt;创建镜像&lt;/h2&gt;
&lt;p&gt;执行如下命令进行镜像创建。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;make image
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;运行测试&#34;&gt;运行测试&lt;/h2&gt;
&lt;p&gt;在项目根目录下执行如下命令运行单元测试：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;make unit-test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在项目根目录下执行如下命令运行集成测试（较慢）。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;make integrate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;从配置文件启动-mosn&#34;&gt;从配置文件启动 MOSN&lt;/h2&gt;
&lt;p&gt;运行下面的命令使用配置文件启动 MOSN。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;./mosn start -c &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;$CONFIG_FILE&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;开启-mosn-转发示例程序&#34;&gt;开启 MOSN 转发示例程序&lt;/h2&gt;
&lt;p&gt;参考 &lt;code&gt;examples&lt;/code&gt; 目录下的示例工程&lt;a href=&#34;../../samples&#34;&gt;运行 Samples&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;使用-mosn-搭建-service-mesh-平台&#34;&gt;使用 MOSN 搭建 Service Mesh 平台&lt;/h2&gt;
&lt;p&gt;请参考&lt;a href=&#34;../istio&#34;&gt;与 Istio 集成&lt;/a&gt;。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: MOSN 简介</title>
      <link>https://brpc.incubator.apache.org/docs/overview/</link>
      <pubDate>Mon, 20 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://brpc.incubator.apache.org/docs/overview/</guid>
      <description>
        
        
        &lt;p&gt;MOSN 是一款使用 Go 语言开发的网络代理软件，作为云原生的网络数据平面，旨在为服务提供多协议，模块化，智能化，安全的代理能力。MOSN 是 Modular Open Smart Network 的简称。MOSN 可以与任何支持 xDS API 的 Service Mesh 集成，亦可以作为独立的四、七层负载均衡，API Gateway，云原生 Ingress 等使用。&lt;/p&gt;
&lt;h2 id=&#34;快速开始&#34;&gt;快速开始&lt;/h2&gt;
&lt;p&gt;请参考&lt;a href=&#34;../quick-start&#34;&gt;快速开始&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;核心能力&#34;&gt;核心能力&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Istio集成
&lt;ul&gt;
&lt;li&gt;集成 Istio 1.0 版本与 V4 API，可基于全动态资源配置运行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;核心转发
&lt;ul&gt;
&lt;li&gt;自包含的网络服务器&lt;/li&gt;
&lt;li&gt;支持 TCP 代理&lt;/li&gt;
&lt;li&gt;支持 TProxy 模式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;多协议
&lt;ul&gt;
&lt;li&gt;支持 HTTP/1.1，HTTP/2&lt;/li&gt;
&lt;li&gt;支持 SOFARPC&lt;/li&gt;
&lt;li&gt;支持 Dubbo 协议&lt;/li&gt;
&lt;li&gt;支持 Tars 协议&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;核心路由
&lt;ul&gt;
&lt;li&gt;支持 Virtual Host 路由&lt;/li&gt;
&lt;li&gt;支持 Headers/URL/Prefix 路由&lt;/li&gt;
&lt;li&gt;支持基于 Host Metadata 的 Subset 路由&lt;/li&gt;
&lt;li&gt;支持重试&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;后端管理&amp;amp;负载均衡
&lt;ul&gt;
&lt;li&gt;支持连接池&lt;/li&gt;
&lt;li&gt;支持熔断&lt;/li&gt;
&lt;li&gt;支持后端主动健康检查&lt;/li&gt;
&lt;li&gt;支持 Random/RR 等负载策略&lt;/li&gt;
&lt;li&gt;支持基于 Host Metadata 的 Subset 负载策略&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可观察性
&lt;ul&gt;
&lt;li&gt;观察网络数据&lt;/li&gt;
&lt;li&gt;观察协议数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;TLS
&lt;ul&gt;
&lt;li&gt;支持 HTTP/1.1 on TLS&lt;/li&gt;
&lt;li&gt;支持 HTTP/2.0 on TLS&lt;/li&gt;
&lt;li&gt;支持 SOFARPC on TLS&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;进程管理
&lt;ul&gt;
&lt;li&gt;支持平滑 reload&lt;/li&gt;
&lt;li&gt;支持平滑升级&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;扩展能力
&lt;ul&gt;
&lt;li&gt;支持自定义私有协议&lt;/li&gt;
&lt;li&gt;支持在 TCP IO 层，协议层面加入自定义扩展&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;社区&#34;&gt;社区&lt;/h2&gt;
&lt;p&gt;MOSN 开源仍在高速发展中，有很多能力需要补全，欢迎所有人参与进来与我们一起共建。&lt;/p&gt;
&lt;p&gt;关于 MOSN 社区的详细介绍请查看 &lt;a href=&#34;https://github.com/mosn/community&#34;&gt;mosn/community&lt;/a&gt; 仓库，如有任何疑问欢迎&lt;a href=&#34;https://github.com/mosn/mosn/issues&#34;&gt;提交 Issue&lt;/a&gt;。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: MOSN 核心概念</title>
      <link>https://brpc.incubator.apache.org/docs/concept/core-concept/</link>
      <pubDate>Sun, 20 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://brpc.incubator.apache.org/docs/concept/core-concept/</guid>
      <description>
        
        
        &lt;p&gt;MOSN 主要划分为如下模块，包括了网络代理具备的基础能力，也包含了 &lt;a href=&#34;https://www.servicemesher.com/blog/envoy-xds-protocol/&#34;&gt;xDS&lt;/a&gt; 等云原生能力。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;mosn-modules-arch.jpg&#34; alt=&#34;MOSN 模块大图&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;xdsudpa支持&#34;&gt;xDS（UDPA）支持&lt;/h2&gt;
&lt;p&gt;MOSN 支持云原生&lt;a href=&#34;https://github.com/cncf/udpa&#34;&gt;统一数据面 API（UDPA）&lt;/a&gt;，支持全动态配置更新。&lt;/p&gt;
&lt;p&gt;xDS 是 &lt;a href=&#34;https://www.envoyproxy.io/&#34;&gt;Envoy&lt;/a&gt; 创建的一个关键概念，它是一类发现服务的统称，其包括如下几类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CDS：Cluster Discovery Service&lt;/li&gt;
&lt;li&gt;EDS：Endpoint Discovery Service&lt;/li&gt;
&lt;li&gt;SDS：Secret Discovery Service&lt;/li&gt;
&lt;li&gt;RDS：Route Discovery Service&lt;/li&gt;
&lt;li&gt;LDS：Listener Discovery Service&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;正是通过对 xDS 的请求来动态更新 Envoy 配置，另外还有个 ADS（Aggregated Discovery Service）通过聚合的方式解决以上 xDS 的更新顺序问题。&lt;/p&gt;
&lt;h2 id=&#34;业务支持&#34;&gt;业务支持&lt;/h2&gt;
&lt;p&gt;MOSN 作为底层的高性能安全网络代理，支撑了 RPC、消息（Messaging）、网关（Gateway）等业务场景。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;mosn-core.jpg&#34; alt=&#34;MOSN 业务支持&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;io-模型&#34;&gt;IO 模型&lt;/h2&gt;
&lt;p&gt;MOSN 支持以下两种 IO 模型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Golang 经典 netpoll 模型&lt;/strong&gt;：goroutine-per-connection，适用于在连接数不是瓶颈的情况。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;RawEpoll 模型&lt;/strong&gt;：也就是 Reactor 模式，I/O 多路复用（I/O multiplexing）+ 非阻塞 I/O（non-blocking I/O）的模式。对于接入层和网关有大量长链接的场景，更加适合于 RawEpoll 模型。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;netpoll-模型&#34;&gt;netpoll 模型&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;netpoll-model.jpg&#34; alt=&#34;MOSN netpoll 模型&#34;&gt;&lt;/p&gt;
&lt;p&gt;MOSN 的 netpoll 模型如上图所示，协程数量与链接数量成正比，大量链接场景下，协程数量过多，存在以下开销：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Stack 内存开销&lt;/li&gt;
&lt;li&gt;Read buffer 开销&lt;/li&gt;
&lt;li&gt;Runtime 调度开销&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;rawepoll-模型&#34;&gt;RawEpoll 模型&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;raw-epoll-model.jpg&#34; alt=&#34;MOSN RawEpoll 模型&#34;&gt;&lt;/p&gt;
&lt;p&gt;RawEpoll 模型如上图所示，使用 epoll 感知到可读事件之后，再从协程池中为其分配协程进行处理，步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;链接建立后，向 Epoll 注册 oneshot 可读事件监听；并且此时不允许有协程调用 conn.read，避免与 runtime netpoll 冲突。&lt;/li&gt;
&lt;li&gt;可读事件到达，从 goroutine pool 挑选一个协程进行读事件处理；由于使用的是 oneshot 模式，该 fd 后续可读事件不会再触发。&lt;/li&gt;
&lt;li&gt;请求处理过程中，协程调度与经典 netpoll 模式一致。&lt;/li&gt;
&lt;li&gt;请求处理完成，将协程归还给协程池；同时将 fd 重新添加到 RawEpoll 中。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;协程模型&#34;&gt;协程模型&lt;/h2&gt;
&lt;p&gt;MOSN 的协程模型如下图所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;mosn-goroutine-model.jpg&#34; alt=&#34;MSON 协程模型&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一条 TCP 连接对应一个 Read 协程，执行收包、协议解析；&lt;/li&gt;
&lt;li&gt;一个请求对应一个 worker 协程，执行业务处理，proxy 和 Write 逻辑；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;常规模型一个 TCP 连接将有 Read/Write 两个协程，我们取消了单独的 Write 协程，让 workerpool 工作协程代替，减少了调度延迟和内存占用。&lt;/p&gt;
&lt;h2 id=&#34;能力扩展&#34;&gt;能力扩展&lt;/h2&gt;
&lt;h3 id=&#34;协议扩展&#34;&gt;协议扩展&lt;/h3&gt;
&lt;p&gt;MOSN 通过使用统一的编解码引擎以及编/解码器核心接口，提供协议的 plugin 机制，包括支持：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SOFARPC&lt;/li&gt;
&lt;li&gt;HTTP1.x/HTTP2.0&lt;/li&gt;
&lt;li&gt;Dubbo&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;networkfilter-扩展&#34;&gt;NetworkFilter 扩展&lt;/h3&gt;
&lt;p&gt;MOSN 通过提供 network filter 注册机制以及统一的 packet read/write filter 接口，实现了 Network filter 扩展机制，当前支持：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TCP proxy&lt;/li&gt;
&lt;li&gt;Fault injection&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;streamfilter-扩展&#34;&gt;StreamFilter 扩展&lt;/h3&gt;
&lt;p&gt;MOSN 通过提供 stream filter 注册机制以及统一的 stream send/receive filter 接口，实现了 Stream filter 扩展机制，包括支持：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;流量镜像&lt;/li&gt;
&lt;li&gt;RBAC 鉴权&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;tls-安全链路&#34;&gt;TLS 安全链路&lt;/h2&gt;
&lt;p&gt;通过测试，原生的 Go 的 TLS 经过了大量的汇编优化，在性能上是 Nginx（OpenSSL）的80%，Boring 版本的 Go（使用 cgo 调用 BoringSSL）因为 cgo 的性能问题， 并不占优势，所以我们最后选择使用原生 Go 的 TLS，相信 Go Runtime 团队后续会有更多的优化，我们也会有一些优化计划。&lt;/p&gt;
&lt;p&gt;Go vs Nginx 测试结果如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;mosn-tls-1.png&#34; alt=&#34;Go vs Nginx TLS 性能&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Go 在 RSA 上没有太多优化，go-boring（CGO）的能力是 Go 的两倍。&lt;/li&gt;
&lt;li&gt;p256 在 Go 上有汇编优化，ECDSA 优于go-boring。&lt;/li&gt;
&lt;li&gt;在 AES-GCM 对称加密上，Go 的能力是 go-boring 的 20 倍。&lt;/li&gt;
&lt;li&gt;在 SHA、MD 等 HASH 算法也有对应的汇编优化。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了满足金融场景的安全合规，我们同时也对国产密码进行了开发支持，这个是 Go Runtime 所没有的。虽然目前的性能相比国际标准 AES-GCM 还是有一些差距，大概是 50%，但是我们已经有了后续的一些优化计划，敬请期待。&lt;/p&gt;
&lt;p&gt;支持国密的性能测试结果如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;mosn-tls-2.png&#34; alt=&#34;支持国密的性能测试&#34;&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 版本发布 介绍</title>
      <link>https://brpc.incubator.apache.org/docs/dev/release/</link>
      <pubDate>Mon, 28 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://brpc.incubator.apache.org/docs/dev/release/</guid>
      <description>
        
        
        &lt;h2 id=&#34;mosn-版本发布步骤&#34;&gt;MOSN 版本发布步骤&lt;/h2&gt;
&lt;h3 id=&#34;一冻结代码&#34;&gt;一、冻结代码&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在准备一个版本发布期间，停止代码往 master 分支的合并&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;二整理-release-notes&#34;&gt;二、整理 Release notes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;基于 Github 的 PullRequest 记录，整理本次发布的内容与上一个版本之间的差异，需要注意仅统计目标分支是 master 且正常合并的 PullRequest&lt;/li&gt;
&lt;li&gt;首先记录原始的信息，统一记录在 &lt;a href=&#34;https://docs.google.com/document/d/15wu2Ug4nN38A_odKv3ubmfu1OxmxqlUUFnvN4mbKtIc/edit?usp=sharing&#34;&gt;MOSN Release notes 整理文档&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;文档打开需要权限&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;整理完原始信息以后，进行提炼和总结
&lt;ul&gt;
&lt;li&gt;通常情况下，一个 PullRequest 对应一个改动记录&lt;/li&gt;
&lt;li&gt;存在部分特殊情况是一个 PullRequest 包含多个改动的情况，可以请 PullRequest 提供者提供详细信息&lt;/li&gt;
&lt;li&gt;也可能存在多个 PullRequest 是针对同一个改动的情况（如新功能，分开提 PullRequest，或者在同一个版本迭代中不断优化）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;提炼后的完整 Release notes 记录格式可以参考 &lt;a href=&#34;https://github.com/mosn/mosn/blob/master/CHANGELOG_ZH.md&#34;&gt;CHANGELOG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;提炼后的 Release notes 需要有英文版本的记录&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;三测试报告&#34;&gt;三、测试报告&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;所有的改动点都需要有对应的测试记录，测试方式可以有多种，包括但不限于
&lt;ul&gt;
&lt;li&gt;完整的单元测试覆盖，确保基本的功能场景正确，默认代码合并的时候会执行&lt;/li&gt;
&lt;li&gt;性能测试 Benchmark，针对可能对性能有影响的改动，需要执行性能测试。&lt;/li&gt;
&lt;li&gt;手动模拟测试，主要针对一些单元测试无法很好覆盖的场景（如涉及网络 IO、Proxy 转发等多模块交互），通过手动搭建测试环境（配置、模拟 Server 与 Client）进行场景复现与验证
&lt;ul&gt;
&lt;li&gt;手动模拟测试完成以后记录详细的测试步骤，包括：模拟的场景、使用的配置、使用的 Server、使用的 Client 等；后续可以考虑将手动场景实现为 integrate 测试&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;测试完成以后，产出测试报告，说明对应的功能点使用哪种测试方式测试与测试的结果&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;四版本发布&#34;&gt;四、版本发布&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;版本发布 PullRequest&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;修改&lt;code&gt;VERSION&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;修改&lt;code&gt;CHANGELOG.md&lt;/code&gt;、&lt;code&gt;CHNAGELOH_ZH.md&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;上传测试报告&lt;code&gt;reports/${VERSION}.md&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;官网文档的同步修改&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;github.com/mosn/mosn.io/content/zh/blog/releases 下新增对应的 release notes.&lt;/li&gt;
&lt;li&gt;英文版 release notes 也需要做一样的更新&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;正式 release&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;合并完&lt;code&gt;版本发布 PullRequest&lt;/code&gt;后，基于 master 分支完成 release&lt;/li&gt;
&lt;li&gt;release 时的描述内容填写英文版 release notes 的内容&lt;/li&gt;
&lt;li&gt;通过&lt;code&gt;make build&lt;/code&gt;命令编译出对应的二进制并且上传&lt;/li&gt;
&lt;li&gt;完成 release&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Dubbo 集成</title>
      <link>https://brpc.incubator.apache.org/docs/dev/dubbo-integrate/</link>
      <pubDate>Mon, 01 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://brpc.incubator.apache.org/docs/dev/dubbo-integrate/</guid>
      <description>
        
        
        &lt;h2 id=&#34;dubbo-介绍&#34;&gt;Dubbo 介绍&lt;/h2&gt;
&lt;p&gt;Dubbo 最初是 &lt;a href=&#34;https://dubbo.apache.org/zh-cn/&#34;&gt;Java 开发的一套 RPC 框架&lt;/a&gt;，随着社区的发展。当前 dubbo 也渐渐成为一套跨语言的解决方案。除了 Java 以外，还有相应的 &lt;a href=&#34;https://github.com/apache/dubbo-go&#34;&gt;Go 实现&lt;/a&gt;。有规律的版本发布节奏，社区较为活跃。&lt;/p&gt;
&lt;h2 id=&#34;dubbo-服务-mesh-化&#34;&gt;Dubbo 服务 mesh 化&lt;/h2&gt;
&lt;p&gt;接入 service mesh 的应用，其服务发现应该由相应的 mesh 模块接管。一般由控制面将相应的服务发现配置进行订阅和下发。但这里存在几个问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如果公司是第一次接入 service mesh，不希望一次引入太多模块，这样会增加整体的运维负担。如果可以渐进地迁移到 service mesh 架构，例如先接入数据面，再接入控制面。那么就可以随时以较低的成本进行回滚。也不会给运维造成太大的压力。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;每个公司都有自己的发展规划，并不是每个公司都完整地拥抱了云原生。大部分公司可能存在部分上云，部分未上云的情况，在迁移到 service mesh 时，也存在部分应用接入了 service mesh，而另一部分未接入的情况。需要考虑跨架构互通。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们这里提出的方案希望能够解决这些问题。&lt;/p&gt;
&lt;h2 id=&#34;服务发现接入&#34;&gt;服务发现接入&lt;/h2&gt;
&lt;h3 id=&#34;配置工作&#34;&gt;配置工作&lt;/h3&gt;
&lt;p&gt;在配置文件中，我们配置了两个 listener：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;一个是 serverListener，负责拦截外部进入的流量，转发给本地模块，这个方向的请求不需要做特殊处理，只要使用 xprotocol 转发给本机即可。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一个是 clientListener，负责拦截本机向外发起的请求，因为外部集群根据服务注册中心下发的 endpoint 列表动态变化，所以该 listener 对应的也是一个 &lt;strong&gt;特殊的 router 名 &amp;ldquo;dubbo&amp;rdquo;。&lt;/strong&gt;，这里务必注意。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;      &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;listeners&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;
        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
          &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;serverListener&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
          &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;address&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;127.0.0.1:2046&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
          &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;bind_port&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
          &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;log_path&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;stdout&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
          &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;filter_chains&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;
            &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
              &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;tls_context&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{},&lt;/span&gt;
              &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;filters&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;
                &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
                  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;proxy&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
                  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;config&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
                    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;downstream_protocol&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;X&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
                    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;upstream_protocol&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;X&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
                    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;router_config_name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;server_router&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
                    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;extend_config&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
                      &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;sub_protocol&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;dubbo&amp;#34;&lt;/span&gt;
                    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
                  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
                &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
              &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;
            &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
          &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;
        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;},&lt;/span&gt;
        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
          &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;clientListener&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
          &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;address&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;0.0.0.0:2045&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
          &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;bind_port&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
          &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;log_path&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;stdout&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
          &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;filter_chains&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;
            &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
              &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;tls_context&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{},&lt;/span&gt;
              &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;filters&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;
                &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
                  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;proxy&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
                  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;config&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
                    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;downstream_protocol&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;X&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
                    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;upstream_protocol&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;X&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
                    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;router_config_name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;dubbo&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
                    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;extend_config&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
                      &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;sub_protocol&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;dubbo&amp;#34;&lt;/span&gt;
                    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
                  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
                &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
              &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;
            &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
          &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;
        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
      &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;开发工作&#34;&gt;开发工作&lt;/h3&gt;
&lt;p&gt;第一步，在 MOSN 配置中增加 &lt;code&gt;dubbo_registry&lt;/code&gt; 扩展选项：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;  &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;extends&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;:&lt;/span&gt;  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[{&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;dubbo_registry&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;config&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;enable&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;server_port&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;20080&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;api_port&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;22222&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;log_path&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;/tmp&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;该配置与 tracing、admin 等为平级配置。&lt;/p&gt;
&lt;p&gt;第二步，针对接入的服务，需要简单修改 sdk 中的 pub、sub 环节代码：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;pub 时，如果当前环境为接入 MOSN 环境(可通过配置系统下发的开关来判断)，则调用 MOSN 的 pub 接口，而非直接去注册中心 pub。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;sub 时，如果当前环境为接入 MOSN 环境，则调用 MOSN 的 sub 接口，不去注册中心 sub。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第三步，应用退出时，需要将所有 pub、sub 的服务执行反向操作，即 unpub、unsub。&lt;/p&gt;
&lt;p&gt;在本文中使用 &lt;a href=&#34;https://github.com/jakubroztocil/httpie&#34;&gt;httpie&lt;/a&gt; 来发送 http 请求。使用 dubbo-go 中的样例程序作为我们的服务的 client 和 server。&lt;/p&gt;
&lt;p&gt;接下来我们使用 httpie 来模拟各种情况下的 pub、sub 流程。&lt;/p&gt;
&lt;h3 id=&#34;直连-client-与正常的-dubbo-service-互通&#34;&gt;直连 client 与正常的 dubbo service 互通&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/MOSN/examples/tree/master/codes/dubbo-with-zk-discover/direct_client_normal_server&#34;&gt;例子路径&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Service 是正常的 dubbo service，所以会自动注册到 zk 中去，不需要我们帮它 pub，这里只要 sub 就可以了，所以执行流程为：&lt;/p&gt;
&lt;p&gt;第一步，修改 MOSN 配置，增加 dubbo_registry 的 extend 扩展。&lt;/p&gt;
&lt;p&gt;第二步，mosn start。&lt;/p&gt;
&lt;p&gt;第三步，start server。&lt;/p&gt;
&lt;p&gt;第四步，subscribe service。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;http --json post localhost:22222/sub registry:&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;{&amp;#34;type&amp;#34;:&amp;#34;zookeeper&amp;#34;, &amp;#34;addr&amp;#34; : &amp;#34;127.0.0.1:2181&amp;#34;}&amp;#39;&lt;/span&gt; service:&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;{&amp;#34;interface&amp;#34; : &amp;#34;com.ikurento.user.UserProvider&amp;#34;, &amp;#34;methods&amp;#34; :[&amp;#34;GetUser&amp;#34;], &amp;#34;group&amp;#34; : &amp;#34;&amp;#34;, &amp;#34;version&amp;#34; : &amp;#34;&amp;#34;}&amp;#39;&lt;/span&gt; --verbose
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;第五步，start client。&lt;/p&gt;
&lt;p&gt;在 client 中正确看到返回结果的话，说明请求成功了。&lt;/p&gt;
&lt;h3 id=&#34;直连-client-与直连-dubbo-service-互通&#34;&gt;直连 client 与直连 dubbo service 互通&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/MOSN/examples/tree/master/codes/dubbo-with-zk-discover/direct_client_direct_server&#34;&gt;例子路径&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;直连的服务不会主动对自身进行发布，直连的 client 不会主动进行订阅。因此此例子中，pub 和 sub 都是由我们来辅助进行的。&lt;/p&gt;
&lt;p&gt;第一步，修改 MOSN 配置，增加 dubbo_registry 的 extend 扩展。&lt;/p&gt;
&lt;p&gt;第二步，mosn start&lt;/p&gt;
&lt;p&gt;第三步，start server&lt;/p&gt;
&lt;p&gt;第四步，subscribe service&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;http --json post localhost:22222/sub registry:&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;{&amp;#34;type&amp;#34;:&amp;#34;zookeeper&amp;#34;, &amp;#34;addr&amp;#34; : &amp;#34;127.0.0.1:2181&amp;#34;}&amp;#39;&lt;/span&gt; service:&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;{&amp;#34;interface&amp;#34; : &amp;#34;com.ikurento.user.UserProvider&amp;#34;, &amp;#34;methods&amp;#34; :[&amp;#34;GetUser&amp;#34;], &amp;#34;group&amp;#34; : &amp;#34;&amp;#34;, &amp;#34;version&amp;#34; : &amp;#34;&amp;#34;}&amp;#39;&lt;/span&gt; --verbose
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;第五步，publish service&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;http --json post localhost:22222/pub registry:&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;{&amp;#34;type&amp;#34;:&amp;#34;zookeeper&amp;#34;, &amp;#34;addr&amp;#34; : &amp;#34;127.0.0.1:2181&amp;#34;}&amp;#39;&lt;/span&gt; service:&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;{&amp;#34;interface&amp;#34; : &amp;#34;com.ikurento.user.UserProvider&amp;#34;, &amp;#34;methods&amp;#34; :[&amp;#34;GetUser&amp;#34;], &amp;#34;group&amp;#34; : &amp;#34;&amp;#34;, &amp;#34;version&amp;#34; : &amp;#34;&amp;#34;}&amp;#39;&lt;/span&gt; --verbose
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;第六步，start client&lt;/p&gt;
&lt;p&gt;此时应该能看到 client 侧的响应。&lt;/p&gt;
&lt;h3 id=&#34;正常的-client-与直连-dubbo-service-互通&#34;&gt;正常的 client 与直连 dubbo service 互通&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/MOSN/examples/tree/master/codes/dubbo-with-zk-discover/normal_client_direct_server&#34;&gt;例子路径&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Client 是正常 client，因此 client 会自己去 subscribe。我们只要正常地把服务 pub 出去即可：&lt;/p&gt;
&lt;p&gt;第一步，修改 MOSN 配置，增加 dubbo_registry 的 extend 扩展。&lt;/p&gt;
&lt;p&gt;第二步，mosn start&lt;/p&gt;
&lt;p&gt;第三步，start server&lt;/p&gt;
&lt;p&gt;第四步，publish service&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;http --json post localhost:22222/sub registry:&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;{&amp;#34;type&amp;#34;:&amp;#34;zookeeper&amp;#34;, &amp;#34;addr&amp;#34; : &amp;#34;127.0.0.1:2181&amp;#34;}&amp;#39;&lt;/span&gt; service:&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;{&amp;#34;interface&amp;#34; : &amp;#34;com.ikurento.user.UserProvider&amp;#34;, &amp;#34;methods&amp;#34; :[&amp;#34;GetUser&amp;#34;], &amp;#34;group&amp;#34; : &amp;#34;&amp;#34;, &amp;#34;version&amp;#34; : &amp;#34;&amp;#34;}&amp;#39;&lt;/span&gt; --verbose
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;第五步，start client&lt;/p&gt;
&lt;p&gt;此时应该能看到 client 侧的响应。&lt;/p&gt;
&lt;h2 id=&#34;faq&#34;&gt;FAQ&lt;/h2&gt;
&lt;h3 id=&#34;目前还存在哪些问题么&#34;&gt;目前还存在哪些问题么？&lt;/h3&gt;
&lt;p&gt;暂时还不支持 Dubbo 的路由，未来会进行支持。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: MOSN 作为 Istio 的数据平面</title>
      <link>https://brpc.incubator.apache.org/docs/quick-start/istio/</link>
      <pubDate>Thu, 19 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://brpc.incubator.apache.org/docs/quick-start/istio/</guid>
      <description>
        
        
        

&lt;div class=&#34;pageinfo pageinfo-primary&#34;&gt;
&lt;p&gt;MOSN 已通过 Istio 1.5.2 的 &lt;code&gt;BookInfo&lt;/code&gt; 测试，关于最新版 Istio 的支持情况可关注 &lt;a href=&#34;https://github.com/mosn/community/blob/master/wg-istio.md&#34;&gt;MOSN Istio WG&lt;/a&gt;。&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;本文介绍的内容将包括 :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MOSN 与 Istio 的关系&lt;/li&gt;
&lt;li&gt;MOSN 与 Istio 的 proxyv2 镜像 build 方法&lt;/li&gt;
&lt;li&gt;准备工作&lt;/li&gt;
&lt;li&gt;部署 Istio 与 MOSN&lt;/li&gt;
&lt;li&gt;Bookinfo 实验&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;mosn-与-istio-的关系&#34;&gt;MOSN 与 Istio 的关系&lt;/h2&gt;
&lt;p&gt;我们曾在 &lt;a href=&#34;../../overview&#34;&gt;MOSN 介绍&lt;/a&gt;中介绍过，MOSN 是一款采用 Go 语言开发的 Service Mesh 数据平面代理。&lt;/p&gt;
&lt;p&gt;下图是 Istio 整体框架下，MOSN 的工作示意图。&lt;/p&gt;
&lt;div align=center&gt;&lt;img src=&#34;mosn-with-service-mesh.svg&#34; width = &#34;450&#34; height = &#34;400&#34; alt=&#34;MOSN 介绍&#34; /&gt;&lt;/div&gt;
&lt;h2 id=&#34;mosn-与-istio-的-proxyv2-镜像-build-方法&#34;&gt;MOSN 与 Istio 的 proxyv2 镜像 build 方法&lt;/h2&gt;
&lt;p&gt;MOSN 提供了如下两种方式来构建 Istio 的 proxyv2 镜像，如果只有 MOSN 代码发生变化，则推荐使用方式二。&lt;/p&gt;
&lt;h1 id=&#34;方式一更新-istio-版本&#34;&gt;方式一（更新 Istio 版本）&lt;/h1&gt;
&lt;p&gt;1、下载对应的 Istio 版本，当前 MOSN 的 &lt;a href=&#34;https://github.com/mosn/mosn&#34;&gt;master&lt;/a&gt; 分支是支持 istio 1.5.2 ，&lt;a href=&#34;https://github.com/mosn/mosn/tree/feature-istio_adapter&#34;&gt;feature-istio_adapter&lt;/a&gt; 分支是支持 istio 1.7.x。
2、下载完 Istio 代码后，进入到 istio 目录执行如下命令：
注意：在执行如下命令前，还需要做一些准备工作，将对应的 &lt;code&gt;mosn&lt;/code&gt; 版本编译为二进制后压缩为 &lt;code&gt;mosn.tgz&lt;/code&gt; 并上传至对应的存储服务中（如 github），另外 macos 的也得编译一份 &lt;code&gt;mosn-macos.tar.gz&lt;/code&gt; ：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ISTIO_ENVOY_VERSION=v0.15.0                                                                            # 对应 mosn 的版本
ISTIO_ENVOY_RELEASE_URL=https://github.com/mosn/mosn/releases/download/0.15.0/mosn.tgz                 # 对应 Linux 环境下的二进制压缩包下载路径（存储路径需自定义）
ISTIO_ENVOY_MACOS_RELEASE_URL=https://github.com/mosn/mosn/releases/download/0.15.0/mosn-macos.tar.gz  # 对应 Macos 环境下的二进制压缩包下载路径
ISTIO_ENVOY_MACOS_RELEASE_NAME=mosn-0.15.0                                                             # 设置 macos 的 sidecar 名称
SIDECAR=mosn                                                                                           # 设置 istio 的 sidecar 为 mosn
make docker.proxyv2                                                                                    # 编译构建 proxv2 镜像
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;另外由于目前 istio 默认在构建 &lt;code&gt;proxyv2&lt;/code&gt; image 的时候会默认加载 &lt;code&gt;wasm&lt;/code&gt;，所以需要显示的在其编译脚本里面注释掉 &lt;code&gt;wasm&lt;/code&gt; 相关的编译内容：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bin/init.sh
bin/update_proxy.sh
tools/istio-docker.mk
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3、将新构建的 proxyv2 镜像打上对应的版本 tag&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker images | grep proxyv2                                                                           # 找到上一步 build 出来的 image，如名称为${PROXYV2} 版本为 ${TAG}
docker tag ${PROXYV2}:${TAG}  mosnio/proxyv2:${MOSNVERSION}                                            # ${MOSNVERSION}代码 MOSN 版本 ，其值是 `cat ./VERSION` 的输出

&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;方式二更新-mosn-版本&#34;&gt;方式二（更新 MOSN 版本）&lt;/h1&gt;
&lt;p&gt;将编译好的 &lt;code&gt;mosn&lt;/code&gt; 二进制拷贝到当前目录并在当前目录增加 &lt;code&gt;Dockerfile&lt;/code&gt; 文件,其文件内容如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;FROM mosnio/proxyv2:1.5.2-mosn
COPY mosn /usr/local/bin/mosn
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后在当前目录执行如下命令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker build --no-cache --rm -t mosnio/proxyv2:${MOSNVERSION} ./
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其中 &lt;code&gt;${MOSNVERSION}&lt;/code&gt; 的值是 &lt;code&gt;cat ./VERSION&lt;/code&gt; 的输出，当执行完成后就会在本地生成一个 &lt;code&gt;mosnio/proxyv2&lt;/code&gt; 镜像。&lt;/p&gt;
&lt;h2 id=&#34;准备工作&#34;&gt;准备工作&lt;/h2&gt;
&lt;p&gt;本文以 macOS 为例，其他环境可以安装对应版本的软件。&lt;/p&gt;
&lt;h4 id=&#34;安装-hyperkit&#34;&gt;安装 hyperkit&lt;/h4&gt;
&lt;p&gt;先安装 &lt;a href=&#34;https://store.docker.com/editions/community/docker-ce-desktop-mac&#34;&gt;docker-for-mac&lt;/a&gt;，之后&lt;a href=&#34;https://github.com/kubernetes/minikube/blob/master/docs/drivers.md&#34;&gt;安装驱动&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;安装-docker&#34;&gt;安装 docker&lt;/h4&gt;
&lt;p&gt;下载软件包安装，或者使用如下的命令安装。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ brew cask install docker
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;安装驱动&#34;&gt;安装驱动&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ curl -LO https://storage.googleapis.com/minikube/releases/latest/docker-machine-driver-hyperkit &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; chmod +x docker-machine-driver-hyperkit &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo mv docker-machine-driver-hyperkit /usr/local/bin/ &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo chown root:wheel /usr/local/bin/docker-machine-driver-hyperkit &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo chmod u+s /usr/local/bin/docker-machine-driver-hyperkit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;安装-minikube也可以购买商业-kubernetes-集群&#34;&gt;安装 Minikube（也可以购买商业 Kubernetes 集群）&lt;/h4&gt;
&lt;p&gt;推荐使用 Minikube v0.28 以上来体验，请参考 &lt;a href=&#34;https://github.com/kubernetes/minikube&#34;&gt;minikube doc&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ brew cask install minikube
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;启动-minikube&#34;&gt;启动 Minikube&lt;/h4&gt;
&lt;p&gt;注意，pilot 至少需要 2G 内存，所以在启动的时候，可以通过加参数的方法给 minikube 添加分配的资源，如果你机器的资源不够，推荐使用商业版本的 Kubernetes 集群。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ minikube start --memory&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;8192&lt;/span&gt; --cpus&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;4&lt;/span&gt; --kubernetes-version&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;v1.15.0 --vm-driver&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;hyperkit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;创建 istio 命名空间&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl create namespace istio-system
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;安装-kubectl-命令行工具&#34;&gt;安装 kubectl 命令行工具&lt;/h4&gt;
&lt;p&gt;kubectl 是用于针对 Kubernetes 集群运行命令的命令行接口，安装参考 &lt;a href=&#34;https://kubernetes.io/docs/tasks/tools/install-kubectl&#34;&gt;kubectl doc&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ brew install kubernetes-cli
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;部署istio与mosn&#34;&gt;部署Istio与MOSN&lt;/h2&gt;
&lt;h3 id=&#34;安装-istio&#34;&gt;安装 Istio&lt;/h3&gt;
&lt;p&gt;您可以在 &lt;a href=&#34;https://github.com/istio/istio/releases/tag/1.5.2&#34;&gt;Istio release&lt;/a&gt; 页面下载与您操作系统匹配的压缩文件，该文件中包含：安装文件、示例和 istioctl 命令行工具。使用如下命令来下载 Istio（本文示例使用的是 Istio 1.5.2）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ &lt;span style=&#34;color:#204a87&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ISTIO_VERSION&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;1.5.2 &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; curl -L https://istio.io/downloadIstio &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; sh -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;下载的 Istio 包名为 &lt;code&gt;istio-1.5.2&lt;/code&gt;，包含：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;install/kubernetes&lt;/code&gt;：包含 Kubernetes 相关的 YAML 安装文件;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;examples/&lt;/code&gt;：包含示例应用程序;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bin/&lt;/code&gt;：包含 istioctl 的客户端文件;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;切换到 Istio 包所在目录：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ &lt;span style=&#34;color:#204a87&#34;&gt;cd&lt;/span&gt; istio-&lt;span style=&#34;color:#000&#34;&gt;$ISTIO_VERSION&lt;/span&gt;/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用如下命令将 istioctl 客户端路径加入 $PATH 中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ &lt;span style=&#34;color:#204a87&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;PATH&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;$PATH&lt;/span&gt;:&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;$(&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;pwd&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;)&lt;/span&gt;/bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;截止目前，我们已经可以通过 istioctl 命令行工具来灵活的自定义 Istio 控制平面和数据平面配置参数。&lt;/p&gt;
&lt;h3 id=&#34;设置-mosn-作为-istio-的-sidecar&#34;&gt;设置 MOSN 作为 Istio 的 Sidecar&lt;/h3&gt;
&lt;p&gt;通过 istioctl 命令的参数指定 MOSN 作为 Istio 中的数据面：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ istioctl manifest apply  --set .values.global.proxy.image&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;mosnio/proxyv2:1.5.2-mosn&amp;#34;&lt;/span&gt;   --set meshConfig.defaultConfig.binaryPath&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;/usr/local/bin/mosn&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;修改-prometheus-deployment&#34;&gt;修改 prometheus deployment&lt;/h3&gt;
&lt;p&gt;当前版本的部署的 istio 自带的 &lt;code&gt;prometheus&lt;/code&gt;，有2个小问题需要手动调整下。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl edit deployments -n istio-system prometheus
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;将容器 &lt;code&gt;istio-proxy&lt;/code&gt; 的镜像改为 &lt;code&gt;mosnio/proxyv2:1.5.2-mosn&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;将容器 &lt;code&gt;istio-proxy&lt;/code&gt; 启动参数中的 &lt;code&gt;--binaryPath&lt;/code&gt; 的值改为 &lt;code&gt;/usr/local/bin/mosn&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;验证安装&#34;&gt;验证安装&lt;/h3&gt;
&lt;p&gt;检查 Istio 相关 pod 服务是否部署成功：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl get pod -n istio-system
NAME                                    READY   STATUS    RESTARTS   AGE
istio-ingressgateway-6f68796974-mtp2q   1/1     Running   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;          6h10m
istiod-768488f855-c7bf6                 1/1     Running   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;          6h35m
prometheus-6cd5bb8f99-8szvt             2/2     Running   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;          13m
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果服务状态 STATUS 为 Running，则表示 Istio 已经成功安装，后面就可以部署 Bookinfo 示例了。&lt;/p&gt;
&lt;p&gt;我们可以登录到 &lt;code&gt;istio-ingressgateway-6f68796974-mtp2q&lt;/code&gt; pod 上查看该网关已经成功使用MOSN作为 &lt;code&gt;ingress-gateway&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl -n istio-system &lt;span style=&#34;color:#204a87&#34;&gt;exec&lt;/span&gt; -it istio-ingressgateway-6f68796974-mtp2q -- bash
root@istio-ingressgateway-6f68796974-mtp2q:/# ps aux &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; grep mosn
root        &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;21&lt;/span&gt;  0.1  0.3 &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;129588&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;26080&lt;/span&gt; ?        Sl   10:47   0:38 /usr/local/bin/mosn start --config /etc/istio/proxy/envoy-rev0.json --service-cluster istio-ingressgateway --service-node router~172.17.0.5~istio-ingressgateway-6f68796974-mtp2q.istio-system~istio-system.svc.cluster.local
root        &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;57&lt;/span&gt;  0.0  0.0  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;11468&lt;/span&gt;  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1012&lt;/span&gt; pts/0    S+   16:58   0:00 grep --color&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;auto mosn
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;bookinfo-示例&#34;&gt;Bookinfo 示例&lt;/h2&gt;
&lt;p&gt;MOSN 已通过 Istio 1.5.2 的 &lt;code&gt;BookInfo&lt;/code&gt; 测试，相关支持动态请关注 &lt;a href=&#34;https://github.com/mosn/community/blob/master/wg-istio.md&#34;&gt;MOSN Istio WG&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;可以通过 &lt;a href=&#34;https://katacoda.com/mosn/courses/istio/mosn-with-istio&#34;&gt;MOSN with Istio&lt;/a&gt; 的教程来进行 Bookinfo 示例的演示操作，另外在该教程中您也可以找到更多关于使用 MOSN 和 Istio 的说明。&lt;/p&gt;
&lt;h3 id=&#34;bookinfo-实验&#34;&gt;BookInfo 实验&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;BookInfo&lt;/code&gt; 是一个类似豆瓣的图书应用，它包含四个基础服务：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Product Page：主页，由 python 开发，展示所有图书信息，它会调用 Reviews 和 Details 服务&lt;/li&gt;
&lt;li&gt;Reviews：评论，由 java 开发，展示图书评论，会调用 Ratings 服务&lt;/li&gt;
&lt;li&gt;Ratings：评分服务，由 nodejs 开发&lt;/li&gt;
&lt;li&gt;Details：图书详情，由 ruby 开发&lt;/li&gt;
&lt;/ul&gt;
&lt;div align=center&gt;&lt;img src=&#34;bookinfo.png&#34; width = &#34;550&#34; height = &#34;400&#34; alt=&#34;bookinfo&#34; /&gt;&lt;/div&gt;
&lt;h4 id=&#34;部署-bookinfo-应用并注入-mosn&#34;&gt;部署 &lt;code&gt;BookInfo&lt;/code&gt; 应用并注入 MOSN&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;详细过程可以参考 &lt;a href=&#34;https://istio.io/docs/examples/bookinfo/&#34;&gt;BookInfo doc&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;通过 kube-inject 的方式实现Sidecar注入：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ istioctl kube-inject -f samples/bookinfo/platform/kube/bookinfo.yaml &amp;gt; bookinfo.yaml &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sed -i &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;s/\/usr\/local\/bin\/envoy/\/usr\/local\/bin\/mosn/g&amp;#34;&lt;/span&gt; ./bookinfo.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;部署注入 Sidecar 后的 Bookinfo 应用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl apply -f bookinfo.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;验证部署是否成功：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl get services
NAME          TYPE        CLUSTER-IP      EXTERNAL-IP   PORT&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;S&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;    AGE
details       ClusterIP   10.107.154.89   &amp;lt;none&amp;gt;        9080/TCP   65m
kubernetes    ClusterIP   10.96.0.1       &amp;lt;none&amp;gt;        443/TCP    10h
productpage   ClusterIP   10.101.154.61   &amp;lt;none&amp;gt;        9080/TCP   65m
ratings       ClusterIP   10.103.70.21    &amp;lt;none&amp;gt;        9080/TCP   65m
reviews       ClusterIP   10.96.56.145    &amp;lt;none&amp;gt;        9080/TCP   65m
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;等待所有的 pod 等成功运行起来：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl get pods
NAME                              READY   STATUS    RESTARTS   AGE
details-v1-547d75b975-zrhtf       2/2     Running   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;          66m
productpage-v1-84b8bbd5bb-pc2hc   2/2     Running   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;          66m
ratings-v1-b78b5cb7-hvtwv         2/2     Running   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;          66m
reviews-v1-576d4b46f4-84cw9       2/2     Running   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;          66m
reviews-v2-68b67dcd98-d286b       2/2     Running   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;          66m
reviews-v3-784c6444b-blbgr        2/2     Running   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;          66m
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当上述状态为 Running 后，可通过如下方式确认 Bookinfo 应用是否正常运行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl &lt;span style=&#34;color:#204a87&#34;&gt;exec&lt;/span&gt; -it &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;$(&lt;/span&gt;kubectl get pod -l &lt;span style=&#34;color:#000&#34;&gt;app&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;ratings -o &lt;span style=&#34;color:#000&#34;&gt;jsonpath&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;{.items[0].metadata.name}&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;)&lt;/span&gt; -c ratings -- curl productpage:9080/productpage &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; grep -o &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;lt;title&amp;gt;.*&amp;lt;/title&amp;gt;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;同样我们可以查看此时 &lt;code&gt;BookInfo&lt;/code&gt; 应用的每一个 pod 都运行了 2 个容器，一个容器是 &lt;code&gt;BookInfo&lt;/code&gt; 自身业务容器，另一个容器是Istio注入的 sidecar MOSN 容器。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl &lt;span style=&#34;color:#204a87&#34;&gt;exec&lt;/span&gt; -it productpage-v1-84b8bbd5bb-pc2hc -c istio-proxy -- bash
istio-proxy@productpage-v1-84b8bbd5bb-pc2hc:/$ ps aux &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; grep mosn
istio-p+     &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;  0.1  0.5 &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;153964&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;41372&lt;/span&gt; ?        Ssl  16:59   0:04 /usr/local/bin/pilot-agent proxy sidecar --domain default.svc.cluster.local --configPath /etc/istio/proxy --binaryPath /usr/local/bin/mosn --serviceCluster productpage.default --drainDuration 45s --parentShutdownDuration 1m0s --discoveryAddress istiod.istio-system.svc:15012 --zipkinAddress zipkin.istio-system:9411 --proxyLogLevel&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;warning --proxyComponentLogLevel&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;misc:error --connectTimeout 10s --proxyAdminPort &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;15000&lt;/span&gt; --concurrency &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2&lt;/span&gt; --controlPlaneAuthPolicy NONE --dnsRefreshRate 300s --statusPort &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;15020&lt;/span&gt; --trust-domain&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;cluster.local --controlPlaneBootstrap&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;false&lt;/span&gt;
istio-p+    &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;18&lt;/span&gt;  0.1  0.3 &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;129584&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;25904&lt;/span&gt; ?        Sl   16:59   0:05 /usr/local/bin/mosn start --config /etc/istio/proxy/envoy-rev0.json --service-cluster productpage.default --service-node sidecar~172.17.0.14~productpage-v1-84b8bbd5bb-pc2hc.default~default.svc.cluster.local
istio-p+    &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;59&lt;/span&gt;  0.0  0.0  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;11464&lt;/span&gt;  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1156&lt;/span&gt; pts/0    S+   17:54   0:00 grep --color&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;auto mosn
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;访问-bookinfo-服务&#34;&gt;访问 BookInfo 服务&lt;/h4&gt;
&lt;p&gt;开启 gateway 模式。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl apply -f samples/bookinfo/networking/bookinfo-gateway.yaml
$ kubectl get gateway        // 查看 gateway 是否运行起来
NAME               AGE
bookinfo-gateway   24m
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;设置 &lt;code&gt;GATEWAY_URL&lt;/code&gt; 参考&lt;a href=&#34;https://istio.io/docs/tasks/traffic-management/ingress/ingress-control/#determining-the-ingress-ip-and-ports&#34;&gt;文档&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ &lt;span style=&#34;color:#204a87&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;INGRESS_PORT&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;$(&lt;/span&gt;kubectl -n istio-system get service istio-ingressgateway -o &lt;span style=&#34;color:#000&#34;&gt;jsonpath&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;{.spec.ports[?(@.name==&amp;#34;http2&amp;#34;)].nodePort}&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;)&lt;/span&gt;
$ &lt;span style=&#34;color:#204a87&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;SECURE_INGRESS_PORT&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;$(&lt;/span&gt;kubectl -n istio-system get service istio-ingressgateway -o &lt;span style=&#34;color:#000&#34;&gt;jsonpath&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;{.spec.ports[?(@.name==&amp;#34;https&amp;#34;)].nodePort}&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;)&lt;/span&gt;
$ &lt;span style=&#34;color:#204a87&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;INGRESS_HOST&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;$(&lt;/span&gt;minikube ip&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;)&lt;/span&gt;
$ &lt;span style=&#34;color:#204a87&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;GATEWAY_URL&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;$INGRESS_HOST&lt;/span&gt;:&lt;span style=&#34;color:#000&#34;&gt;$INGRESS_PORT&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;验证 gateway 是否生效，输出 &lt;code&gt;200&lt;/code&gt; 表示成功。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ curl -o /dev/null -s -w &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;%{http_code}\n&amp;#34;&lt;/span&gt;  http://&lt;span style=&#34;color:#000&#34;&gt;$GATEWAY_URL&lt;/span&gt;/productpage
&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;200&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;观察页面情况&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;访问 &lt;code&gt;http://$GATEWAY_URL/productpage&lt;/code&gt; (注意： &lt;code&gt;$GATEWAY_URL&lt;/code&gt; 需要替换成你设置的地址)，正常的话通过刷新会看到如下所示 &lt;code&gt;BookInfo&lt;/code&gt; 的界面，其中 Book Reviews 有三个版本，刷新后依次会看到(可以查看 samples/bookinfo/platform/kube/bookinfo.yaml 中的配置发现为什么是这三个版本)版本一的界面。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;v1.png&#34; alt=&#34;版本一&#34;&gt;&lt;/p&gt;
&lt;p&gt;版本二的界面。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;v2.png&#34; alt=&#34;版本二&#34;&gt;&lt;/p&gt;
&lt;p&gt;版本三的界面。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;v3.png&#34; alt=&#34;版本三&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;验证-mosn-按-version-路由能力&#34;&gt;验证 MOSN 按 version 路由能力&lt;/h4&gt;
&lt;p&gt;首先为 &lt;code&gt;BookInfo&lt;/code&gt; 的 service 创建一系列的 destination rules。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl apply -f samples/bookinfo/networking/destination-rule-all.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;指定 reviews 服务只访问 v1 版本。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl apply -f samples/bookinfo/networking/virtual-service-all-v1.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;访问 &lt;code&gt;http://$GATEWAY_URL/productpage&lt;/code&gt; 发现 reviews 固定在如下版本一的页面不再变化。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;v1.png&#34; alt=&#34;版本一&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;验证-mosn-按-weight-路由能力&#34;&gt;验证 MOSN 按 weight 路由能力&lt;/h4&gt;
&lt;p&gt;我们通过下面操作将 v1 和 v3 版本各分配 50% 的流量。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl apply -f samples/bookinfo/networking/virtual-service-reviews-50-v3.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;访问 &lt;code&gt;http://$GATEWAY_URL/productpage&lt;/code&gt; 这次 v1 和 v3 各有 1/2 几率出现。&lt;/p&gt;
&lt;h4 id=&#34;验证-mosn-按照特定-header-路由能力&#34;&gt;验证 MOSN 按照特定 header 路由能力&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;BookInfo&lt;/code&gt; 系统右上角有一个登陆的入口，登陆以后请求会带上 end-user 这个自定义，值是 user name，Mosn 支持根据这个 header 的值来做路由。比如，我们尝试将 jason 这个用户路由到 v2 版本，其他的路由到 v1 版本（用户名和密码均是：jason，为什么是这个用户可以查看对应的 yaml 文件）。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl apply -f samples/bookinfo/networking/virtual-service-reviews-test-v2.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;访问 &lt;code&gt;http://$GATEWAY_URL/productpage&lt;/code&gt; 时：&lt;/p&gt;
&lt;p&gt;以 jason 身份登陆，会看到 v2 版本。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;login.png&#34; alt=&#34;登录&#34;&gt;&lt;/p&gt;
&lt;p&gt;以其他身份登录，始终在 v1 版本。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;v1.png&#34; alt=&#34;版本一&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;卸载-bookinfo&#34;&gt;卸载 BookInfo&lt;/h3&gt;
&lt;p&gt;可以使用下面的命令来完成应用的删除和清理工作：&lt;/p&gt;
&lt;p&gt;删除路由规则，并销毁应用的 Pod。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sh samples/bookinfo/platform/kube/cleanup.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;确认 &lt;code&gt;BookInfo&lt;/code&gt; 应用已经关停：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl get virtualservices   &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#-- there should be no virtual services&lt;/span&gt;
$ kubectl get destinationrules  &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#-- there should be no destination rules&lt;/span&gt;
$ kubectl get gateway           &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#-- there should be no gateway&lt;/span&gt;
$ kubectl get pods              &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#-- the Bookinfo pods should be deleted&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;卸载-istio&#34;&gt;卸载 Istio&lt;/h2&gt;
&lt;p&gt;执行如下命令，删除 Istio 相关 CRD 以及 pod 等资源：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;istioctl manifest generate --set .values.global.proxy.image&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;mosnio/proxyv2:1.5.2-mosn&amp;#34;&lt;/span&gt; --set meshConfig.defaultConfig.binaryPath&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;/usr/local/bin/mosn&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; kubectl delete -f -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;确认 Istio 是否成功卸载：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl get namespace istio-system
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: Featuregate 介绍</title>
      <link>https://brpc.incubator.apache.org/docs/dev/featuregate-introduce/</link>
      <pubDate>Fri, 13 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://brpc.incubator.apache.org/docs/dev/featuregate-introduce/</guid>
      <description>
        
        
        &lt;h2 id=&#34;featuregate-介绍&#34;&gt;Featuregate 介绍&lt;/h2&gt;
&lt;p&gt;在 MOSN 中，存在一些功能需要在启动时决定是否开启的，为了满足这种需求，MOSN 推出了 featuregate（功能开关）的能力。&lt;/p&gt;
&lt;p&gt;Featuregate 描述了一组 MOSN 中需要开启 / 关闭的 feature 状态，每个 feature 都有自己默认的状态，每个 MOSN 版本支持的 feature、feature 默认的版本都有所不同；featuregate 的描述用一个字符串表示，按照&lt;code&gt;${feature}=${bool}&lt;/code&gt;的方式，用逗号进行分割：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 通用模版
./mosn start -c ${config path} -f ${feature gates description}
// 示例
./mosn start -c mosn_config.json -f &amp;quot;auto_config=true,XdsMtlsEnable=true&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Featuregate 不仅仅是提供了一种功能切换的能力，同时也提供了一种可扩展的开发机制，基于 MOSN 进行二次开发时，可以使用 featuregate 做到如下的功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;功能切换的能力，可以控制某个 feature 的开启 / 关闭&lt;/li&gt;
&lt;li&gt;feature 之间的依赖关系管理，包括 feature 之间的启动顺序依赖、开启 / 关闭状态的依赖等
&lt;ul&gt;
&lt;li&gt;举例说明，基于 MOSN 实现两个 feature，分别为 A 和 B，需要在 A 初始化完成以后，B 会使用 A 初始化的结果进行初始化，这就是 B 依赖 A，当 feature A 处于 Disable 状态时，B 显然也会处于 Disable 或者需要作出对应的“降级”； feature gate 框架提供了一种简单的方式，可以更加专注于 feature 的开发，而不用去管理对应的启动与依赖&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基于 featuregate 的框架，在 MOSN 中进行不同 feature 的二次开发，是 featuregate 框架最主要的目的。&lt;/p&gt;
&lt;h2 id=&#34;基于-featuregate-进行开发&#34;&gt;基于 featuregate 进行开发&lt;/h2&gt;
&lt;h3 id=&#34;featuregate-实现&#34;&gt;Featuregate 实现&lt;/h3&gt;
&lt;p&gt;首先，我们来看一下，featuregate 框架提供了哪些接口：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Go&#34; data-lang=&#34;Go&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 返回一个 Feature 当前的状态，true 表示 enable，false 表示 disable
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Enabled&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;key&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Feature&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;bool&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// “订阅”一个 Feature，并且返回其订阅完成以后的状态。
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 当订阅的 Feature 初始化完成以后，会返回其是否 Enable。
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 如果订阅的 Feature 是 Disable 的，会直接返回 false；如果在订阅的 timeout 期间，Feature 依然没有
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 初始化完成，那么会返回订阅超时的错误，如果 timeout 小于等于 0，则没有订阅超时
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Subscribe&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;key&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Feature&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;timeout&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Duration&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;error&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 设置 feature gates 的状态，value 为一个完整的 feature gates 描述
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Set&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;error&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 设置 feature gates 的状态，其中 map 的 key 为 feature 的 key，value 是期望设置的 feature 状态
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;SetFromMap&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;m&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;map&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;error&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 新注册一个 feature 到 feature gate 中
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;AddFeatureSpec&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;key&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Feature&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;spec&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;FeatureSpec&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;error&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 设置一个 feature 的状态
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;SetFeatureState&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;key&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Feature&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;enable&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;error&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 开启初始化 feature
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;StartInit&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 等待所有的 feature 初始化结束
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;WaitInitFinsh&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;error&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这其中，StartInit 和 WaitInitFinsh 是由 MOSN 框架进行调用，基于 MOSN 进行二次开发时无须关注和调用；通常情况下，Set 和 SetFromMap 也无须关注。所有的上述接口，都是由框架下默认的一个不可导出的全局 featuregate 对象暴露，在没有极为特殊需求的场景下（如编写单元测试），不需要额外生成 FeatureGate 对象，使用默认的即可。&lt;/p&gt;
&lt;p&gt;接下来，我们看一下 featuregate 的实现：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Go&#34; data-lang=&#34;Go&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;knownFeatureSpec&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#000&#34;&gt;FeatureSpec&lt;/span&gt;
        &lt;span style=&#34;color:#000&#34;&gt;once&lt;/span&gt;    &lt;span style=&#34;color:#000&#34;&gt;sync&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Once&lt;/span&gt;
        &lt;span style=&#34;color:#000&#34;&gt;channel&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;struct&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{}&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Feature&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;string&lt;/span&gt;
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;FeatureGate&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// lock guards writes to known, enabled, and reads/writes of closed
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#000&#34;&gt;lock&lt;/span&gt;  &lt;span style=&#34;color:#000&#34;&gt;sync&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Mutex&lt;/span&gt;
        &lt;span style=&#34;color:#000&#34;&gt;known&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;map&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Feature&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;knownFeatureSpec&lt;/span&gt;
        &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// inited is set to true when StartInit is called.
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#000&#34;&gt;inited&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;bool&lt;/span&gt;
        &lt;span style=&#34;color:#000&#34;&gt;wg&lt;/span&gt;     &lt;span style=&#34;color:#000&#34;&gt;sync&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;WaitGroup&lt;/span&gt;
        &lt;span style=&#34;color:#000&#34;&gt;once&lt;/span&gt;   &lt;span style=&#34;color:#000&#34;&gt;sync&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Once&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Featuregate 包含了一个 map，用于记录所有被支持的 feature；一个&lt;code&gt;inited&lt;/code&gt;状态标，表示 featuregate 是否已经完成了初始化；&lt;code&gt;once&lt;/code&gt;用于确保 featuregate 的初始化只执行一次，&lt;code&gt;WaitGroup&lt;/code&gt;则用于同步 feature 初始化的结果；一个&lt;code&gt;Mutex&lt;/code&gt;用于并发保护。
按照 featuregate 的设计，不同的 feature 是可以通过&lt;code&gt;Add&lt;/code&gt;的方式新增，以及不同的&lt;code&gt;Set&lt;/code&gt;方法改变状态的，而不同 feature 的初始化&lt;code&gt;Init&lt;/code&gt;函数都会统一执行，因此一旦执行完&lt;code&gt;Init&lt;/code&gt;，则不再允许新增 feature、修改 feature 状态；因此我们需要一个&lt;code&gt;inited&lt;/code&gt;的标记来记录这个行为。
&lt;code&gt;knownFeatureSpec&lt;/code&gt;是一个不可导出的结构体，用于对表示不同 feature 的&lt;code&gt;FeatureSpec&lt;/code&gt;封装，其中的&lt;code&gt;once&lt;/code&gt;和&lt;code&gt;channel&lt;/code&gt;均是用于 featuregate 中订阅和初始化使用，在此不做详细说明。
下面，我们来看一下&lt;code&gt;FeatureSpec&lt;/code&gt;的定义，这也是我们基于 featuregate 框架进行开发的核心数据结构。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Go&#34; data-lang=&#34;Go&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;prerelease&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;string&lt;/span&gt;
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;
        &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// Values for PreRelease.
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#000&#34;&gt;Alpha&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;prerelease&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;ALPHA&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color:#000&#34;&gt;Beta&lt;/span&gt;  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;prerelease&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;BETA&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color:#000&#34;&gt;GA&lt;/span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;prerelease&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;FeatureSpec&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// Default is the default enablement state for the feature
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#000&#34;&gt;Default&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;bool&lt;/span&gt;
        &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// LockToDefault indicates that the feature is locked to its default and cannot be changed
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#000&#34;&gt;LockToDefault&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;bool&lt;/span&gt;
        &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// SetState sets the enablement state for the feature
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#000&#34;&gt;SetState&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;enable&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// State indicates the feature enablement
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#000&#34;&gt;State&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;bool&lt;/span&gt;
        &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// InitFunc used to init process when StartInit is invoked
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#000&#34;&gt;InitFunc&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
        &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// PreRelease indicates the maturity level of the feature
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#000&#34;&gt;PreRelease&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;prerelease&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;prerelease&lt;/code&gt; 是不可导出的定义，有三个约定的导出变量可以使用，相当于传统语言的 Enum 类型，用于描述 feature 的信息，没有明确的作用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FeatureSpec&lt;/code&gt;可以自行实现，同时多数情况下可以用框架实现的&lt;code&gt;BaseFeatureSpec&lt;/code&gt;，或者基于&lt;code&gt;BaseFeatureSpec&lt;/code&gt;进行封装；如注释描述，通常情况下只需要额外封装实现一个&lt;code&gt;InitFunc&lt;/code&gt;函数即可&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Go&#34; data-lang=&#34;Go&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// BaseFeatureSpec is a basic implementation of FeatureSpec.
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// Usually, a feature spec just need an init func.
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;BaseFeatureSpec&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 默认状态
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#000&#34;&gt;DefaultValue&lt;/span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;bool&lt;/span&gt;
        &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 是否可修改状态，如果为 true，说明这个 feature 只能保持默认状态
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 一般情况下设置这个为 true 的时候，default 也是 true
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 这种 feature 主要会用于做为其他 feature 的“基础依赖”
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#000&#34;&gt;IsLockedDefault&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;bool&lt;/span&gt;
        &lt;span style=&#34;color:#000&#34;&gt;PreReleaseValue&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;prerelease&lt;/span&gt;
        &lt;span style=&#34;color:#000&#34;&gt;stateValue&lt;/span&gt;      &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;bool&lt;/span&gt;  &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// stateValue shoule be setted by SetState
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#000&#34;&gt;inited&lt;/span&gt;          &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int32&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// inited cannot be setted
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;featuregate-的使用&#34;&gt;Featuregate 的使用&lt;/h3&gt;
&lt;p&gt;了解了 featuregate 的基本实现，就可以考虑使用 featuregate 进行基本的编程扩展了。下面会介绍几种 featuregate 的使用场景，以及如何编写 feature。&lt;/p&gt;
&lt;h4 id=&#34;1-基本的全局开关&#34;&gt;1. 基本的“全局”开关&lt;/h4&gt;
&lt;p&gt;对于 feature 切换最基本的使用场景，就是使用一个类似“全局变量”进行控制，通过&lt;code&gt;if&lt;/code&gt;条件判断执行不同的逻辑。使用 featuregate 框架实现这种能力，可以把控制 feature 切换的参数全部统一到启动参数中。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Go&#34; data-lang=&#34;Go&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;featureName&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;featuregate&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Feature&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;simple_feature&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;init&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;fs&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;featuregate&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;BaseFeatureSpec&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#000&#34;&gt;DefaultValue&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;true&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;featuregate&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;AddFeatureSpec&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;featureName&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;fs&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;myfunc&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;featuregate&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Enable&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;featureName&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#000&#34;&gt;dosth&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#000&#34;&gt;dosth2&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;2-需要进行初始化操作&#34;&gt;2. 需要进行“初始化”操作&lt;/h4&gt;
&lt;p&gt;通过封装扩展 InitFunc 函数，让相关的初始化工作在 MOSN 启动时统一完成，如果 feature 处于 disable 状态，那么 InitFunc 不会执行。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Go&#34; data-lang=&#34;Go&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;featureName&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;featuregate&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Feature&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;init_feature&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;MyFeature&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;BaseFeatureSpec&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;f&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;MyFeature&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;InitFunc&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;doInit&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 其他的类似 1.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;3-feature-之间存在依赖关系&#34;&gt;3. Feature 之间存在依赖关系&lt;/h4&gt;
&lt;p&gt;这个功能是 featuregate 框架提供的最重要的能力，可以方便的解决下面的场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;假设我们存在四个独立的组件（feature），分别是 A、B、C，D&lt;/li&gt;
&lt;li&gt;B 和 C 的启动都依赖于 A，即首先要 A 启动完成，然后 B 和 C 才能启动完成；D 依赖于 B，必须 B 启动完成，D 才可以启动&lt;/li&gt;
&lt;li&gt;如果 A 没有启动，B 就不能启动，而 C 存在一种降级方案，依然可以继续工作&lt;/li&gt;
&lt;li&gt;四个 feature 在 featuregate 框架下可各自实现，如下&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Go&#34; data-lang=&#34;Go&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;FeatureA&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;featuregate&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Feature&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;init&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;fs&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;featuregate&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;BaseFeatureSpec&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#000&#34;&gt;DefaultValue&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;true&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;featuregate&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;AddFeatureSpec&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;FeatureA&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;fs&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Go&#34; data-lang=&#34;Go&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;FeatureB&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;featuregate&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Feature&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;B&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;FB&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;BaseFeatureSpec&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;f&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;FB&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;InitFunc&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;enabled&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;featuregate&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Subscribe&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;FeatureA&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Second&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;enabled&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#000&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;SetState&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 如果 FeatureA 没有开启，则 FeatureB 也不开启
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Go&#34; data-lang=&#34;Go&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;FeatureC&lt;/span&gt;  &lt;span style=&#34;color:#000&#34;&gt;featuregate&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Feature&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;C&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;FC&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;BaseFeatureSpec&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;mode&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int32&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;f&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;FC&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;InitFunc&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;enabled&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;featuregate&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Subscribe&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;FeatureA&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Second&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;enabled&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#000&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;mode&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 降级模式
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;enabled&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#000&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;mode&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 正常模式
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;f&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;FC&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;MyFunc&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;mode&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#000&#34;&gt;dosth&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;mode&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#000&#34;&gt;dosth2&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Go&#34; data-lang=&#34;Go&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;FeatureD&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;featuregate&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Feature&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;D&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;FD&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;BaseFeatureSpec&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;f&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;FD&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;InitFunc&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;enabled&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;featuregate&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Subscribe&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;FeatureB&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 不超时，一定要等待 B 结束
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;enabled&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Start&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;f&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;FD&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Start&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;faq&#34;&gt;FAQ&lt;/h3&gt;
&lt;h4 id=&#34;为什么不使用配置的方式而要使用-featuregate&#34;&gt;为什么不使用配置的方式，而要使用 featuregate?&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;配置文件需要进行解析，featuregate 更有利于扩展能力的实现&lt;/li&gt;
&lt;li&gt;有的 feature 需要判断的时机，比配置文件解析要早，甚至可能影响配置解析的逻辑&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Router 配置</title>
      <link>https://brpc.incubator.apache.org/docs/configuration/server/router/</link>
      <pubDate>Fri, 13 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://brpc.incubator.apache.org/docs/configuration/server/router/</guid>
      <description>
        
        
        &lt;p&gt;&lt;code&gt;router&lt;/code&gt; 用于描述 MOSN 的路由配置，通常与 proxy 配合使用。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  &amp;quot;router_config_name&amp;quot;:&amp;quot;&amp;quot;,
  &amp;quot;virtual_hosts&amp;quot;: [
  ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;router_config_name&lt;/code&gt;，唯一的路由配置标识，与 &lt;code&gt;proxy&lt;/code&gt; 中配置的字段对应。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;virtual_hosts&lt;/code&gt;，描述具体的路由规则细节。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;virtualhost&#34;&gt;VirtualHost&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;domains&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:[],&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;routers&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:[]&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt;，字符串。用作 virtual host 的唯一标识。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;domains&lt;/code&gt;，字符串数组。表示一组可以匹配到该 virtual host 的 domain，支持配置通配符。domain 的匹配优先级如下：
&lt;ul&gt;
&lt;li&gt;首先匹配精确的，如 &lt;code&gt;www.foo.com&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;其次匹配最长后缀的通配符，如 &lt;code&gt;*.foo.com&lt;/code&gt;、&lt;code&gt;*-bar.foo.com&lt;/code&gt;，其中如果一个 domain 是 &lt;code&gt;foo-bar.foo.com&lt;/code&gt;，那么会优先匹配 &lt;code&gt;*-bar.foo.com&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;最后匹配任意domain的通配符 &lt;code&gt;*&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;routers&lt;/code&gt;，一组具体的路由匹配规则。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;router&#34;&gt;Router&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;match&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:{},&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;route&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:{},&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;per_filter_config&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:{}&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;match&lt;/code&gt;，路由的匹配参数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;route&lt;/code&gt;，路由行为，描述请求将被路由的 upstream 信息。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;per_filter_config&lt;/code&gt;，是一个 &lt;code&gt;key: json&lt;/code&gt; 格式的 json。&lt;/li&gt;
&lt;li&gt;其中 key 需要匹配一个 stream filter 的 type，key 对应的 json 是该 stream filter 的 config。
&lt;ul&gt;
&lt;li&gt;当配置了该字段时，对于某些 stream filter（依赖具体 filter 的实现），可以使用该字段表示的配置覆盖原有 stream filter 的配置，以此做到路由匹配级别的 stream filter 配置。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;match&#34;&gt;match&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;prefix&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;path&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;regex&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;headers&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[]&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;路径（path）匹配
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;prefix&lt;/code&gt;，表示路由会匹配 path 的前缀，该配置的优先级高于 path 和 regex。 如果 prefix 被配置，那么请求首先要满足 path 的前缀与 prefix 配置相符合。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;path&lt;/code&gt;，表示路由会匹配精确的 path，该配置的优先级高于 regex。如果 path被配置，那么请求首先要满足 path 与 path 配置相符合。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;regex&lt;/code&gt;，表示路由会按照正则匹配的方式匹配 path。如果 regex 被配置，那么请求首先要满足 path 与 regex 配置相符合。&lt;/li&gt;
&lt;li&gt;路径匹配配置同时存在时，只有高优先级的配置会生效。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Heaer 匹配
&lt;ul&gt;
&lt;li&gt;headers，表示一组请求需要匹配的 header。请求需要满足配置中所有的 Header 配置条件才算匹配成功。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;header&#34;&gt;header&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;regex&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt;，表示 header 的 key。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;value&lt;/code&gt;，表示 header 对应 key 的 value。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;regex&lt;/code&gt;，bool 类型，如果为 true，表示 value 支持按照正则表达式的方式进行匹配。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;route&#34;&gt;route&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;{
  &amp;quot;cluster_name&amp;quot;:&amp;quot;&amp;quot;,
  &amp;quot;metadata_match&amp;quot;:&amp;quot;&amp;quot;,
  &amp;quot;timeout&amp;quot;:&amp;quot;&amp;quot;,
  &amp;quot;retry_policy&amp;quot;:{}
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cluster_name&lt;/code&gt;，表示请求将路由到的 upstream cluster。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;metadata_match&lt;/code&gt;，&lt;a href=&#34;../../custom#metadata&#34;&gt;metadata&lt;/a&gt;，如果配置了该字段，表示该路由会基于该 metadata 去匹配 upstream cluster 的 subset 。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;timeout&lt;/code&gt;，&lt;a href=&#34;../../custom#duration-string&#34;&gt;Duration String&lt;/a&gt;，表示默认情况下请求转发的超时时间。如果请求中明确指定了超时时间，那么这个配置会被忽略。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;retry_policy&lt;/code&gt;，重试配置，表示如果请求在遇到了特定的错误时采取的重试策略，默认没有配置的情况下，表示没有重试。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;retry_policy&#34;&gt;retry_policy&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;retry_on&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;retry_timeout&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;num_retries&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;retry_on&lt;/code&gt;，bool 类型，表示是否开启重试。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;retry_timeout&lt;/code&gt;，&lt;a href=&#34;../../custom#duration-string&#34;&gt;Duration String&lt;/a&gt;，表示每次重试的超时时间。当 &lt;code&gt;retry_timeout&lt;/code&gt; 大于 route 配置的 timeout 或者请求明确指定的 timeout 时，属于无效配置。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;num_retries&lt;/code&gt;，表示最大的重试次数。&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 创建页面</title>
      <link>https://brpc.incubator.apache.org/docs/contribute/creating-pages/</link>
      <pubDate>Tue, 11 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://brpc.incubator.apache.org/docs/contribute/creating-pages/</guid>
      <description>
        
        
        &lt;h2 id=&#34;开始之前&#34;&gt;开始之前&lt;/h2&gt;
&lt;p&gt;在开始编写 MOSN 文档之前，首先需要你创建一个 MOSN 文档存储库，和熟悉 MOSN 的文档结构。&lt;/p&gt;
&lt;h2 id=&#34;页面类型&#34;&gt;页面类型&lt;/h2&gt;
&lt;h3 id=&#34;文档&#34;&gt;文档&lt;/h3&gt;
&lt;p&gt;系统化介绍 MOSN 使用的文档，由 MOSN 团队官方维护。&lt;/p&gt;
&lt;h3 id=&#34;博客&#34;&gt;博客&lt;/h3&gt;
&lt;p&gt;周期化发布的 MOSN 博客，来自社区贡献。&lt;/p&gt;
&lt;h3 id=&#34;新闻&#34;&gt;新闻&lt;/h3&gt;
&lt;p&gt;关于 MOSN 社区的新闻信息。&lt;/p&gt;
&lt;h3 id=&#34;发布&#34;&gt;发布&lt;/h3&gt;
&lt;p&gt;MOSN 的新版本发布信息。&lt;/p&gt;
&lt;h2 id=&#34;文档结构&#34;&gt;文档结构&lt;/h2&gt;
&lt;p&gt;所有文档都位于 &lt;code&gt;content&lt;/code&gt; 目录下，&lt;code&gt;content/zh&lt;/code&gt; 为中文文档，&lt;code&gt;content/en&lt;/code&gt; 为英文文档，要想在某一层级的文档下再创建一个新的文档需要先创建一个目录，并根据：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有没有子目录的文档都以 &lt;code&gt;index.md&lt;/code&gt; 命名。&lt;/li&gt;
&lt;li&gt;所有包含子目录的文档都以 &lt;code&gt;_index.md&lt;/code&gt; 命名。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;文档元数据&#34;&gt;文档元数据&lt;/h2&gt;
&lt;p&gt;每个文档都有元数据信息，元数据信息是介于两个 YAML 块之间通过 3 个“-”分割的信息。下面就是你必须填写的元数据信息：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;title&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;标题&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;linkTitle&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;标题&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;date&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;2020-02-11&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;weight&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;description&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;关于本页内容的简介。&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以下是详细介绍：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;title：即本文章的标题。&lt;/li&gt;
&lt;li&gt;linkTitle：显示在侧边栏的文档标题，一般写成跟 &lt;code&gt;title&lt;/code&gt; 的内容一致即可。&lt;/li&gt;
&lt;li&gt;date：该文档的创作日期，格式为 &lt;code&gt;YYYY-MM-dd&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;weight：在同一文档层级，weight 数字越小的文档在侧边栏中显示约靠前，对于非 &lt;code&gt;docs&lt;/code&gt; 目录下的文章不需要设置。&lt;/li&gt;
&lt;li&gt;description：对本文档的简介。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于博客、发布、新闻文档，还需要填写作者信息：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;author&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;作者信息&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意：作者信息的值支持 Markdown。&lt;/p&gt;
&lt;h2 id=&#34;文档命名&#34;&gt;文档命名&lt;/h2&gt;
&lt;p&gt;文档的 URL 是根据该篇文档所在的目录层级而确定的，文档的目录名称规范：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用英文单词命名&lt;/li&gt;
&lt;li&gt;不同的单词间使用连字符连接&lt;/li&gt;
&lt;li&gt;不得出现其他标点符号&lt;/li&gt;
&lt;li&gt;名称尽量简短&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 样式指南</title>
      <link>https://brpc.incubator.apache.org/docs/contribute/style-guide/</link>
      <pubDate>Tue, 11 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://brpc.incubator.apache.org/docs/contribute/style-guide/</guid>
      <description>
        
        
        &lt;h2 id=&#34;格式标准&#34;&gt;格式标准&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;必须使用 Markdown 格式编辑文档正文。&lt;/li&gt;
&lt;li&gt;文档正文标题从二级标题开始。&lt;/li&gt;
&lt;li&gt;图片使用本地图片，跟 &lt;code&gt;index.md&lt;/code&gt; 文件放在同一个目录下，使用相对位置引用。&lt;/li&gt;
&lt;li&gt;所有代码都需要指定代码语言。&lt;/li&gt;
&lt;li&gt;中英文之间要加空格，如果句子末尾是英文则不需要。&lt;/li&gt;
&lt;li&gt;请不要将有序列表和无序列表穿插混用，容易造成格式混乱。&lt;/li&gt;
&lt;li&gt;对于直接出现的 URL 链接请使用 &lt;code&gt;&amp;lt;URL&amp;gt;&lt;/code&gt; 包裹起来。&lt;/li&gt;
&lt;li&gt;对于非通用词汇、代码中词组的引用请使用反括号包裹起来。&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: ClusterManager 配置</title>
      <link>https://brpc.incubator.apache.org/docs/configuration/clustermanager/</link>
      <pubDate>Mon, 20 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://brpc.incubator.apache.org/docs/configuration/clustermanager/</guid>
      <description>
        
        
        
      </description>
    </item>
    
    <item>
      <title>Docs: connection_manager</title>
      <link>https://brpc.incubator.apache.org/docs/configuration/server/listener/network-filter/connection-manager/</link>
      <pubDate>Mon, 20 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://brpc.incubator.apache.org/docs/configuration/server/listener/network-filter/connection-manager/</guid>
      <description>
        
        
        &lt;p&gt;&lt;code&gt;connection_manager&lt;/code&gt; 用于描述 MOSN 的路由配置，通常与 proxy 配合使用。配置详细描述见&lt;a href=&#34;../../../router&#34;&gt;router&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;注意：这是一个已经废弃的配置项。依然保留它的存在，是为了兼容性考虑。
新的配置模式下，应该配置在&lt;a href=&#34;../../../../server&#34;&gt;server&lt;/a&gt;的routers中&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Sidecar 模式</title>
      <link>https://brpc.incubator.apache.org/docs/concept/sidecar-pattern/</link>
      <pubDate>Sun, 20 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://brpc.incubator.apache.org/docs/concept/sidecar-pattern/</guid>
      <description>
        
        
        &lt;p&gt;Sidecar 模式是 Service Mesh 中习惯采用的模式，是容器设计模式的一种，在 Service Mesh 出现之前该模式就一直存在，本文将为您讲解 Sidecar 模式。&lt;/p&gt;
&lt;h2 id=&#34;什么是-sidecar-模式&#34;&gt;什么是 Sidecar 模式&lt;/h2&gt;
&lt;p&gt;将应用程序的功能划分为单独的进程可以被视为 &lt;strong&gt;Sidecar 模式&lt;/strong&gt;。如图所示，Sidecar 模式允许您在应用程序旁边添加更多功能，而无需额外第三方组件配置或修改应用程序代码。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;sidecar-pattern.jpg&#34; alt=&#34;Sidecar 模式&#34;&gt;&lt;/p&gt;
&lt;p&gt;就像连接了 Sidecar 的三轮摩托车一样，在软件架构中， Sidecar 连接到父应用并且为其添加扩展或者增强功能。Sidecar 应用与主应用程序松散耦合。它可以屏蔽不同编程语言的差异，统一实现微服务的可观察性、监控、日志记录、配置、断路器等功能。&lt;/p&gt;
&lt;h2 id=&#34;使用-sidecar-模式的优势&#34;&gt;使用 Sidecar 模式的优势&lt;/h2&gt;
&lt;p&gt;Sidecar 模式具有以下优势：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;将与应用业务逻辑无关的功能抽象到共同基础设施降低了微服务代码的复杂度。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;因为不再需要编写相同的第三方组件配置文件和代码，所以能够降低微服务架构中的代码重复度。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;降低应用程序代码和底层平台的耦合度。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;sidecar-模式如何工作&#34;&gt;Sidecar 模式如何工作&lt;/h2&gt;
&lt;p&gt;Sidecar 是容器应用模式的一种，也是在 Service Mesh 中发扬光大的一种模式，详见 &lt;a href=&#34;https://www.servicemesher.com/blog/service-mesh-architectures/&#34;&gt;Service Mesh 架构解析&lt;/a&gt;，其中详细描述使用了&lt;strong&gt;节点代理&lt;/strong&gt;和 &lt;strong&gt;Sidecar&lt;/strong&gt; 模式的 Service Mesh 架构。&lt;/p&gt;
&lt;p&gt;使用 Sidecar 模式部署服务网格时，无需在节点上运行代理，但是集群中将运行多个相同的 Sidecar 副本。在 Sidecar 部署方式中，每个应用的容器旁都会部署一个伴生容器，这个容器称之为 Sidecar 容器。Sidecar 接管进出应用容器的所有流量。在 Kubernetes 的 Pod 中，在原有的应用容器旁边注入一个 Sidecar 容器，两个容器共享存储、网络等资源，可以广义的将这个包含了 Sidecar 容器的 Pod 理解为一台主机，两个容器共享主机资源。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 流量劫持</title>
      <link>https://brpc.incubator.apache.org/docs/concept/traffic-hijack/</link>
      <pubDate>Mon, 20 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://brpc.incubator.apache.org/docs/concept/traffic-hijack/</guid>
      <description>
        
        
        &lt;p&gt;本文描述的是 MOSN 作为 Sidecar 使用时的流量劫持方案。&lt;/p&gt;
&lt;p&gt;MOSN 作为 Sidecar 和业务容器部署在同一个 Pod 中时，需要使得业务应用的 Inbound 和 Outbound 服务请求都能够经过 Sidecar 处理。区别于 Istio 社区使用 iptables 做流量透明劫持，MOSN 目前使用的是流量接管方案，并在积极探索适用于大规模流量下的透明劫持方案。&lt;/p&gt;
&lt;h2 id=&#34;流量接管&#34;&gt;流量接管&lt;/h2&gt;
&lt;p&gt;区别于 Istio 社区的 &lt;a href=&#34;https://jimmysong.io/istio-handbook/concepts/sidecar-injection-deep-dive.html&#34;&gt;iptables 流量劫持方案&lt;/a&gt;，MOSN 使用的流量接管的方案如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;假设服务端运行在 1.2.3.4 这台机器上，监听 20880 端口，首先服务端会向自己的 Sidecar 发起服务注册请求，告知 Sidecar 需要注册的服务以及 IP + 端口（1.2.3.4:20880）&lt;/li&gt;
&lt;li&gt;服务端的 Sidecar 会向服务注册中心（如 SOFA Registry）发起服务注册请求，告知需要注册的服务以及 IP + 端口，不过这里需要注意的是注册上去的并不是业务应用的端口（20880），而是 Sidecar 自己监听的一个端口（例如：20881）&lt;/li&gt;
&lt;li&gt;调用端向自己的 Sidecar 发起服务订阅请求，告知需要订阅的服务信息&lt;/li&gt;
&lt;li&gt;调用端的 Sidecar 向调用端推送服务地址，这里需要注意的是推送的 IP 是本机，端口是调用端的 Sidecar 监听的端口（例如 20882）&lt;/li&gt;
&lt;li&gt;调用端的 Sidecar 会向服务注册中心（如 SOFA Registry）发起服务订阅请求，告知需要订阅的服务信息；&lt;/li&gt;
&lt;li&gt;服务注册中心（如 SOFA Registry）向调用端的 Sidecar 推送服务地址（1.2.3.4:20881）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;traffic-hijacking.png&#34; alt=&#34;流量接管示意图&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;服务调用过程&#34;&gt;服务调用过程&lt;/h3&gt;
&lt;p&gt;经过上述的服务发现过程，流量转发过程就显得非常自然了：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;调用端拿到的服务端地址是 &lt;code&gt;127.0.0.1:20882&lt;/code&gt;，所以就会向这个地址发起服务调用&lt;/li&gt;
&lt;li&gt;调用端的 Sidecar 接收到请求后，通过解析请求头，可以得知具体要调用的服务信息，然后获取之前从服务注册中心返回的地址后就可以发起真实的调用（&lt;code&gt;1.2.3.4:20881&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;服务端的 Sidecar 接收到请求后，经过一系列处理，最终会把请求发送给服务端（&lt;code&gt;127.0.0.1:20880&lt;/code&gt;）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;service-call-process.png&#34; alt=&#34;服务调用过程示意图&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;透明劫持&#34;&gt;透明劫持&lt;/h2&gt;
&lt;p&gt;上文通过在服务注册过程中把服务端地址替换成本机监听端口实现了轻量级的“流量劫持”，在存在注册中心，且调用端和服务端同时使用特定SDK的场景中可以很好的工作，如果不满足这两个条件，则无法流量劫持。为了降低对于应用程序的要求，需要引入透明劫持。&lt;/p&gt;
&lt;h3 id=&#34;使用-iptables-做流量劫持&#34;&gt;使用 iptables 做流量劫持&lt;/h3&gt;
&lt;p&gt;iptables 通过 NAT 表的 redirect 动作执行流量重定向，通过 syn 包触发新建 nefilter 层的连接，后续报文到来时查找连接转换目的地址与端口。新建连接时同时会记录下原始目的地址，应用程序可以通过(&lt;code&gt;SOL_IP&lt;/code&gt;、&lt;code&gt;SO_ORIGINAL_DST&lt;/code&gt;)获取到真实的目的地址。&lt;/p&gt;
&lt;p&gt;iptables 劫持原理如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;iptables.png&#34; alt=&#34;iptables 劫持原理&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;使用-iptables-做流量劫持时存在的问题&#34;&gt;使用 iptables 做流量劫持时存在的问题&lt;/h3&gt;
&lt;p&gt;目前 Istio 使用 iptables 实现透明劫持，主要存在以下三个问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;需要借助于 conntrack 模块实现连接跟踪，在连接数较多的情况下，会造成较大的消耗，同时可能会造成 track 表满的情况，为了避免这个问题，业内有关闭 conntrack 的做法。&lt;/li&gt;
&lt;li&gt;iptables 属于常用模块，全局生效，不能显式的禁止相关联的修改，可管控性比较差。&lt;/li&gt;
&lt;li&gt;iptables 重定向流量本质上是通过 loopback 交换数据，outbond 流量将两次穿越协议栈，在大并发场景下会损失转发性能。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;上述几个问题并非在所有场景中都存在，比方说某些场景下，连接数并不多，且 NAT 表未被使用到的情况下，iptables 是一个满足要求的简单方案。为了适配更加广泛的场景，透明劫持需要解决上述三个问题。&lt;/p&gt;
&lt;h3 id=&#34;透明劫持方案优化&#34;&gt;透明劫持方案优化&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;使用 tproxy 处理 inbound 流量&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;tproxy 可以用于 inbound 流量的重定向，且无需改变报文中的目的 IP/端口，不需要执行连接跟踪，不会出现 conntrack 模块创建大量连接的问题。受限于内核版本，tproxy 应用于 outbound 存在一定缺陷。目前 Istio 支持通过 tproxy 处理 inbound 流量。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用 hook connect 处理 outbound 流量&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为了适配更多应用场景，outbound 方向通过 hook connect 来实现，实现原理如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;hook-connect.png&#34; alt=&#34;hook-connect 原理示意图&#34;&gt;&lt;/p&gt;
&lt;p&gt;无论采用哪种透明劫持方案，均需要解决获取真实目的 IP/端口的问题，使用 iptables 方案通过 getsockopt 方式获取，tproxy 可以直接读取目的地址，通过修改调用接口，hook connect 方案读取方式类似于tproxy。&lt;/p&gt;
&lt;p&gt;实现透明劫持后，在内核版本满足要求（4.16以上）的前提下，通过 sockmap 可以缩短报文穿越路径，进而改善 outbound 方向的转发性能。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;总结来看，如果应用程序通过注册中心发布/订阅服务时，可以结合注册中心劫持流量；在需要用到透明劫持的场景，如果性能压力不大，使用 iptables redirect 即可，大并发压力下使用 tproxy 与hook connect 结合的方案。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 自定义配置</title>
      <link>https://brpc.incubator.apache.org/docs/configuration/custom/</link>
      <pubDate>Mon, 20 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://brpc.incubator.apache.org/docs/configuration/custom/</guid>
      <description>
        
        
        &lt;p&gt;本文是对 MOSN 自定义配置的说明。&lt;/p&gt;
&lt;h3 id=&#34;duration-string&#34;&gt;Duration String&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;字符串，由一个十进制数字和一个时间单位后缀组成，有效的时间单位为 &lt;code&gt;ns&lt;/code&gt;、&lt;code&gt;us&lt;/code&gt;（或&lt;code&gt;µs&lt;/code&gt;）、&lt;code&gt;ms&lt;/code&gt;、&lt;code&gt;s&lt;/code&gt;、&lt;code&gt;m&lt;/code&gt;、&lt;code&gt;h&lt;/code&gt;，例如 &lt;code&gt;1h&lt;/code&gt;、&lt;code&gt;3s&lt;/code&gt;、&lt;code&gt;500ms&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;metadata&#34;&gt;metadata&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;metadata&lt;/code&gt; 用于 MOSN 路由和 Cluster Host 之间的匹配。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;filter_metadata&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:{&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;mosn.lb&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:{}&lt;/span&gt;
  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;mosn.lb&lt;/code&gt; 可对应任意的 &lt;code&gt;string-string&lt;/code&gt; 的内容。&lt;/p&gt;
&lt;h3 id=&#34;tls_context&#34;&gt;tls_context&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;status&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;server_name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;ca_cert&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;cert_chain&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;private_key&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;verify_client&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;require_client_cert&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;insecure_skip&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;cipher_suites&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;ecdh_curves&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;min_version&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;max_version&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;alpn&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;fall_back&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;extend_verify&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;sds_source&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:{}&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;status&lt;/code&gt;，bool类型，表示是否开启 TLS，默认是 false。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;type&lt;/code&gt;，字符串类型，描述 tls_context 的类型。tls_context 支持扩展实现，不同的 type 对应不同的实现方式，默认实现方式对应的 type 是空字符串。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;server_name&lt;/code&gt;，当没有配置 insecure_skip 时，用于校验服务端返回证书的 hostname。作为Cluster配置时有效。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ca_cert&lt;/code&gt;，证书签发的根 CA 证书。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cert_chain&lt;/code&gt;，TLS 证书链配置。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;private_key&lt;/code&gt;，证书私钥配置。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;verify_client&lt;/code&gt;，bool 类型，作为 Listener 配置时有效，表示是否要校验 Client 端证书&lt;/li&gt;
&lt;li&gt;&lt;code&gt;require_client_cert&lt;/code&gt;，bool 类型，表示是否强制 Client 端必须携带证书。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;insecure_skip&lt;/code&gt;，bool 类型，作为 Cluster 配置时有效，表示是否要忽略 Server 端的证书校验。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cipher_suites&lt;/code&gt;，如果配置了该配置，那么 TLS 连接将只支持配置了的密码套件，并且会按照配置的顺序作为优先级使用，支持的套件类型如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;ECDHE-ECDSA-AES256-GCM-SHA384
ECDHE-RSA-AES256-GCM-SHA384
ECDHE-ECDSA-AES128-GCM-SHA256
ECDHE-RSA-AES128-GCM-SHA256
ECDHE-ECDSA-WITH-CHACHA20-POLY1305
ECDHE-RSA-WITH-CHACHA20-POLY1305
ECDHE-RSA-AES256-CBC-SHA
ECDHE-RSA-AES128-CBC-SHA
ECDHE-ECDSA-AES256-CBC-SHA
ECDHE-ECDSA-AES128-CBC-SHA
RSA-AES256-CBC-SHA
RSA-AES128-CBC-SHA
ECDHE-RSA-3DES-EDE-CBC-SHA
RSA-3DES-EDE-CBC-SHA
ECDHE-RSA-SM4-SM3
ECDHE-ECDSA-SM4-SM3
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ecdh_curves&lt;/code&gt;，如果配置了该配置，那么 TLS 连接将只支持配置了的曲线。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;支持 x25519、p256、p384、p521。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;min_version&lt;/code&gt;，最低的 TLS 协议版本，默认是 TLS1.0。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;支持 TLS1.0、TLS1.1、TLS1.2。&lt;/li&gt;
&lt;li&gt;默认会自动识别可用的 TLS 协议版本。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;max_version&lt;/code&gt;，最高的 TLS 协议版本，默认是 TLS1.2。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;支持 TLS1.0、TLS1.1、TLS1.2。&lt;/li&gt;
&lt;li&gt;默认会自动识别可用的 TLS 协议版本。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;alpn&lt;/code&gt;，TLS 的 ALPN 配置。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;支持 h2、http/1.1、 sofa。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;fall_back&lt;/code&gt;，bool类型，当配置为 true 时，如果证书解析失败，不会报错而是相当于没有开启 TLS。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;extend_verify&lt;/code&gt;，任意 json 类型，当 type 为非空时，作为扩展的配置参数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sds_source&lt;/code&gt;，访问 SDS API 的配置，如果配置了这个配置，&lt;code&gt;ca_cert&lt;/code&gt;、&lt;code&gt;cert_chain&lt;/code&gt; 和 &lt;code&gt;private_key&lt;/code&gt; 都会被忽略，但是其余的配置依然有效。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;sds_source&#34;&gt;sds_source&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;CertificateConfig&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:{},&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;ValidationConfig&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:{}&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CertificateConfig&lt;/code&gt; 描述了如何获取 cert_chain 和 private_key 的配置。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ValidationConfig&lt;/code&gt; 描述了如何获取 &lt;code&gt;ca_cert&lt;/code&gt; 的配置。&lt;/li&gt;
&lt;li&gt;详细的 Config 内容参考 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/api-v2/api/v2/auth/cert.proto#envoy-api-msg-auth-sdssecretconfig&#34;&gt;envoy: sdssecretconfig&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: TLS 安全链路</title>
      <link>https://brpc.incubator.apache.org/docs/concept/tls/</link>
      <pubDate>Mon, 20 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://brpc.incubator.apache.org/docs/concept/tls/</guid>
      <description>
        
        
        &lt;p&gt;本文将向您展示 MOSN 的 TLS 安全能力。&lt;/p&gt;
&lt;h2 id=&#34;证书方案&#34;&gt;证书方案&lt;/h2&gt;
&lt;p&gt;MOSN 支持通过 Istio Citadel 的证书签发方案，基于 Istio 社区的 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/configuration/security/secret&#34;&gt;SDS （Secret Discovery Service）&lt;/a&gt;方案为 Sidecar 配置证书，支持证书动态发现和热更新能力。为了支持更高级的安全能力，MOSN 没有使用 Citadel 的证书自签发能力，而是通过对接内部 KMS 系统获取证书。同时提供证书缓存和证书推送更新能力。&lt;/p&gt;
&lt;p&gt;我们先来看看 MOSN 证书方案的架构图，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;mosn-certificate-arch.png&#34; alt=&#34;MOSN 证书方案&#34;&gt;&lt;/p&gt;
&lt;p&gt;各组件职能如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pilot：负责 Policy、SDS 配置下发，为简化复杂度，图中未标出&lt;/li&gt;
&lt;li&gt;Citadel：Citadel 作为 Certificate Provider ，同时作为 MCP Server 为 Citadel Agent 提供 Pod、CR等资源&lt;/li&gt;
&lt;li&gt;Citadel Agent：提供 SDS Server 服务，为MOSN、DB Sidecar、Security Sidecar 提供Certificate和CR下发能力&lt;/li&gt;
&lt;li&gt;KMS：密钥管理系统负责证书签发&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;证书获取流程&#34;&gt;证书获取流程&lt;/h3&gt;
&lt;p&gt;对整体架构有个大致理解后，我们分解下 Sidecar 获取证书的流程，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;certificate-request-process.png&#34; alt=&#34;证书获取流程&#34;&gt;&lt;/p&gt;
&lt;p&gt;补充说明下图中的每一步环节：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Citadel 与 Citadel agent（nodeagent）组件通过MCP协议（Mesh Configuration Protocol）同步Pod 和 CR 信息，避免 citadel agent 直接请求 API Server 导致 API Server 负载过高&lt;/li&gt;
&lt;li&gt;MOSN 通过Unix Domain Socket 方式向 Citadel Agent 发起 SDS 请求&lt;/li&gt;
&lt;li&gt;Citadel Agent 会进行防篡改校验，并提取appkey&lt;/li&gt;
&lt;li&gt;Citadel Agent 携带 appkey 请求 Citadel 签发证书&lt;/li&gt;
&lt;li&gt;Citadel 检查证书是否已缓存，如果缓存证书未过期，Citadel 将直接响应缓存证书&lt;/li&gt;
&lt;li&gt;证书不在缓存中，Citadel 会基于 appkey 构造证书签发请求，向 KMS 申请签发证书&lt;/li&gt;
&lt;li&gt;KMS 会将签发的证书响应回Citadel，另外 KMS 也支持证书过期轮换通知&lt;/li&gt;
&lt;li&gt;Citadel 收到证书后，会将证书传递给到对应的 Citadel Agent&lt;/li&gt;
&lt;li&gt;Citadel Agent 收到证书后，会在内存中缓存证书，并将证书下发给到 MOSN&lt;/li&gt;
&lt;/ol&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 工程示例</title>
      <link>https://brpc.incubator.apache.org/docs/samples/</link>
      <pubDate>Mon, 20 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://brpc.incubator.apache.org/docs/samples/</guid>
      <description>
        
        
        &lt;p&gt;本文档中提供了 MOSN 的示例工程。&lt;/p&gt;
&lt;h2 id=&#34;使用-mosn-作为-http-代理&#34;&gt;使用 MOSN 作为 HTTP 代理&lt;/h2&gt;
&lt;p&gt;请参考 MOSN 转发 HTTP 的示例工程 &lt;a href=&#34;https://github.com/mosn/mosn/blob/master/examples/cn_readme/http-sample/README.md&#34;&gt;http-sample&lt;/a&gt; 。&lt;/p&gt;
&lt;h2 id=&#34;使用-mosn-作为-sofarpc-代理&#34;&gt;使用 MOSN 作为 SOFARPC 代理&lt;/h2&gt;
&lt;p&gt;请参考 MOSN 转发 SOFARPC 的示例工程 &lt;a href=&#34;https://github.com/mosn/mosn/blob/master/examples/cn_readme/sofarpc-with-xprotocol-sample/README.md&#34;&gt;sofarpc-with-xprotocol-sample&lt;/a&gt; 。&lt;/p&gt;
&lt;h2 id=&#34;使用-mosn-作为tcp-代理&#34;&gt;使用 MOSN 作为TCP 代理&lt;/h2&gt;
&lt;p&gt;请参考 MOSN 作为 TCP Proxy 的示例工程 &lt;a href=&#34;https://github.com/mosn/mosn/blob/master/examples/cn_readme/tcpproxy-sample/README.md&#34;&gt;tcpproxy-sample&lt;/a&gt; 。&lt;/p&gt;
&lt;h2 id=&#34;使用-skywalking-作为-trace-实现&#34;&gt;使用 SkyWalking 作为 Trace 实现&lt;/h2&gt;
&lt;p&gt;请参考 SkyWalking 作为 Trace 实现的示例工程 &lt;a href=&#34;https://github.com/mosn/mosn/tree/master/examples/cn_readme/trace/skywalking/http&#34;&gt;skywalking-sample&lt;/a&gt; 。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: MOSN 平滑升级原理解析</title>
      <link>https://brpc.incubator.apache.org/docs/concept/smooth-upgrade/</link>
      <pubDate>Mon, 20 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://brpc.incubator.apache.org/docs/concept/smooth-upgrade/</guid>
      <description>
        
        
        &lt;p&gt;Service Mesh 中 Sidecar 运维一直是一个比较棘手的问题，数据平面的 Sidecar 升级是常有的事情，如何在升级 Sidecar（MOSN）的时候而不影响业务，对于存量的长连接如何迁移，本文将为你介绍 MOSN 的解决之道。&lt;/p&gt;
&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;本文介绍 MOSN 支持平滑升级的原因和解决方案，对于平滑升级的一些基础概念，大家可以通过 &lt;a href=&#34;https://ms2008.github.io/2019/12/28/hot-upgrade/&#34;&gt;Nginx vs Enovy vs Mosn 平滑升级原理解析&lt;/a&gt;了解。&lt;/p&gt;
&lt;p&gt;先简单介绍一下为什么 Nginx 和 Envoy 不需要具备 MOSN 这样的连接无损迁移方案，主要还是跟业务场景相关，Nginx 和 Envoy 主要支持的是 HTTP1 和 HTTP2 协议，HTTP1使用 connection: Close，HTTP2 使用 Goaway Frame 都可以让 Client 端主动断链接，然后新建链接到新的 New process，但是针对 Dubbo、SOFA PRC 等常见的多路复用协议，它们是没有控制帧，Old process 的链接如果断了就会影响请求的。&lt;/p&gt;
&lt;p&gt;一般的升级做法就是切走应用的流量，比如自己UnPub掉服务，等待一段时间没有请求之后，升级MOSN，升级好之后再Pub服务，整个过程比较耗时，并且会有一段时间是不提供服务的，还要考虑应用的水位，在大规模场景下，就很难兼顾评估。MOSN 为了满足自身业务场景，开发了长连接迁移方案，把这条链接迁移到 New process 上，整个过程对 Client 透明，不需要重新建链接，达到请求无损的平滑升级。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;reqeust-smooth-upgrade-process.png&#34; alt=&#34;MOSN 的请求无损的平滑升级过程&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;正常流程&#34;&gt;正常流程&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;normal-process.png&#34; alt=&#34;正常流程&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Client 发送请求 Request 到 MOSN&lt;/li&gt;
&lt;li&gt;MOSN 转发请求 Request 到 Server&lt;/li&gt;
&lt;li&gt;Server 回复响应 Response 到 MOSN&lt;/li&gt;
&lt;li&gt;MOSN 回复响应 Response 到 Client&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;上图简单介绍了一个请求的正常流程，我们后面需要迁移的是 TCP1 链接，也就是 Client 到 MOSN 的连接，MOSN 到 Server 的链接 TCP2 不需要迁移，因为 MOSN 访问 Server 是根据 LoadBalance 选择，我们可以主动控制断链建链。&lt;/p&gt;
&lt;h2 id=&#34;平滑升级流程&#34;&gt;平滑升级流程&lt;/h2&gt;
&lt;h3 id=&#34;触发条件&#34;&gt;触发条件&lt;/h3&gt;
&lt;p&gt;有两个方式可以触发平滑升级流程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;MOSN 对 SIGHUP 做了监听，发送 SIGHUP 信号给 MOSN 进程，通过 ForkExec 生成一个新的 MOSN 进程。&lt;/li&gt;
&lt;li&gt;直接重新启动一个新 MOSN 进程。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;为什么提供两种方式？最开始我们支持的是方法1，也就是 nginx 和 Envoy 使用的方式，这个在虚拟机或者容器内替换 MOSN 二级制来升级是可行的，但是我们的场景需要满足容器间的升级，所以需要新拉起一个容器，就需要重新启动一个新的 MOSN 进程来做平滑升级，所以后续又支持了方法2。容器间升级还需要 operator 的支持，本文不展开叙述。&lt;/p&gt;
&lt;h3 id=&#34;交互流程&#34;&gt;交互流程&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;interaction-process.png&#34; alt=&#34;交互流程&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;interaction-process-timeline.png&#34; alt=&#34;交互流程时序图&#34;&gt;&lt;/p&gt;
&lt;p&gt;首先，老的 MOSN 在启动最后阶段会启动一个协程运行 &lt;code&gt;ReconfigureHandler()&lt;/code&gt; 函数监听一个 Domain Socket（&lt;code&gt;reconfig.sock&lt;/code&gt;）, 该接口的作用是让新的 MOSN 来感知是否存在老的 MOSN。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ReconfigureHandler&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;l&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;net&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Listen&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;unix&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;types&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ReconfigureDomainSocket&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;

    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#000&#34;&gt;uc&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ul&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;AcceptUnix&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
        &lt;span style=&#34;color:#000&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;uc&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Write&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;([]&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;})&lt;/span&gt;
        &lt;span style=&#34;color:#000&#34;&gt;reconfigure&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;触发平滑升级流程的两种方式最终都是启动一个新的 MOSN 进程，然后调用&lt;code&gt;GetInheritListeners()&lt;/code&gt;，通过 &lt;code&gt;isReconfigure()&lt;/code&gt; 函数来判断本机是否存在一个老的 MOSN（就是判断是否存在 &lt;code&gt;reconfig.sock&lt;/code&gt; 监听），如果存在一个老的 MOSN，就进入迁移流程，反之就是正常的启动流程。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 保留了核心流程
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;GetInheritListeners&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;([]&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;net&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Listener&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;net&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Conn&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;error&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;isReconfigure&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;nil&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;nil&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;nil&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#000&#34;&gt;l&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;net&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Listen&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;unix&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;types&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;TransferListenDomainSocket&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;uc&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ul&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;AcceptUnix&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;oobn&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;uc&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ReadMsgUnix&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;buf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;oob&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;file&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;os&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;NewFile&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;fd&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;fileListener&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;net&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;FileListener&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;file&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;listeners&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;uc&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;nil&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果进入迁移流程，新的 MOSN 将监听一个新的 Domain Socket（&lt;code&gt;listen.sock&lt;/code&gt;），用于老的 MOSN 传递 listen FD 到新的 MOSN。FD 的传递使用了sendMsg 和 recvMsg。在收到 listen FD 之后，调用 &lt;code&gt;net.FileListener()&lt;/code&gt; 函数生产一个 Listener。此时，新老 MOSN 都同时拥有了相同的 Listen 套接字。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// FileListener returns a copy of the network listener corresponding
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// to the open file f.
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// It is the caller&amp;#39;s responsibility to close ln when finished.
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// Closing ln does not affect f, and closing f does not affect ln.
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;FileListener&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;f&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;os&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ln&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Listener&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;error&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;ln&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;fileListener&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;OpError&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Op&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;file&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Net&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;file+net&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Source&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;nil&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Addr&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;fileAddr&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()),&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Err&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里的迁移和 Nginx 还是有一些区别，Nginx 是 fork 的方式，子进程自动就继承了 listen FD，MOSN 是新启动的进程，不存在父子关系，所以需要通过 sendMsg 的方式来传递。&lt;/p&gt;
&lt;p&gt;在进入迁移流程和 Listen 的迁移过程中，一共使用了两个 Domain Socket：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;reconfig.sock&lt;/code&gt; 是 Old MOSN 监听，用于 New MOSN 来判断是否存在&lt;/li&gt;
&lt;li&gt;&lt;code&gt;listen.sock&lt;/code&gt; 是 New MOSN 监听，用于 Old MOSN 传递 listen FD&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;两个 sock 其实是可以复用的，也可以用 &lt;code&gt;reconfig.sock&lt;/code&gt; 进行 listen 的传递，由于一些历史原因搞了两个，后续可以优化为一个，让代码更精简易读。&lt;/p&gt;
&lt;p&gt;这儿再看看 Old MOSN 的处理，在收到 New MOSN 的通知之后，将进入&lt;code&gt;reconfigure(false)&lt;/code&gt; 流程，首先就是调用 &lt;code&gt;sendInheritListeners()&lt;/code&gt; 传递 listen FD，原因上面内容已经描述，最后调用 &lt;code&gt;WaitConnectionsDone()&lt;/code&gt; 进入存量长链接的迁移流程。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 保留了核心流程
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;reconfigure&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;start&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;start&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#000&#34;&gt;startNewMosn&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// transfer listen fd
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;notify&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;sendInheritListeners&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;();&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// Wait for all connections to be finished
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#000&#34;&gt;WaitConnectionsDone&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;GracefulTimeout&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;

    &lt;span style=&#34;color:#000&#34;&gt;os&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Exit&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在 Listen FD 迁移之后，New MOSN 通过配置启动，然后在最后启动一个协程运行&lt;code&gt;TransferServer()&lt;/code&gt;，将监听一个新的 &lt;code&gt;DomainSocket（conn.sock）&lt;/code&gt;，用于后续接收 Old MOSN 的长连接迁移。迁移的函数是 &lt;code&gt;transferHandler()&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;TransferServer&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;handler&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;types&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ConnectionHandler&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;l&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;net&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Listen&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;unix&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;types&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;TransferConnDomainSocket&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;

    &lt;span style=&#34;color:#000&#34;&gt;utils&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;GoWithRecover&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#000&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;l&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Accept&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
            &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;transferHandler&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;handler&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;transferMap&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;

        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;},&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;nil&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Old MOSN 将通过 &lt;code&gt;transferRead()&lt;/code&gt; 和 &lt;code&gt;transferWrite()&lt;/code&gt; 进入最后的长链接迁移流程，下面主要分析这块内容。&lt;/p&gt;
&lt;h3 id=&#34;长连接迁移流程&#34;&gt;长连接迁移流程&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;long-connection-migrating-process.png&#34; alt=&#34;长连接迁移过程&#34;&gt;&lt;/p&gt;
&lt;p&gt;首先先粗略看一下新请求的迁移流程。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Client 发送请求到 MOSN&lt;/li&gt;
&lt;li&gt;MOSN 通过 domain  socket(conn.sock) 把 TCP1 的 FD 和连接的状态数据发送给 New MOSN&lt;/li&gt;
&lt;li&gt;New  MOSN 接受 FD 和请求数据创建新的 Conection 结构，然后把 Connection id 传给 MOSN，New MOSN 此时就拥有了 TCP1 的一个拷贝。&lt;/li&gt;
&lt;li&gt;New  MOSN 通过 LB 选取一个新的 Server，建立 TCP3 连接，转发请求到 Server&lt;/li&gt;
&lt;li&gt;Server 回复响应到 New MOSN&lt;/li&gt;
&lt;li&gt;New MOSN 通过 MOSN 传递来的 TCP1 的拷贝，回复响应到 Client&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;之前的 &lt;code&gt;WaitConnectionsDone()&lt;/code&gt; 函数中，&lt;code&gt;s.stopChan&lt;/code&gt; 已经关闭，在链接的 ReadLoop 中，将设置一个 &lt;code&gt;[TransferTimeout, 2 * TransferTimeout]&lt;/code&gt; 的随机时间进入迁移流程，随机数主要是为了打散每个 Client 的 TCP 连接迁移时机，让迁移更平滑。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;connection&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;startReadLoop&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;transferTime&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Time&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;select&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;stopChan&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;
            &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;transferTime&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;IsZero&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;transferCallbacks&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;transferCallbacks&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
                    &lt;span style=&#34;color:#000&#34;&gt;randTime&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Duration&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;rand&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Intn&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;TransferTimeout&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Nanoseconds&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;())))&lt;/span&gt;
                    &lt;span style=&#34;color:#000&#34;&gt;transferTime&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Now&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Add&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;TransferTimeout&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Add&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;randTime&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
                    &lt;span style=&#34;color:#000&#34;&gt;log&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;DefaultLogger&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Infof&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;[network] [read loop] transferTime: Wait %d Second&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;TransferTimeout&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;randTime&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1e9&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
                &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
                    &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// set a long time, not transfer connection, wait mosn exit.
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;                    &lt;span style=&#34;color:#000&#34;&gt;transferTime&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Now&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Add&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;TransferTimeout&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
                    &lt;span style=&#34;color:#000&#34;&gt;log&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;DefaultLogger&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Infof&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;[network] [read loop] not support transfer connection, Connection = %d, Local Address = %+v, Remote Address = %+v&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
                        &lt;span style=&#34;color:#000&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;rawConnection&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;LocalAddr&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(),&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;RemoteAddr&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;())&lt;/span&gt;
                &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
            &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;transferTime&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Before&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Now&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
                    &lt;span style=&#34;color:#000&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;transfer&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
                    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt;
                &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
            &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在等待一个随机时间之后，&lt;code&gt;c.tranfer()&lt;/code&gt; 将进入迁移流程，&lt;code&gt;c.notifyTransfer()&lt;/code&gt; 的作用是暂停 write 操作，在迁移 read 操作的时候，不能有 write 操作，因为两个进程 MOSN 同时都做 write，会导致数据错乱。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;connection&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;transfer&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;notifyTransfer&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;transferRead&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;transferWrite&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后进入的是 &lt;code&gt;transferRead()&lt;/code&gt;，这个函数的作用就是把连接的 FD 和状态数据通过 &lt;code&gt;conn.sock&lt;/code&gt;传递给 New MOSN，跟之前迁移 Listen FD 时方式一样，NEW MOSN 在成功处理之后会返回一个 ID，这个 ID 是 NEW MOSN 新建立的 Connection ID，这个 ID 后面会用到。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// old mosn transfer readloop
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;transferRead&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;connection&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;uint64&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;error&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;unixConn&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;net&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Dial&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;unix&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;types&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;TransferConnDomainSocket&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;

    &lt;span style=&#34;color:#000&#34;&gt;file&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;tlsConn&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;transferGetFile&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;

    &lt;span style=&#34;color:#000&#34;&gt;uc&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;unixConn&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.(&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;net&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;UnixConn&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
    
    &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// send type and TCP FD
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;transferSendType&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;uc&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;file&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
    
    &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// send header + buffer + TLS
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;transferReadSendData&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;uc&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;tlsConn&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;readBuffer&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;log&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;DefaultLogger&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
    
    &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// recv ID
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#000&#34;&gt;id&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;transferRecvID&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;uc&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;nil&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们构造了一个简单的读迁移协议, 主要包括了 TCP 原始数据长度，TLS 数据长度，TCP 原始数据，TLS 数据。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;/**&lt;/span&gt;
 &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;  &lt;span style=&#34;color:#000&#34;&gt;transfer&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;read&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;protocol&lt;/span&gt;
 &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;  &lt;span style=&#34;color:#000&#34;&gt;header&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;bytes&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;readBuffer&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;TLS&lt;/span&gt;
 &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;
 &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;                       &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;4&lt;/span&gt;                       &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;8&lt;/span&gt;
 &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+-----+-----+-----+-----+-----+-----+-----+-----+&lt;/span&gt;
 &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#000&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;length&lt;/span&gt;      &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt;     &lt;span style=&#34;color:#000&#34;&gt;TLS&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;length&lt;/span&gt;        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt;
 &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+-----+-----+-----+-----+-----+-----+-----+-----+&lt;/span&gt;
 &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt;                     &lt;span style=&#34;color:#000&#34;&gt;data&lt;/span&gt;                      &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt;
 &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+-----+-----+-----+-----+-----+-----+-----+-----+&lt;/span&gt;
 &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt;                     &lt;span style=&#34;color:#000&#34;&gt;TLS&lt;/span&gt;                       &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt;
 &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+-----+-----+-----+-----+-----+-----+-----+-----+&lt;/span&gt;
 &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在看下 New MOSN 收到迁移请求之后的处理，它会针对每个迁移请求会启动一个协程运行 &lt;code&gt;transferHandler()&lt;/code&gt; 函数, 函数会根据读取的协议判断是读迁移还是写迁移，我们这儿先介绍读迁移，New MOSN 会调用 transferNewConn 把 Old MOSN 传递过来的 FD 和数据包重新生成一个新的 Connection 结构体，并把生成的新的 connection ID 传递给 Old MOSN。&lt;/p&gt;
&lt;p&gt;此后，New MOSN 将从该 TCP 连接读取数据，开始正常的业务请求流程。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;transferHandler&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;net&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Conn&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;handler&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;types&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ConnectionHandler&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;transferMap&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;sync&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Map&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// recv type
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#000&#34;&gt;conn&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;transferRecvType&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;uc&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#000&#34;&gt;log&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;DefaultLogger&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Errorf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;[network] [transfer] [handler] transferRecvType error :%v&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;conn&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// transfer read
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// recv header + buffer
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#000&#34;&gt;dataBuf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;tlsBuf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;transferReadRecvData&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;uc&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#000&#34;&gt;log&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;DefaultLogger&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Errorf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;[network] [transfer] [handler] transferRecvData error :%v&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
            &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt;
        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#000&#34;&gt;connection&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;transferNewConn&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;conn&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;dataBuf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;tlsBuf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;handler&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;transferMap&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;connection&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#000&#34;&gt;transferSendID&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;uc&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;connection&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#000&#34;&gt;transferSendID&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;uc&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;transferErr&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// transfer write
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// recv header + buffer
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#000&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;buf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;transferWriteRecvData&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;uc&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#000&#34;&gt;log&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;DefaultLogger&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Errorf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;[network] [transfer] [handler] transferRecvData error :%v&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#000&#34;&gt;connection&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;transferFindConnection&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;transferMap&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;uint64&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;))&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;connection&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#000&#34;&gt;log&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;DefaultLogger&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Errorf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;[network] [transfer] [handler] transferFindConnection failed, id = %d&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
            &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt;
        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;transferWriteBuffer&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;connection&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;buf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#000&#34;&gt;log&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;DefaultLogger&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Errorf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;[network] [transfer] [handler] transferWriteBuffer error :%v&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
            &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt;
        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此后，Old MOSN 不再读取该 TCP1 连接上的数据，全部由 New MOSN 来读取 TCP1 上的数据并处理，对于新的请求，整个迁移过程就已经完成。&lt;/p&gt;
&lt;h3 id=&#34;残留响应迁移流程&#34;&gt;残留响应迁移流程&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;remaining-responses-migrating-process.png&#34; alt=&#34;残留响应迁移过程&#34;&gt;&lt;/p&gt;
&lt;p&gt;大家想想为什么还有残留响应的迁移流程？因为多路复用协议，在之前读连接迁移流程的时候，TCP2 上还有之前残留的响应需要回复给Client，如果同时 MOSN 和 New MOSN 都进行 Write 操作 TCP1，数据可能会乱序，所以需要让New MOSN来统一处理之前 TCP2 上残留的响应。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Server 回复残留的响应到 MOSN&lt;/li&gt;
&lt;li&gt;MOSN 把之前从 New MOSN 获取的 Connection id 和响应数据，通过 domain socket(conn.sock) 传递给 New MOSN&lt;/li&gt;
&lt;li&gt;New MOSN 通过 id 查询 TCP1 连接，回复响应到 Client&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在 &lt;code&gt;transferRead()&lt;/code&gt; 之后，就进入了 &lt;code&gt;transferWrite()&lt;/code&gt; 阶段，该阶段会把需要 write 的数据包和之前 New MOSN 传回来的 Connection ID 一并传给 New MOSN。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// old mosn transfer writeloop
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;transferWrite&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;connection&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;id&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;uint64&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;error&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color:#000&#34;&gt;unixConn&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;net&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Dial&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;unix&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;types&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;TransferConnDomainSocket&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;

    &lt;span style=&#34;color:#000&#34;&gt;uc&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;unixConn&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.(&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;net&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;UnixConn&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;transferSendType&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;uc&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;nil&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;

    &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// build net.Buffers to IoBuffer
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#000&#34;&gt;buf&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;transferBuildIoBuffer&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// send header + buffer
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;transferWriteSendData&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;uc&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;buf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#000&#34;&gt;log&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;DefaultLogger&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Errorf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;[network] [transfer] [write] transferWrite failed: %v&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;nil&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们构造了一个简单的写迁移协议, 主要包括了TCP原始数据长度, connection ID，TCP原始数据。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt; *  transfer write protocol
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt; *  header (8 bytes) + (writeBuffer data)
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt; *
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt; * 0                       4                       8
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt; * +-----+-----+-----+-----+-----+-----+-----+-----+
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt; * |      data length      |    connection  ID     |
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt; * +-----+-----+-----+-----+-----+-----+-----+-----+
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt; * |                     data                      |
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt; * +-----+-----+-----+-----+-----+-----+-----+-----+
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt; *
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;**/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在New MOSN的transferHandler()函数中，会判断出写迁移协议，然后 &lt;code&gt;transferFindConnection()&lt;/code&gt; 函数通过 connection ID 找到 TCP1 连接，然后直接把数据写入即可。&lt;/p&gt;
&lt;p&gt;这儿需要说明一点，新请求Request的转发已经使用了 TCP3，TCP2 上只会有之前请求的 Response 响应，如果在整个迁移期间 2 * TransferTimeout 都没有回复响应，那么这个请求将会超时失败。&lt;/p&gt;
&lt;h3 id=&#34;连接状态数据&#34;&gt;连接状态数据&lt;/h3&gt;
&lt;p&gt;在连接迁移时，除了TCP FD的迁移，还有连接状态的迁移，这样New MOSN才知道怎样去初始化这个新的连接。&lt;/p&gt;
&lt;p&gt;主要有如下几个状态：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;读缓存&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;表示在迁移时，已经从 TCP 读取的数据，还没有被应用层处理的数据。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;写数据&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在迁移之后，MOSN 收到的响应数据。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TLS状态迁移&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果是 TLS 加密请求，需要迁移 TLS 的状态，有如下状态需要迁移：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;加密秘钥&lt;/li&gt;
&lt;li&gt;Seq序列&lt;/li&gt;
&lt;li&gt;读缓存数据（加密和未加密）&lt;/li&gt;
&lt;li&gt;cipher类型&lt;/li&gt;
&lt;li&gt;TLS版本&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;TransferTLSInfo&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;Vers&lt;/span&gt;         &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;uint16&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;CipherSuite&lt;/span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;uint16&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;MasterSecret&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[]&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;byte&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;ClientRandom&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[]&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;byte&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;ServerRandom&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[]&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;byte&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;InSeq&lt;/span&gt;        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;byte&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;OutSeq&lt;/span&gt;       &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;byte&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;RawInput&lt;/span&gt;     &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[]&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;byte&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;Input&lt;/span&gt;        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[]&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;byte&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;长连接的 FD 迁移是比较常规的操作，sendMsg 和 connection repair 都可以。&lt;/p&gt;
&lt;p&gt;在整个过程中最麻烦的是应用层数据的迁移，一般想法就是把应用层的数据结构等都迁移到新的进程，比如已经读取的协议 HEAD 等结构体，但这就导致你的迁移过程会很复杂，每个协议都需要单独处理。&lt;/p&gt;
&lt;p&gt;MOSN 的方案是把迁移放到了 IO 层，不关心应用层具体是什么协议，我们迁移最原始的 TCP 数据包，然后让 New MOSN 来 codec 这个数据包来拼装 HEAD 等结构体，这个过程是标准的处理流程了，这样就保证迁移对整个协议解析是透明的，只要这个协议是无状态的，这个迁移框架就可以自动支持。&lt;/p&gt;
&lt;p&gt;最后的残留响应迁移流程可能不太好理解，为什么不等所有响应完成之后才开始迁移，就不需要这个流程了？是因为在多路复用协议场景下，请求一直在发送，你不能总是找到一个时间点所有响应都完成了。&lt;/p&gt;
&lt;h2 id=&#34;反馈&#34;&gt;反馈&lt;/h2&gt;
&lt;p&gt;关于该问题的讨论请见 Github Issue：&lt;a href=&#34;https://github.com/mosn/mosn/issues/866&#34;&gt;MOSN smooth upgrade problem #866&lt;/a&gt;。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: MOSN 多协议机制解析</title>
      <link>https://brpc.incubator.apache.org/docs/concept/multi-protocol/</link>
      <pubDate>Wed, 01 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://brpc.incubator.apache.org/docs/concept/multi-protocol/</guid>
      <description>
        
        
        &lt;p&gt;我们将按以下顺序进行介绍：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多协议机制产生的背景与实践痛点；&lt;/li&gt;
&lt;li&gt;常见的协议扩展思路初探；&lt;/li&gt;
&lt;li&gt;SOFABolt 协议接入实践；&lt;/li&gt;
&lt;li&gt;MOSN 多协议机制设计解读；&lt;/li&gt;
&lt;li&gt;后续规划及展望；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中第三点「接入实践」是今天分享的重点，希望能给大家就「如何在 MOSN 中快速扩展私有协议接入」有一个具体的感受。另外「MOSN 如何实现多协议框架」也是很多人关心和问题，我们将摘选几个技术功能，对其背后的设计思考进行解读。&lt;/p&gt;
&lt;h2 id=&#34;多协议机制产生的背景与实践痛点&#34;&gt;多协议机制产生的背景与实践痛点&lt;/h2&gt;
&lt;p&gt;首先介绍一下多协议机制产生的背景。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;1585209248463-b8b38ab0-09ed-4225-8d60-5bad3c2a372b.png&#34; alt=&#34;多协议机制&#34;&gt;&lt;/p&gt;
&lt;p&gt;前面提到，蚂蚁集团 2019 年双十一核心链路百分之百 Mesh 化，是业界当时已知的最大规模的 Service Mesh 落地，为什么我们敢这么做？因为我们具备能够让架构平滑迁移的方案。&amp;ldquo;兼容性&amp;quot;是任何架构演进升级都必然要面对的一个问题，这在早已实践微服务化架构的蚂蚁集团内部同样如此。为了实现架构的平滑迁移，需要让新老节点的外在行为尽可能的表现一致，从而让依赖方无感知，这其中很重要的一点就是保持协议兼容性。&lt;/p&gt;
&lt;p&gt;因此，我们需要在 Service Mesh 架构下，兼容现有微服务体系中的通信协议——也就是说需要在 MOSN 内实现对目前蚂蚁集团内部通信协议的扩展支持。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;1585209248513-3bf90371-3d7c-4a0f-a98a-db4538bb2271.png&#34; alt=&#34;协议扩展支持&#34;&gt;&lt;/p&gt;
&lt;p&gt;基于 MOSN 本身的扩展机制，我们完成了最初版本的协议扩展接入。但是在实践过程中，我们发现这并不是一件容易的事情：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;相比编解码，协议自身的处理以及与框架集成才是其中最困难的环节，需要理解并实现包括请求生命周期、多路复用处理、链接池等等机制；&lt;/li&gt;
&lt;li&gt;社区主流的 xDS 路由配置是面向 HTTP 协议的，无法直接支持私有协议，存在适配成本；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基于这些实践痛点，我们设计了 MOSN 多协议框架，希望可以降低私有协议的接入成本，加快普及 ServiceMesh 架构的落地推进。&lt;/p&gt;
&lt;h2 id=&#34;常见的协议扩展思路初探&#34;&gt;常见的协议扩展思路初探&lt;/h2&gt;
&lt;p&gt;前面介绍了背景，那么具体协议扩展框架要怎么设计呢？我们先来看一下业界的思路与做法。&lt;/p&gt;
&lt;h3 id=&#34;协议扩展框架---envoy&#34;&gt;协议扩展框架 - Envoy&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;1585209248576-01797bba-8a94-4960-be17-1c87c725a75a.png&#34; alt=&#34;Envoy 的协议扩展&#34;&gt;&lt;/p&gt;
&lt;p&gt;注：图片来自 Envoy 分享资料&lt;/p&gt;
&lt;p&gt;第一个要介绍的是目前发展势头强劲的 Envoy。从图上可以看出，Envoy 支持四层的读写过滤器扩展、基于 HTTP 的七层读写过滤器扩展以及对应的 Router/Upstream 实现。如果想要基于 Envoy 的扩展框架实现 L7 协议接入，目前的普遍做法是基于 L4 filter 封装相应的 L7 codec，在此基础之上再实现对应的协议路由等能力，无法复用 HTTP L7 的扩展框架。&lt;/p&gt;
&lt;h3 id=&#34;协议扩展框架---nginx&#34;&gt;协议扩展框架 - Nginx&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;1585209248600-c47725ed-7d47-4c07-ad1b-f2e2ba4ea2c6.png&#34; alt=&#34;Nginx 的协议扩展&#34;&gt;&lt;/p&gt;
&lt;p&gt;第二个则是老牌的反向代理软件 Nginx，其核心模块是基于 Epoll/Kqueue 等 I/O 多路复用技术之上的离散事件框架，基于事件框架之上构建了 Mail、Http 等协议模块。与 Envoy 类似，如果要基于 Nginx 扩展私有协议，那么也需要自行对接事件框架，并完整实现包括编解码、协议处理等能力。&lt;/p&gt;
&lt;h3 id=&#34;协议扩展框架---mosn&#34;&gt;协议扩展框架 - MOSN&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;1585209248645-5d6eac2f-962e-4c3c-92f1-814d18db47cd.png&#34; alt=&#34;MOSN 的协议扩展框架&#34;&gt;&lt;/p&gt;
&lt;p&gt;最后回过头来，我们看一下 MOSN 是怎么做的。实际上，MOSN 的底层机制与 Envoy、Nginx 并没有核心差异，同样支持基于 I/O 多路复用的 L4 读写过滤器扩展，并在此基础之上再封装 L7 的处理。但是与前两者不同的是，MOSN 针对典型的微服务通信场景，抽象出了一套适用于基于多路复用 RPC 协议的扩展框架，屏蔽了 MOSN 内部复杂的协议处理及框架流程，开发者只需要关注协议本身，并实现对应的框架接口能力即可实现快速接入扩展。&lt;/p&gt;
&lt;h3 id=&#34;三种框架成本对比&#34;&gt;三种框架成本对比&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;1585209248614-5807d3b3-fb18-4a15-83ef-e05bb162f222.png&#34; alt=&#34;三种框架成本对比&#34;&gt;&lt;/p&gt;
&lt;p&gt;最后对比一下，典型微服务通信框架协议接入的成本，由于 MOSN 针对此类场景进行了框架层面的封装支持，因此可以节省开发者大量的研发成本。&lt;/p&gt;
&lt;h2 id=&#34;sofabolt-协议接入实践&#34;&gt;SOFABolt 协议接入实践&lt;/h2&gt;
&lt;p&gt;初步了解多协议框架的设计思路之后，让我们以 SOFABolt 协议为例来实际体验一下协议接入的过程。&lt;/p&gt;
&lt;h3 id=&#34;sofabolt-简介&#34;&gt;SOFABolt 简介&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;1585209248663-0e25c95b-d711-4de2-9a42-f71d05b360df.png&#34; alt=&#34;SOFABolt 简介&#34;&gt;&lt;/p&gt;
&lt;p&gt;这里先对 SOFABolt 进行一个简单介绍，SOFABolt 是一个开源的轻量、易用、高性能、易扩展的  RPC 通信框架，广泛应用于蚂蚁集团内部。&lt;/p&gt;
&lt;p&gt;SOFABolt：&lt;a href=&#34;https://github.com/sofastack/sofa-bolt&#34;&gt;https://github.com/sofastack/sofa-bolt&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;基于 MOSN 的多协议框架，实际编写了 7 个代码文件，一共 925 行代码(包括 liscence、comment 在内)就完成了接入。如果对于协议本身较为熟悉，且具备一定的 MOSN/Golang 开发经验，甚至可以在一天内就完成整个协议的扩展，可以说接入成本是非常之低。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;1585209248669-1138c7d3-fc69-446c-99a9-65932aebca99.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Github:
&lt;a href=&#34;https://github.com/mosn/mosn/tree/master/pkg/protocol/xprotocol/bolt&#34;&gt;https://github.com/mosn/mosn/tree/master/pkg/protocol/xprotocol/bolt&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下面让我们进入正题，一步一步了解接入过程。&lt;/p&gt;
&lt;h3 id=&#34;step1确认协议格式&#34;&gt;Step1：确认协议格式&lt;/h3&gt;
&lt;p&gt;第一步，需要确认要接入的协议格式。为什么首先要做这个，因为协议格式是一个协议最基本的部分，有以下两个层面的考虑：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;任何协议特性以及协议功能都能在上面得到一些体现，例如有无 requestId/streamId 就直接关联到协议是否支持连接多路复用；&lt;/li&gt;
&lt;li&gt;协议格式与报文模型直接相关，两者可以构成逻辑上的映射关系；而这个映射关系也就是所谓的编解码逻辑；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;1585209248674-536ba7de-4f23-4797-a3db-cc085ec8a620.png&#34; alt=&#34;确认协议格式&#34;&gt;&lt;/p&gt;
&lt;p&gt;以 SOFABolt 为例，其第一个字节是协议 magic，可以用于校验当前报文是否属于 SOFABolt 协议，并可以用于协议自动识别匹配的场景；第二个字节是 type，用于标识当前报文的传输类型，可以是 Request / RequestOneway / Response 中的一种；第三个字节则是当前报文的业务类型，可以是心跳帧，RPC 请求/响应等类型。后面的字段就不一一介绍了，可以发现， &lt;strong&gt;理解了协议格式本身，其实对于协议的特性支持和模型编解码就理解了一大半，&lt;/strong&gt; 因此第一步协议格式的确认了解是重中之重，是后续一切工作开展的前提。&lt;/p&gt;
&lt;h3 id=&#34;step2确认报文模型&#34;&gt;Step2：确认报文模型&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;1585209248773-66c3234b-f805-4735-9e70-acf8abef294b.png&#34; alt=&#34;确认报文模型&#34;&gt;&lt;/p&gt;
&lt;p&gt;顺应第一步，第二步的主要工作是确认报文编程模型。一般地，在第一步完成之后，应当可以很顺利的构建出相应的报文模型，SOFABolt 例子中可以看出，模型字段设计基本与协议格式中的 header / payload 两部分相对应。有了编程模型之后，就可以继续进行下一步——基于模型实现对应的框架扩展了。&lt;/p&gt;
&lt;h3 id=&#34;step3接口实现---协议&#34;&gt;Step3：接口实现 - 协议&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;1585209248724-28eaa458-a928-4f19-bf16-96895808a5b8.png&#34; alt=&#34;接口实现-协议&#34;&gt;&lt;/p&gt;
&lt;p&gt;协议扩展，顾名思义，是指协议层面的扩展，描述的是协议自身的行为（区别于报文自身）。&lt;/p&gt;
&lt;p&gt;目前多协议框架提供的接口包括以下五个：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Name：协议名称，需要具备唯一性；&lt;/li&gt;
&lt;li&gt;Encoder：编码器，用于实现从报文模型到协议传输字节流的映射转换；&lt;/li&gt;
&lt;li&gt;Decoder：解码器，用于实现从协议传输字节流到报文模型的映射转换；&lt;/li&gt;
&lt;li&gt;Heartbeater：心跳处理，用于实现心跳保活报文的构造，包括探测发起与回复两个场景；&lt;/li&gt;
&lt;li&gt;Hijacker：错误劫持，用于在特定错误场景下错误报文的构造；&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;step4接口实现---报文&#34;&gt;Step4：接口实现 - 报文&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;1585209248793-9cb8efd3-c12e-4da1-91f9-0901bcf36e16.png&#34; alt=&#34;接口实现-报文&#34;&gt;&lt;/p&gt;
&lt;p&gt;前面介绍了协议扩展，接下里则是报文扩展，这里关注的是单个请求报文需要实现的行为。&lt;/p&gt;
&lt;p&gt;目前框架抽象的接口包括以下几个：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Basic：需要提供 GetStreamType、GetHeader、GetBody 几个基础方法，分别对应传输类型、头部信息、载荷信息；&lt;/li&gt;
&lt;li&gt;Multiplexing：多路复用能力，需要实现 GetRequestId 及 SetRequestId；&lt;/li&gt;
&lt;li&gt;HeartbeatPredicate：用于判断当前报文是否为心跳帧；&lt;/li&gt;
&lt;li&gt;GoAwayPredicate：用于判断当前报文是否为优雅退出帧；&lt;/li&gt;
&lt;li&gt;ServiceAware：用于从报文中获取 service、method 等服务信息；&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;举个例子&#34;&gt;举个例子&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;1585209248756-4c3fce60-436b-4153-9372-b39fe80fc975.png&#34; alt=&#34;案例&#34;&gt;&lt;/p&gt;
&lt;p&gt;这里举一个例子，来让大家对&lt;strong&gt;框架如何基于接口封装处理流程&lt;/strong&gt;有一个体感：服务端心跳处理场景。当框架收到一个报文之后：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根据报文扩展中的 GetStreamType 来确定当前报文是请求还是响应。如果是请求则继续 2；&lt;/li&gt;
&lt;li&gt;根据报文扩展中的 HeartbeatPredicate 来判断当前报文是否为心跳包，如果是则继续 3；&lt;/li&gt;
&lt;li&gt;当前报文是心跳探测(request + heartbeat)，需要回复心跳响应，此时根据协议扩展中的 Heartbeater.Reply 方法构造对应的心跳响应报文；&lt;/li&gt;
&lt;li&gt;再根据协议扩展的 Encoder 实现，将心跳响应报文转换为传输字节流；&lt;/li&gt;
&lt;li&gt;最后调用 MOSN 网络层接口，将传输字节流回复给发起心跳探测的客户端；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当协议扩展与报文扩展都实现之后，MOSN 协议扩展接入也就完成了，框架可以依据协议扩展的实现来完成协议的处理，让我们实际演示一下 SOFABolt 接入的 example。&lt;/p&gt;
&lt;p&gt;Demo 地址：&lt;a href=&#34;https://github.com/mosn/mosn/tree/master/examples/codes/sofarpc-with-xprotocol-sample&#34;&gt;https://github.com/mosn/mosn/tree/master/examples/codes/sofarpc-with-xprotocol-sample&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;mosn-多协议机制设计解读&#34;&gt;MOSN 多协议机制设计解读&lt;/h2&gt;
&lt;p&gt;通过 SOFABolt 协议接入的实践过程，大家对如何基于 MOSN 来做协议扩展应该有了一个初步的认知。那么 MOSN 多协议机制究竟封装了哪些逻辑，背后又是如何思考设计的？接下来将会挑选几个典型技术案例为大家进行解读。&lt;/p&gt;
&lt;h3 id=&#34;协议扩展框架&#34;&gt;协议扩展框架&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;协议扩展框架 -  编解码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;1585227625966-1b00d83d-fff1-40f1-b6b1-3bda19db0afb.png&#34; alt=&#34;协议扩展框架-编解码&#34;&gt;&lt;/p&gt;
&lt;p&gt;最先介绍的是编解码机制，这个在前面 SOFABolt 接入实践中已经简单介绍过，MOSN 定义了编码器及解码器接口来屏蔽不同协议的编解码细节。协议接入时只需要实现编解码接口，而不用关心相应的接口调用上下文。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;协议扩展框架 - 多路复用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;1585209248762-c83706cd-b413-468c-80b1-151de9ae8f3c.png&#34; alt=&#34;协议扩展看框架-多路复用&#34;&gt;&lt;/p&gt;
&lt;p&gt;接下来是多路复用机制的解读，这也是流程中相对不太好理解的一部分。首先明确一下链接多路复用的定义：允许在单条链接上，并发处理多个请求/响应。那么支持多路复用有什么好处呢？&lt;/p&gt;
&lt;p&gt;以 HTTP 协议演进为例，HTTP/1 虽然可以维持长连接，但是单条链接同一时间只能处理一个请求/相应，这意味着如果同时收到了 4 个请求，那么需要建立四条 TCP 链接，而建链的成本相对来说比较高昂；HTTP/2 引入了 stream/frame 的概念，支持了分帧多路复用能力，在逻辑上可以区分出成对的请求 stream 和响应 stream，从而可以在单条链接上并发处理多个请求/响应，解决了 HTTP/1 链接数与并发数成正比的问题。&lt;/p&gt;
&lt;p&gt;类似的，典型的微服务框架通信协议，如 Dubbo、SOFABolt 等一般也都实现了链接多路复用能力，因此 MOSN 封装了相应的多路复用处理流程，来简化协议接入的成本。让我们跟随一个请求代理的过程，来进一步了解。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;1585209248791-900751cb-c096-48d4-a5d5-d8247ef9d725.png&#34; alt=&#34;上下游关联映射&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;MOSN 从 downstream(conn=2) 接收了一个请求 request，依据报文扩展多路复用接口 GetRequestId 获取到请求在这条连接上的身份标识(requestId=1)，并记录到关联映射中待用；&lt;/li&gt;
&lt;li&gt;请求经过 MOSN 的路由、负载均衡处理，选择了一个 upstream(conn=5)，同时在这条链接上新建了一个请求流(requestId=30)，并调用文扩展多路复用接口 SetRequestId 封装新的身份标识，并记录到关联映射中与 downstream 信息组合；&lt;/li&gt;
&lt;li&gt;MOSN 从 upstream(conn=5) 接收了一个响应 response，依据报文扩展多路复用接口 GetRequestId 获取到请求在这条连接上的身份标识(requestId=30)。此时可以从上下游关联映射表中，根据 upstream 信息(connId=5, requestId=30) 找到对应的 downstream 信息(connId=2, requestId=1)；&lt;/li&gt;
&lt;li&gt;依据 downstream request 的信息，调用文扩展多路复用接口 SetRequestId 设置响应的 requestId，并回复给 downstream；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在整个过程中，框架流程依赖的报文扩展 Multiplexing 接口提供的能力，实现了上下游请求的多路复用关联处理，除此之外，框架还封装了很多细节的处理，例如上下游复用内存块合并处理等等，此处限于篇幅不再展开，有兴趣的同学可以参考源码进行阅读。&lt;/p&gt;
&lt;h3 id=&#34;统一路由框架&#34;&gt;统一路由框架&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;1585209248786-ff9c157a-5ff9-444b-8b0f-2da90ddb8392.png&#34; alt=&#34;统一路由框架&#34;&gt;&lt;/p&gt;
&lt;p&gt;接下来要分析的是「统一路由框架」的设计，此方案主要解决的是非 HTTP 协议的路由适配问题。我们选取了以下三点进行具体分析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过基于属性匹配(attribute-based)的模式，与具体协议字段解耦；&lt;/li&gt;
&lt;li&gt;引入层级路由的概念，解决属性扁平化后带来的线性匹配性能问题；&lt;/li&gt;
&lt;li&gt;通过变量机制懒加载的特定，按需实现深/浅解包；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;统一路由框架 – 基于属性匹配&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;1585209248809-fe944cba-e8df-4497-8eff-c8d47131c918.png&#34; alt=&#34;统一路由框架-基于属性匹配&#34;&gt;&lt;/p&gt;
&lt;p&gt;首先来看一下典型的 RDS 配置，可以看到其中的 domains、path 等字段，对应的是 HTTP 协议里的域名、路径概念，这就意味着其匹配条件只有 HTTP 协议才有字段能够满足，配置结构设计是与 HTTP 协议强相关的。这就导致了如果我们新增了一个私有协议，无法复用 RDS 的配置来做路由。&lt;/p&gt;
&lt;p&gt;那么如何解决配置模型与协议字段强耦合呢？简单来说就是把匹配字段拆分为扁平属性的键值对(key-value pair)，匹配策略基于键值对来处理，从而解除了匹配模型与协议字段的强耦合，例如可以配置 &lt;code&gt;key: $http_host&lt;/code&gt;，也可以配置 &lt;code&gt;key:$dubbo_service&lt;/code&gt;，这在配置模型层面都是合法的。&lt;/p&gt;
&lt;p&gt;但是这并不是说匹配就有具体协议无关了，这个关联仍然是存在的，只是从强耦合转换为了隐式关联，例如配置 &lt;code&gt;key: $http_host&lt;/code&gt;，从结构来说其与 HTTP 协议并无耦合，但是值变量仍然会通过 HTTP 协议字段来进行求值。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;统一路由框架 -  层级路由&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;1585209248832-20483dc3-e959-4cf4-aecd-cbe5ba37b4fb.png&#34; alt=&#34;统一路由框架 -  层级路由&#34;&gt;&lt;/p&gt;
&lt;p&gt;在引入「基于属性的匹配」之后，我们发现了一个问题，那就是由于属性本身的扁平化，其内在并不包含层级关系。如果没有层级关系，会导致匹配时需要遍历所有可能的情况组合，大量条件的场景下匹配性能近似于线性的 O(n)，这显然是无法接受的。&lt;/p&gt;
&lt;p&gt;举例来说，对于 HTTP 协议，我们总是习惯与以下的匹配步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;匹配 Host(:authority) ；&lt;/li&gt;
&lt;li&gt;匹配 Path ；&lt;/li&gt;
&lt;li&gt;匹配 headers/args/cookies ；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这其实构成了一个层级关系，每一层就像是一个索引，通过层级的索引关系，在大量匹配条件的情况下仍然可以获得一个可接受的耗时成本。但是对于属性(attribute)，多个属性之间并没有天然的层级关系(相比于 host、path 这种字段)，这依赖于属性背后所隐式关联的字段，例如对于 Dubbo 协议，我们希望的顺序可能是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;匹配 &lt;code&gt;$dubbo_service&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;匹配 &lt;code&gt;$dubbo_group&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;匹配 &lt;code&gt;$dubbo_version&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;匹配 &lt;code&gt;$dubbo_attachments_xx&lt;/code&gt;；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此在配置模型上，我们引入了对应的索引层级概念，用于适配不同协议的结构化层级路由，解决扁平属性的线性匹配性能问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;统一路由框架 - 浅解包优化&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;1585209248848-77a91fc3-ab6c-4eb8-a62b-3496668d66c3.png&#34; alt=&#34;统一路由框架 - 浅解包优化&#34;&gt;&lt;/p&gt;
&lt;p&gt;最后，介绍一下浅解包优化的机制。利用 MOSN 变量懒加载的特性，我们可以在报文解析时，先不去解析成本较高的部分，例如 dubbo 协议的 attachments。那么在代理请求的实际过程中，需要使用到 attachments 里的信息时，就会通过变量的 getter 求值逻辑来进行真正的解包操作。依靠此特性，可以大幅优化在不需要深解包的场景下 dubbo 协议代理转发的性能表现，实现按需解包。&lt;/p&gt;
&lt;h3 id=&#34;解读总结&#34;&gt;解读总结&lt;/h3&gt;
&lt;p&gt;最后，对设计部分的几个技术案例简单总结一下，整体的思路仍然是对处理流程进行抽象封装，并剥离可扩展点，从而降低用户的接入成本。&lt;/p&gt;
&lt;p&gt;在协议扩展支持方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;封装编解码流程，抽象编解码能力接口作为协议扩展点&lt;/li&gt;
&lt;li&gt;封装协议处理流程，抽象多路复用、心跳保活、优雅退出等能力接口作为协议扩展点&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在路由框架方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过改为基于属性匹配的机制，与具体协议字段解耦，支持多协议适配；&lt;/li&gt;
&lt;li&gt;引入层级路由机制，解决属性扁平化的匹配性能问题；&lt;/li&gt;
&lt;li&gt;利用变量机制懒加载特性，按需实现深/浅解包；&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;后续规划及展望&#34;&gt;后续规划及展望&lt;/h2&gt;
&lt;h3 id=&#34;更多流模式支持更多协议接入&#34;&gt;更多流模式支持、更多协议接入&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;1585209248869-cc2b0d96-1e9c-4e77-8047-d2022dd3dac0.png&#34; alt=&#34;更多流模式支持、更多协议接入&#34;&gt;&lt;/p&gt;
&lt;p&gt;当前 MOSN 多协议机制，已经可以比较好的支持像 Dubbo、SOFABolt 这样基于多路复用流模型的微服务协议，后续会继续扩展支持的类型及协议，例如经典的 PING-PONG 协议、Streaming 流式协议，也欢迎大家一起参与社区建设，贡献你的 PR。&lt;/p&gt;
&lt;h3 id=&#34;社区标准方案推进&#34;&gt;社区标准方案推进&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;1585209248892-b736ba21-4a23-4f8b-9ba0-7623f7125e72.png&#34; alt=&#34;社区标准方案推进&#34;&gt;&lt;/p&gt;
&lt;p&gt;与此同时，我们注意到 Istio 社区其实也有类似的需求，希望设计一套协议无关的路由机制——&amp;ldquo;Istio Meta Routing API&amp;rdquo;。其核心思路与 MOSN 的多协议路由框架基本一致，即通过基于属性的路由来替代基于协议字段的路由。目前该草案还处于一个比较初级的阶段，对于匹配性能、字段扩展方面还没有比较完善的设计说明，后续 MOSN 团队会积极参与社区方案的讨论，进一步推动社区标准方案的落地。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: MOSN 扩展机制解析</title>
      <link>https://brpc.incubator.apache.org/docs/concept/extensions/</link>
      <pubDate>Thu, 09 Apr 2020 21:00:00 +0800</pubDate>
      
      <guid>https://brpc.incubator.apache.org/docs/concept/extensions/</guid>
      <description>
        
        
        &lt;p&gt;本文将从以下几个方面介绍 MOSN 的扩展机制：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MOSN 扩展能力和扩展机制的详细介绍；&lt;/li&gt;
&lt;li&gt;结合示例对 MOSN 的 Filter 扩展机制与插件扩展机制进行详细介绍；&lt;/li&gt;
&lt;li&gt;MOSN 后续扩展能力规划与展望；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本文中的示例在 MOSN 的 Github 的 &lt;code&gt;examples/codes/mosn-extensions&lt;/code&gt; 目录下，大家也可以下载下来运行一下。&lt;/p&gt;
&lt;h3 id=&#34;mosn-简介&#34;&gt;MOSN 简介&lt;/h3&gt;
&lt;p&gt;MOSN 作为云原生的网络代理，旨在为服务提供多协议、模块化、智能化、安全的代理能力。在实际生产使用中，不同的厂商会有不同的使用场景，通用的网络代理能力面对具体的业务场景会显得有些不足，通常都需要进行二次开发以满足业务需求。MOSN 在核心框架中，提供了一系列的扩展机制和扩展点，就是为了满足需要基于业务进行二次开发的场景，同时 MOSN 提供的部分通用逻辑也是基于扩展机制和扩展点的实现。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;1586436268765-2c1afc84-0142-4217-b666-0cc9cbdf7e78.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;比如通过 MOSN “内置实现”的透明劫持的能力，就是通过 MOSN Filter 机制实现。而要实现消息的代理，则可以通过类似的扩展实现。在通用代理的情况下，可以通过 Filter 机制实现业务的认证鉴权，也可以实现定制的负载均衡逻辑；除了转发流程可以扩展实现以外，MOSN 还可以扩展日志的实现，用于对标已有的日志系统，也可以扩展 XDS 实现定制的配置更新；根据不同的业务场景还会有很多具体的扩展情况，就不在此展开了，有兴趣的可以关注 MOSN 社区正在建设的源代码分析系列文章与文档。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;1586436269068-a0a77749-1a98-4bce-9e9b-323ea3bd14a5.png&#34; alt=&#34;图片 1.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;MOSN 作为一款网络代理，在转发链路上的网络层、协议层、转发层，在非转发链路上的配置、日志、Admin API 等都提供了扩展能力，对于协议扩展的部分，有兴趣的可以看一下上期直播讲的 &lt;a href=&#34;../multi-protocol&#34;&gt;MOSN 多协议机制解析&lt;/a&gt;，我们今天将重点介绍一下转发层的 Stream Filter 扩展机制与 MOSN 的插件机制。&lt;/p&gt;
&lt;h3 id=&#34;stream-filter-机制&#34;&gt;Stream Filter 机制&lt;/h3&gt;
&lt;p&gt;在实际业务场景中，在转发请求之前或者回写响应之前，都可能需要对请求/响应做一些处理，如判断是否需要进行转发的认证/鉴权，是否需要限流，又或者需要对请求/响应做一些具有业务语义的记录，需要对协议进行转换等。这些场景都与具体的业务高度耦合，是一个典型的需要进行二次开发的情况。MOSN 的 Stream Filter 机制就是为了满足这样的扩展场景所设计的，它也成为目前 MOSN 扩展中使用频率最高的扩展点。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;1586436268982-8881e2b5-d3a7-443e-ac1f-90735b32f4e9.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;在目前的内置 MOSN 实现中，Stream Filter 机制暂时与内置的 network filter: proxy 是绑定的，后面我们也考虑将这部分能力进行抽象，让其他 network filter 也可以复用这部分能力。&lt;/p&gt;
&lt;p&gt;关于 Stream Filter，今天会为大家讲解两个部分的内容：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一个 Stream Filter 包含哪些部分以及在 MOSN 中是如何工作的；&lt;/li&gt;
&lt;li&gt;通过一个 Demo 演示来加深对 Stream Filter 的实现与应用；&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;一个完整的-stream-filter&#34;&gt;一个完整的 Stream Filter&lt;/h4&gt;
&lt;p&gt;一个完整的 StreamFilter，包含三个部分的内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个 StreamFilter 对象，存在于每一个请求/响应当中，在 MOSN 收到请求的时候发挥作用，我们称为 ReceiverFilter，在 MOSN 收到响应时发挥作用，我们称为 SenderFilter。一个 StreamFilter 可以是其中任意一种，也可以是两种都是；&lt;/li&gt;
&lt;li&gt;一个 StreamFilterFactory 对象，用于 MOSN 在每次收到请求时，生成 StreamFilter 对象。在 Listener 配置解析时，一个 StreamFilter 的配置会生成一个其对于的 StreamFilterFactory。同一个 StreamFilter 在不同的 Listener 下可能对应不同的 StreamFilterFactory，但是也有的特殊情况下，StreamFilterFactory 可能需要实现为单例；&lt;/li&gt;
&lt;li&gt;一个 CreateStreamFilterFactory 方法，配置解析时生成 StreamFilterFactory 就是调用它；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;1586436268990-060fa931-308c-4237-898f-463ce5a3228c.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;stream-filter-在-mosn-中是如何工作的&#34;&gt;Stream Filter 在 MOSN 中是如何工作的&lt;/h4&gt;
&lt;p&gt;接下来，我们看下 Stream Filter 在 MOSN 中是如何工作的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;1586436269017-a78ea077-adea-4e5c-bb19-48843553362d.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;当 MOSN 经过协议解析，收到一个完整的请求时，会创建一个 Stream。此时收到请求的 Listener 中每存在一个 StreamFilterFactory，就会生成一个 StreamFilter 对象，随后进入到 proxy 流程。&lt;/p&gt;
&lt;p&gt;进入 proxy 流程以后，如果存在 ReceiverFilter，那么就会执行对应的逻辑，ReceiverFilter 包括两个阶段，“路由前”和“路由后”，在每个 Filter 处理完成以后，会返回一个状态，如果是 Stop 则会中止后续尚未执行的 ReceiverFilter，通常情况下，返回 Stop 状态的 Filter 都会回写一个响应。如果是 Continue 则会执行下一个 ReceiverFilter，直到本阶段的 ReceiverFilter 都执行完成或中止；路由前阶段的 ReceiverFIlter 执行完成后，就会执行路由后阶段，其逻辑和路由前一致。如果是正常转发，那么随后 MOSN 会收到一个响应或者发现其他异常直接回写一个响应，此时就会进入到 SenderFilter 的流程中，完成 SenderFilter 的处理。SenderFilter 处理完成以后，MOSN 会写响应给 Client，并且完成最后的收尾工作，收尾工作包括一些数据的回收、日志的记录，以及 StreamFilter 的“销毁”（调用 OnDestroy）。&lt;/p&gt;
&lt;h4 id=&#34;stream-filter-demo&#34;&gt;Stream Filter Demo&lt;/h4&gt;
&lt;p&gt;对 StreamFilter 有了一个基本的认识以后，我们来看一个实际的 Demo 代码来看下如何实现一个 StreamFilter 并且让它在 MOSN 中发挥作用。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;1586436268993-74f02195-c831-4c42-9736-d9eaf7b26cb7.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;按照刚才我们的介绍，一个 Stream FIlter 要包含三部分：Filter、Factory、CreateFactory。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先我们实现一个 Filter，其逻辑是模拟一个鉴权的 Filter：只有请求的 Header 中包含所配置的 Key-Value 时，MOSN 才会对请求做继续转发，否则直接返回 403 错误；&lt;/li&gt;
&lt;li&gt;然后我们实现一个 Factory，它负责生成我们实现的 Filter，并且说明 Filter 应该发挥作用的阶段（在请求阶段、路由匹配之前）；&lt;/li&gt;
&lt;li&gt;最后我们定义了一个生成 DemoFactory 的函数 CreateDemoFactory，并且通过 init 将其“注册”，注册完成以后，MOSN 配置解析就可以识别这个 StreamFilter；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;1586436269034-bac1b72c-84cd-48c8-9e73-4867587ee28d.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;完成实现以后，我们就可以通过具体的配置来实现对应的功能了。在示例的配置中，配置 StreamFilter 为我们刚才实现的 Filter，只转发 Header 中包含 user:admin 的请求。示例配置中监听的端口是 2046，转发的后端 server 端口是 8080。在演示之前，我已经完成了 8080 server 的启动，这个 server 会对收到的任意请求返回 200 。我们来看一下 MOSN 转发情况。Demo 操作可以在文末直播的视频回顾中查看。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Stream Filter Demo: &lt;a href=&#34;https://github.com/mosn/mosn/tree/master/examples/codes/mosn-extensions/simple_streamfilter&#34;&gt;https://github.com/mosn/mosn/tree/master/examples/codes/mosn-extensions/simple_streamfilter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Demo Readme：&lt;a href=&#34;https://github.com/mosn/mosn/tree/master/examples/cn_readme/mosn-extensions&#34;&gt;https://github.com/mosn/mosn/tree/master/examples/cn_readme/mosn-extensions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;mosn-plugin-机制&#34;&gt;MOSN Plugin 机制&lt;/h3&gt;
&lt;p&gt;下面我们来了解一下 MOSN 的 Plugin 机制。&lt;/p&gt;
&lt;p&gt;刚才我们对 Stream Filter 有了一个了解，MOSN 中其余的扩展实现也是类似的方法，思路就是编码实现 MOSN 扩展点所需要的接口然后利用 MOSN 的框架运行扩展的实现。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;1586436268983-cccb6022-61e0-491c-8dd6-5d1c67a31d02.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;但是这里会发现一个问题，就是有时候我们需要的扩展能力已经有现成可用的实现了，那么我们是否可以做简单的改造就让 MOSN 可以获取对应的能力，哪怕目前可用的实现不是 Go 语言的实现，比如现成的限流能力的实现、注入能力的实现等；又或者对于某些特定的能力，它需要有更严格的控制，更高的标准，比如安全相关的能力。&lt;/p&gt;
&lt;p&gt;类似这样的场景，我们引入了 MOSN 的 Plugin 机制，它支持我们可以对 MOSN 需要的能力进行独立开发或者我们对现有的程序进行适当的改造以后，就可以将它们引入到 MOSN 当中来。&lt;/p&gt;
&lt;p&gt;MOSN 的 Plugin 机制包含了两部分内容，一是 MOSN 自定义的 Plugin 框架，它支持通过在 MOSN 中实现 agent 与一个独立的进程进行交互来完成 MOSN 扩展能力的实现。二是基于 Golang 的 Plugin 框架，通过动态库（SO）加载的方式，实现 MOSN 的扩展。其中动态库加载的方式目前还存在一些局限性，还处于 beta 阶段。&lt;/p&gt;
&lt;p&gt;我们先来看一下多进程 Plugin 框架。&lt;/p&gt;
&lt;h4 id=&#34;多进程-plugin-框架&#34;&gt;多进程 Plugin 框架&lt;/h4&gt;
&lt;p&gt;MOSN 的 Plugin 框架是 MOSN 封装的一个可以让 MOSN 通过 gRPC 和独立进程进行交互的方式，它包含两部分：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;独立的进程通过 MOSN Plugin 框架管理，作为 MOSN 的子进程；MOSN 的 Plugin 框架可以管理它们，如启动、关闭等；&lt;/li&gt;
&lt;li&gt;通过在 MOSN 中实现的 agent，使用 gRPC 的方式和子进程进行交互，gRPC 可以是基于 tcp 的，也可以是基于 domain socket 的；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;1586436268954-38e37509-fbf8-44f4-a0fe-0860401daae0.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;基于这个框架，我们只需要开发或者进行一些改造，让程序满足 MOSN 框架的规范，就可以作为 MOSN 多进程插件的一部分。&lt;/p&gt;
&lt;p&gt;首先我们需要提供一个 gRPC 的服务，并且满足 MOSN 框架下的 proto 定义。当 gRPC server 启动完成以后，向标准输出（stdout）输出一段约定的字符串，作为 MOSN 和子进程之间的握手协议。MOSN 中的对应 agent 会通过握手协议完成与子进程之间的连接建立。握手协议的字符串包含5个字段，每个字段之间用&amp;quot;|&amp;ldquo;分割，其中带$符号的是根据实际进程情况需要填写的值，其余的是当前约定的固定字段。network 支持 tcp/unix，代表通过 tcp 方式还是 unix domain socket 的方式进行通信，addr 表示 gRPC server 监听的地址。&lt;/p&gt;
&lt;p&gt;MOSN 提供了 go 语言的子进程 server 封装，在 go 语言场景下，作为子进程的程序只需要实现一个 MOSN 框架下的 plugin.Service 接口，并且通过 plugin.Serve 方法启动即可。&lt;/p&gt;
&lt;p&gt;通过 Plugin 框架，让 MOSN 做到在扩展功能实现的时候，支持隔离性、支持异构语言扩展能力、支持模块化，以及具备进程管理的能力。&lt;/p&gt;
&lt;p&gt;对于 MOSN 通过多进程方式完成扩展，今天准备了两个示例和大家进行分享。一个是基于 MOSN 的 TLS 扩展，模拟了通过一个安全等级比较高的证书管理程序来获取 TLS 配置证书、私钥等敏感信息的能力；第二个是将之前演示的 Stream Filter 修改为了“子进程”，模拟“如何将现成的能力”引入 MOSN。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;基于 MOSN 的 TLS 扩展示例&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先来看 TLS 的扩展，示例包含两部分内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;独立的子进程，用 Go 语言实现，实现了 plugin.Service 接口，并通过 plugin.Serve 方法启动；&lt;/li&gt;
&lt;li&gt;MOSN 扩展点实现交互 agent。在这里就不详细展开TLS扩展点的细节了，只关注交互过程：通过 Call 方法发送 gRPC 请求，获取响应，完成相关逻辑；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;1586436269094-79115a60-66ca-4318-9049-82079bae5979.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;load cert demo: &lt;a href=&#34;https://github.com/mosn/mosn/tree/master/examples/codes/mosn-extensions/plugin/cert_loader&#34;&gt;https://github.com/mosn/mosn/tree/master/examples/codes/mosn-extensions/plugin/cert_loader&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Demo Readme：&lt;a href=&#34;https://github.com/mosn/mosn/tree/master/examples/cn_readme/mosn-extensions&#34;&gt;https://github.com/mosn/mosn/tree/master/examples/cn_readme/mosn-extensions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面我们来看一下效果，首先配置依然是监听 2046 的端口，配置了扩展的 TLS 配置，就需要 HTTPS 才可以访问 MOSN。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Stream Filter 作为 agent 示例&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下面我们来看下 Stream Filter 作为 agent，与多进程之间的示例，模拟“如何将现成的能力”引入 MOSN。在示例中我们把之前的“鉴权”认为是一个“现成的”能力。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;1586436268973-4fe309cb-83dc-41d8-9bff-0887cf08d68a.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;独立进程中实现和之前一样的“鉴权”能力，其配置来自进程的启动参数。Stream Filter 作为 agent 实现，其中“校验”逻辑修改为和子进程交互，在生成 Factory 时完成子进程的启动和配置设置。&lt;/p&gt;
&lt;p&gt;这个示例运行以后和之前 Stream Filter 的效果是一样的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Stream Filter Plugin demo: &lt;a href=&#34;https://github.com/mosn/mosn/tree/master/examples/codes/mosn-extensions/plugin/filter&#34;&gt;https://github.com/mosn/mosn/tree/master/examples/codes/mosn-extensions/plugin/filter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Demo Readme：&lt;a href=&#34;https://github.com/mosn/mosn/tree/master/examples/cn_readme/mosn-extensions&#34;&gt;https://github.com/mosn/mosn/tree/master/examples/cn_readme/mosn-extensions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;动态库so扩展机制&#34;&gt;动态库(SO)扩展机制&lt;/h4&gt;
&lt;p&gt;在目前的多进程框架中，虽然扩展能力可以通过一个独立的子程序实现，但是仍然需要在 MOSN 中实现一个 agent 用于交互，依然需要在MOSN中编写一部分代码；而我们希望引入动态库（SO）加载的机制，实现在不重新编译 MOSN 的情况下，通过加载不同的 SO，做到不同的扩展能力。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;1586436268988-2b2d72f0-ce06-4678-ba14-ec1b73bb85a9.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;与子程序模式相比，SO 虽然也是一个独立的二进制，但是最终启动的时候，不会有额外的子进程存在，其生命周期可以和 MOSN 完全保持一致，而且动态库机制还有一个优势：它可以让扩展代码和 MOSN 完全解耦合。&lt;/p&gt;
&lt;p&gt;但是，目前使用动态库加载的方式还存在一些限制，因此 MOSN 对于这个能力也还处于 Beta 阶段，并没有投入实际使用，需要完善。相关的原因包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;部分 MOSN 扩展的实现需要用到 MOSN 中的一些定义，因此在动态库实现时不能完全做到解耦合。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了解决这个问题，MOSN 将一些基础库（如日志、buffer 等），一些 API 定义从 MOSN 的核心仓库中独立出来，这样扩展实现和 MOSN 核心都引用这些“独立”的库，减少扩展对 MOSN 核心代码的依赖。&lt;/p&gt;
&lt;p&gt;如果某一个扩展点要支持完全解耦合的动态库扩展，那么对应的扩展点都需要进行支持动态库加载的改造，包括配置模型与实现。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MOSN 动态库加载的方式，其实是基于 Go 语言的 plugin 包实现的，它可以加载用 Go 语言编译的动态库。但是对于动态库的编译环境存在一些限制，编译它时必须和 MOSN 编译时的 GOPATH 保持一致；同时引用的代码路径都需要保持一致，如果存在 vendor 目录，那么意味着编译动态库时的项目路径也得和 MOSN 核心保持一致。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了解决这个问题，我们考虑使用 Docker 编译，在编译时统一 GOPATH，强制修改代码目录结构，屏蔽掉 Vendor 目录差异的方式来解决，这种方式目前仍然在验证中。&lt;/p&gt;
&lt;p&gt;因此理论上 MOSN 目前所有的扩展点都可以使用 Go 语言原生机制通过加载 SO 的方式来实现，而目前 MOSN 最适合实现这个能力的一个扩展点就是 Stream Filter。&lt;/p&gt;
&lt;p&gt;我们只需要实现一个通用的、可以加载 SO 的 Filter，然后在具体的 SO 中实现真正的 StreamFilter 逻辑，由于 StreamFilter 实现所需要的接口定义都在 mosn.io/api 中，所以 SO 可以做到和 MOSN 核心框架解耦合。&lt;/p&gt;
&lt;p&gt;关键点就是这个通用 Filter 的设计和实现，我们也通过 Demo 来看一下。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;通用 Filter 的设计和实现&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个通用的 Filter 和普通的 StreamFilter 不同，它只包含一个要素：CreateFactory。思路是通过通用的 CreateFactory，加载 SO 中的 CreateFactory 并执行，让 SO 中的 Factory 发挥作用。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;1586436269013-7a2935b1-37f5-45c2-9e96-f11f62ed8bee.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;通用 CreateFactory 包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;配置解析，解析出两部分内容：一是需要加载的 SO 路径，二是 SO 中对应 Filter 所需要的配置；&lt;/li&gt;
&lt;li&gt;SO 路径就代表了 SO 中 Filter 的“注册”，以及本次会选择这个 Filter；&lt;/li&gt;
&lt;li&gt;加载 SO，基于其中约定好的函数名，获取真正的 CreateFactory 函数；&lt;/li&gt;
&lt;li&gt;调用真正的 CreateFactory 函数，实现 SO 中 StreamFilter 的加载；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由此，我们可以看到，SO 中的 StreamFIlter 也和普通的 FIlter 有些区别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;生成 StreamFilterChainFactory 的函数必须是固定的名字；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不再需要 init “注册”该函数；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Stream Filter SO Demo: &lt;a href=&#34;https://github.com/mosn/mosn/tree/master/examples/codes/mosn-extensions/plugin/so&#34;&gt;https://github.com/mosn/mosn/tree/master/examples/codes/mosn-extensions/plugin/so&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Demo Readme：&lt;a href=&#34;https://github.com/mosn/mosn/tree/master/examples/cn_readme/mosn-extensions&#34;&gt;https://github.com/mosn/mosn/tree/master/examples/cn_readme/mosn-extensions&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面我们来看一下这个 Demo 的效果。本次 Demo 中的 Filter 实现依然是之前的“鉴权”示例。经过验证，我们发现这个思路是可行的，但是离生产实践还需要完善更多的细节。&lt;/p&gt;
&lt;h3 id=&#34;代码扩展活动&#34;&gt;代码扩展活动&lt;/h3&gt;
&lt;p&gt;经过这些演示，相信大家对 MOSN 的扩展能力也有所了解了，这里我们来做一个代码扩展活动，希望大家可以踊跃参与。完成活动任务，提交相关代码 PR 到 MOSN 的仓库，我们会进行 CodeReview 和验证，第一个验证通过的代码将合并到 MOSN 的 example 中，并且对提交的同学送上一份奖励；对于前3名提交、同样结果正确并且是原创的，虽然我们不能合并对应的代码，但是我们也将送上奖励。&lt;/p&gt;
&lt;p&gt;活动任务共有五个：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多进程 Demo 中证书加载的独立进程，使用 python 或者 java 实现以后，demo 运行演示成功。任意一种语言就算完成一个任务。&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;examples/codes/mosn-extensions/plugin/cert_loader/python/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;examples/codes/mosn-extensions/plugin/cert_loader/java/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;多进程 Demo 中 stream filter 的独立进程，使用 python 或者 java 实现以后，demo 运行演示成功。任意一种语言就算完成一个任务。&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;examples/codes/mosn-extensions/plugin/filter/python/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;examples/codes/mosn-extensions/plugin/filter/java/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;SO 动态加载 Demo 中，SO 里实现的 Stream Filter 结合多进程框架（GO 语言）实现，Demo 运行演示成功。&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;examples/codes/mosn-extensions/plugin/so/subprocess/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;跨语言相关的实现可以参考以下示例：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/mosn/mosn/tree/master/examples/codes/plugin/across-languages/server/&#34;&gt;https://github.com/mosn/mosn/tree/master/examples/codes/plugin/across-languages/server/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;规划与展望&#34;&gt;规划与展望&lt;/h3&gt;
&lt;p&gt;最后向大家介绍一下 MOSN 后续扩展能力的规划，也希望大家有需求的可以向我们反馈，有兴趣的一起参与到 MOSN 的建设中来。首先就是要完善 SO 动态库加载机制，让 MOSN 支持 SO 方式加载扩展；然后就是针对 LUA 的脚本扩展以及支持 WASM 的扩展能力；最后 MOSN 还会增加更多的扩展点，以满足更多更复杂的场景。非常欢迎大家参与到 MOSN 社区的共建中。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: FAQ</title>
      <link>https://brpc.incubator.apache.org/docs/faq/</link>
      <pubDate>Mon, 02 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://brpc.incubator.apache.org/docs/faq/</guid>
      <description>
        
        
        &lt;h3 id=&#34;为什么要使用-mosn-替换-istio-的数据面&#34;&gt;为什么要使用 MOSN 替换 Istio 的数据面？&lt;/h3&gt;
&lt;p&gt;蚂蚁集团在进行 Mesh 改造前，已经预料到作为下一代蚂蚁集团的基础架构，Mesh 化势必带来革命性的变革以及演进成本，我们有非常宏大的蓝图：准备将原有的网络和中间件方面的各种能力重新沉淀和打磨，打造成为未来新一代架构的底层平台，承载各种服务通讯的职责。&lt;/p&gt;
&lt;p&gt;这是一个需要多年时间打造，满足未来五年乃至十年需求的长期规划项目，合作共建团队跨业务、SRE、中间件、基础架构等部门。我们必须有一个具备灵活扩展、高性能、满足长期演进的网络代理转发平面。Nginx、Envoy 在网络代理领域有非常长期的能力积累和活跃的社区，我们也同时借鉴了 Nginx、Envoy 等其他优秀的开源网络代理， 同时在研发效率、灵活扩展等方面进行了加强，同时在整个 Mesh 改造涉及到非常多的部门和研发人员，必须考虑到跨团队合作的落地成本，所以我们基于 Go 自研了云原生场景下的新型网络代理 MOSN。对于 Go 的性能，我们前期也做了充分的调研和测试，满足蚂蚁集团业务对性能的要求。&lt;/p&gt;
&lt;p&gt;同时我们从社区用户方面收到了很多的反馈和需求，大家有同样的需求以及思考，所以我们结合社区与自身的实际情况，从满足社区以及用户角度出发进行了 MOSN 的研发工作，我们认为开源的竞争主要是标准与规范的竞争，我们需要基于开源标准做最适合自身的实现选择。&lt;/p&gt;
&lt;h3 id=&#34;mosn-与--envoy-不同点是什么优势在哪里&#34;&gt;MOSN 与  Envoy 不同点是什么？优势在哪里？&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;语言栈的不同&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;MOSN 使用 Go 语言编写，Go 语言在生产效率，内存安全上有比较强的保障，同时 Go 语言在云原生时代有广泛的库生态系统，性能在 Mesh 场景下被我们评估以及实践是可以接受的。所以 MOSN 对于使用 Go、Java 等语言的公司和个人的心智成本更低。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;核心能力的差异化&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;MOSN 支持多协议框架，用户可以比较容易的接入私有协议，具有统一的路由框架；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;多进程的插件机制，可以通过插件框架很方便的扩展独立 MOSN 进程的插件，做一些其他管理，旁路等的功能模块扩展；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;具备中国密码合规的传输层国密算法支持；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;开源的-mosn-和蚂蚁集团内部使用的-mosn-是同一个版本吗&#34;&gt;开源的 MOSN 和蚂蚁集团内部使用的 MOSN 是同一个版本吗？&lt;/h3&gt;
&lt;p&gt;首先蚂蚁集团内部并没有一个所谓独立的 MOSN 版本。蚂蚁集团内部有较多的基于 MOSN 开发的模块，内部模块依赖开源版的 MOSN。业务无关的 MOSN 核心能力的研发，均是直接在开源版本上进行。&lt;/p&gt;
&lt;h3 id=&#34;mosn-的开源版本和商业版本的区别是什么&#34;&gt;MOSN 的开源版本和商业版本的区别是什么？&lt;/h3&gt;
&lt;p&gt;蚂蚁集团有 Mesh 商业产品，商业产品主要是提供从开发到部署再到运行时的一套完整的解决方案，同时为了满足商业用户自身的业务需求会对 MOSN 进行扩展，所以所谓的 MOSN 商业版本主要是承载了商业用户自身业务模块的版本。&lt;/p&gt;
&lt;h3 id=&#34;mosn-的开源计划是什么&#34;&gt;MOSN 的开源计划是什么？&lt;/h3&gt;
&lt;p&gt;MOSN 开源的发布周期是一个月，我们即将公布 2021 年的 Roadmap，期待与更多企业共建。&lt;/p&gt;
&lt;h3 id=&#34;mosn-支持-istio-的什么版本什么时候可以在-istio-中可用&#34;&gt;MOSN 支持 Istio 的什么版本？什么时候可以在 Istio 中可用？&lt;/h3&gt;
&lt;p&gt;目前 MOSN 可基于 Istio 1.5.2  跑通 &lt;a href=&#34;https://brpc.incubator.apache.org/docs/quick-start/istio/&#34;&gt;bookinfo example&lt;/a&gt;，预计 2020 年 9 月份将完整支持 Istio 的能力，并成为 Istio 中可用的 Sidecar 部署选项。请加入 &lt;a href=&#34;https://brpc.incubator.apache.org/docs/community&#34;&gt;MOSN 社区&lt;/a&gt; 了解适配 Istio 的工作。&lt;/p&gt;
&lt;h3 id=&#34;mosn-支持哪些服务注册和发现机制&#34;&gt;MOSN 支持哪些服务注册和发现机制？&lt;/h3&gt;
&lt;p&gt;MOSN 主要支持两种服务注册与发现机制：一种是直接和 Istio 适配，另一种是集成 SDK，与不同的注册中心和配置中心来搭配使用。&lt;/p&gt;
&lt;h3 id=&#34;如何参与-mosn-开源社区&#34;&gt;如何参与 MOSN 开源社区？&lt;/h3&gt;
&lt;p&gt;MOSN 社区分为用户组和按需求创建的 Working Group。您可以使用钉钉扫描&lt;a href=&#34;https://brpc.incubator.apache.org/docs/community/&#34;&gt;社区&lt;/a&gt;页面上的二维码加入 MOSN 用户群，参与社区讨论，获取社区最新活动通知。访问 &lt;a href=&#34;https://github.com/mosn/community&#34;&gt;Community 仓库&lt;/a&gt;了解 MOSN 开源社区的组织架构和获取社区资料。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 社区</title>
      <link>https://brpc.incubator.apache.org/docs/community/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://brpc.incubator.apache.org/docs/community/</guid>
      <description>
        
        
        &lt;p&gt;MOSN 是一个开源项目，于 2018 年 7 月由蚂蚁集团开源，使用 Apache 2.0 协议，任何人都可以使用和参与改进。MOSN 社区期待您的加入！&lt;/p&gt;
&lt;p&gt;关于 MOSN 社区的详细资料请访问 &lt;a href=&#34;https://github.com/mosn/community&#34;&gt;Community 仓库&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;工作组&#34;&gt;工作组&lt;/h2&gt;
&lt;p&gt;目前 MOSN 包含以下工作组：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mosn/community/blob/master/wg-istio.md&#34;&gt;Istio 工作组&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mosn/community/blob/master/wg-dubbo.md&#34;&gt;Dubbo 工作组&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;选择加入您感兴趣的工作组，开始您的 MOSN 之旅吧！&lt;/p&gt;
&lt;h2 id=&#34;社区会议&#34;&gt;社区会议&lt;/h2&gt;
&lt;p&gt;MOSN 社区定期召开社区会议。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://ebay.zoom.com.cn/j/96285622161&#34;&gt;每双周三晚 8 点（北京时间）&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.google.com/document/d/12lgyCW-GmlErr_ihvAO7tMmRe87i70bv2xqe4h2LUz4/edit?usp=sharing&#34;&gt;会议纪要&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;合作伙伴&#34;&gt;合作伙伴&lt;/h2&gt;
&lt;p&gt;合作伙伴参与 MOSN 合作开发，使 MOSN 变得更好。&lt;/p&gt;
&lt;div class=&#34;communnity&#34;&gt;
&lt;table&gt;
  &lt;tbody&gt;
  &lt;tr&gt;&lt;/tr&gt;
    &lt;tr&gt;
      &lt;td align=&#34;center&#34;  valign=&#34;middle&#34;&gt;
        &lt;a href=&#34;https://www.antfin.com&#34; target=&#34;_blank&#34;&gt;
          &lt;img width=&#34;222px&#34;  src=&#34;https://brpc.incubator.apache.org/images/community/ant.png&#34;&gt;
        &lt;/a&gt;
      &lt;/td&gt;
      &lt;td align=&#34;center&#34;  valign=&#34;middle&#34;&gt;
        &lt;a href=&#34;https://www.aliyun.com&#34; target=&#34;_blank&#34;&gt;
          &lt;img width=&#34;222px&#34;  src=&#34;https://brpc.incubator.apache.org/images/community/aliyun.png&#34;&gt;
        &lt;/a&gt;
      &lt;/td&gt;
      &lt;td align=&#34;center&#34; valign=&#34;middle&#34;&gt;
        &lt;a href=&#34;https://www.zhipin.com&#34; target=&#34;_blank&#34;&gt;
          &lt;img width=&#34;222px&#34;  src=&#34;https://brpc.incubator.apache.org/images/community/bosszhipin.png&#34;&gt;
        &lt;/a&gt;
      &lt;/td&gt;
      &lt;td align=&#34;center&#34; valign=&#34;middle&#34;&gt;
        &lt;a href=&#34;https://www.dmall.com&#34; target=&#34;_blank&#34;&gt;
          &lt;img width=&#34;222px&#34;  src=&#34;https://brpc.incubator.apache.org/images/community/duodian.png&#34;&gt;
        &lt;/a&gt;
      &lt;/td&gt;
      &lt;/tr&gt;&lt;tr&gt;&lt;/tr&gt;
      &lt;tr&gt;
      &lt;td align=&#34;center&#34; valign=&#34;middle&#34;&gt;
        &lt;a href=&#34;https://www.kanzhun.com&#34; target=&#34;_blank&#34;&gt;
          &lt;img width=&#34;222px&#34;  src=&#34;https://brpc.incubator.apache.org/images/community/kanzhun.png&#34;&gt;
        &lt;/a&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;&lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h2 id=&#34;终端用户&#34;&gt;终端用户&lt;/h2&gt;
&lt;p&gt;以下是 MOSN 的用户。&lt;/p&gt;
&lt;div&gt;
&lt;table&gt;
  &lt;tbody&gt;
  &lt;tr&gt;&lt;/tr&gt;
    &lt;tr&gt;
      &lt;td align=&#34;center&#34;  valign=&#34;middle&#34;&gt;
        &lt;a href=&#34;https://www.tenxcloud.com&#34; target=&#34;_blank&#34;&gt;
          &lt;img width=&#34;222px&#34;  src=&#34;https://brpc.incubator.apache.org/images/community/tenxcloud.png&#34;&gt;
        &lt;/a&gt;
      &lt;/td&gt;
      &lt;td align=&#34;center&#34; valign=&#34;middle&#34;&gt;
        &lt;a href=&#34;https://www.zhipin.com&#34; target=&#34;_blank&#34;&gt;
          &lt;img width=&#34;222px&#34;  src=&#34;https://brpc.incubator.apache.org/images/community/linkedcare.png&#34;&gt;
        &lt;/a&gt;
      &lt;/td&gt;
      &lt;td align=&#34;center&#34; valign=&#34;middle&#34;&gt;
        &lt;a href=&#34;https://www.xiaobaoonline.com/&#34; target=&#34;_blank&#34;&gt;
          &lt;img width=&#34;222px&#34;  src=&#34;https://brpc.incubator.apache.org/images/community/xiaobao.png&#34;&gt;
        &lt;/a&gt;
      &lt;/td&gt;
      &lt;td align=&#34;center&#34; valign=&#34;middle&#34;&gt;
        &lt;a href=&#34;https://www.wm-motor.com/&#34; target=&#34;_blank&#34;&gt;
          &lt;img width=&#34;222px&#34;  src=&#34;https://brpc.incubator.apache.org/images/community/weima.png&#34;&gt;
        &lt;/a&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;&lt;/tr&gt;
    &lt;tr&gt;
      &lt;td align=&#34;center&#34; valign=&#34;middle&#34;&gt;
        &lt;a href=&#34;https://www.iqiyi.com&#34; target=&#34;_blank&#34;&gt;
          &lt;img width=&#34;222px&#34;  src=&#34;https://brpc.incubator.apache.org/images/community/iqiyi.png&#34;&gt;
        &lt;/a&gt;
      &lt;/td&gt;
      &lt;td align=&#34;center&#34; valign=&#34;middle&#34;&gt;
        &lt;a href=&#34;https://www.gaiaworks.cn&#34; target=&#34;_blank&#34;&gt;
          &lt;img width=&#34;222px&#34;  src=&#34;https://brpc.incubator.apache.org/images/community/gaiya.png&#34;&gt;
        &lt;/a&gt;
      &lt;/td&gt;
      &lt;td align=&#34;center&#34; valign=&#34;middle&#34;&gt;
        &lt;a href=&#34;https://www.tydic.com&#34; target=&#34;_blank&#34;&gt;
          &lt;img width=&#34;222px&#34;  src=&#34;https://brpc.incubator.apache.org/images/community/tianyuandike.png&#34;&gt;
        &lt;/a&gt;
      &lt;/td&gt;
      &lt;td align=&#34;center&#34; valign=&#34;middle&#34;&gt;
        &lt;a href=&#34;https://www.terminus.io&#34; target=&#34;_blank&#34;&gt;
          &lt;img width=&#34;222px&#34;  src=&#34;https://brpc.incubator.apache.org/images/community/terminus.png&#34;&gt;
        &lt;/a&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td align=&#34;center&#34; valign=&#34;middle&#34;&gt;
        &lt;a href=&#34;https://www.tuya.com&#34; target=&#34;_blank&#34;&gt;
          &lt;img width=&#34;222px&#34;  src=&#34;https://brpc.incubator.apache.org/images/community/tuya.png&#34;&gt;
        &lt;/a&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;请在&lt;a href=&#34;https://github.com/mosn/community/issues/8&#34;&gt;此处&lt;/a&gt;登记并提供反馈来帮助 MOSN 做的更好。&lt;/p&gt;
&lt;h2 id=&#34;开源生态&#34;&gt;开源生态&lt;/h2&gt;
&lt;p&gt;MOSN 社区积极拥抱开源生态，与以下开源社区建立了良好的合作关系。&lt;/p&gt;
&lt;div&gt;
&lt;table&gt;
  &lt;tbody&gt;
  &lt;tr&gt;&lt;/tr&gt;
    &lt;tr&gt;
      &lt;td align=&#34;center&#34; valign=&#34;middle&#34;&gt;
        &lt;a href=&#34;https://istio.io/&#34; target=&#34;_blank&#34;&gt;
          &lt;img width=&#34;222px&#34;  src=&#34;https://brpc.incubator.apache.org/images/community/istio.png&#34;&gt;
        &lt;/a&gt;
      &lt;/td&gt;
      &lt;td align=&#34;center&#34;  valign=&#34;middle&#34;&gt;
        &lt;a href=&#34;https://skywalking.apache.org/&#34; target=&#34;_blank&#34;&gt;
          &lt;img width=&#34;222px&#34;  src=&#34;https://brpc.incubator.apache.org/images/community/skywalking.png&#34;&gt;
        &lt;/a&gt;
      &lt;/td&gt;
      &lt;td align=&#34;center&#34; valign=&#34;middle&#34;&gt;
        &lt;a href=&#34;https://github.com/apache/dubbo-go&#34; target=&#34;_blank&#34;&gt;
          &lt;img width=&#34;222px&#34;  src=&#34;https://brpc.incubator.apache.org/images/community/dubbo-go.png&#34;&gt;
        &lt;/a&gt;
      &lt;/td&gt;
      &lt;td align=&#34;center&#34; valign=&#34;middle&#34;&gt;
        &lt;a href=&#34;https://sentinelguard.io/&#34; target=&#34;_blank&#34;&gt;
          &lt;img width=&#34;222px&#34;  src=&#34;https://brpc.incubator.apache.org/images/community/sentinel.png&#34;&gt;
        &lt;/a&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;&lt;/tr&gt;
    &lt;tr&gt;
      &lt;td align=&#34;center&#34; valign=&#34;middle&#34;&gt;
        &lt;a href=&#34;https://www.sofastack.tech/&#34; target=&#34;_blank&#34;&gt;
          &lt;img width=&#34;222px&#34;  src=&#34;https://brpc.incubator.apache.org/images/community/sofastack.png&#34;&gt;
        &lt;/a&gt;
      &lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;
&lt;/div&gt;
&lt;h2 id=&#34;committer-列表&#34;&gt;Committer 列表&lt;/h2&gt;
&lt;p&gt;MOSN 社区认证的 Committer 如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;姓名&lt;/th&gt;
&lt;th&gt;GitHub&lt;/th&gt;
&lt;th&gt;公司&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;田阳&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/taoyuanyuan&#34;&gt;taoyuanyuan&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;蚂蚁集团&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;王发康&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/wangfakang&#34;&gt;wangfakang&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;蚂蚁集团&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;白鹏&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/nejisama&#34;&gt;nejisama&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;蚂蚁集团&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;曹春晖&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/cch123&#34;&gt;cch123&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;蚂蚁集团&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;孙福泽&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/peacocktrain&#34;&gt;peacocktrain&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Boss 直聘&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;陈鹏&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/champly&#34;&gt;champly&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;多点生活&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;姚昌宇&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/trainyao&#34;&gt;trainyao&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;有米科技&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;邓茜&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/dengqian&#34;&gt;dengqian&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;阿里云&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;黄润豪&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/glyasai&#34;&gt;glyasai&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;好雨科技&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;郑泽超&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/CodingSinger&#34;&gt;CodingSinger&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;字节跳动&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Committer 是具有 MOSN 仓库写权限的个人，标准如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;能够在长时间内做持续贡献 issue、PR 的个人；&lt;/li&gt;
&lt;li&gt;参与 issue 列表的维护及重要功能的讨论；&lt;/li&gt;
&lt;li&gt;积极参与 code review 和社区会议；&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;meetup&#34;&gt;Meetup&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/mosn/meetup&#34;&gt;https://github.com/mosn/meetup&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;教程&#34;&gt;教程&lt;/h2&gt;
&lt;p&gt;MOSN 提供线上教程，见&lt;a href=&#34;https://brpc.incubator.apache.org/docs/tutorial/&#34;&gt;教程页面&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;加入社区&#34;&gt;加入社区&lt;/h2&gt;
&lt;p&gt;使用钉钉扫描下面的二维码加入 MOSN 用户群。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;MOSN 用户交流钉钉群二维码&#34; src=&#34;https://github.com/mosn/assets/blob/master/qrcode.jpg?raw=true&#34;  width=&#34;128px&#34; /&gt;&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
