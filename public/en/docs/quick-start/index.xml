<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MOSN â€“ Get started</title>
    <link>https://https://mosn.io/en/docs/quick-start/</link>
    <description>Recent content in Get started on MOSN</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 20 Jan 2020 00:00:00 +0000</lastBuildDate>
    
	  <atom:link href="https://https://mosn.io/en/docs/quick-start/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Quick start</title>
      <link>https://https://mosn.io/en/docs/quick-start/proxy/</link>
      <pubDate>Mon, 20 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://https://mosn.io/en/docs/quick-start/proxy/</guid>
      <description>
        
        
        &lt;p&gt;This topic is intended to help developers who are new to MOSN projects quickly set up a development environment for building, testing, packaging, and running the sample code.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: MOSN is developed based on Go 1.12.7 and relies on dep for dependency management.&lt;/p&gt;
&lt;h2 id=&#34;prepare-the-running-environment&#34;&gt;Prepare the running environment&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;If you want to run MOSN with docker, &lt;a href=&#34;https://docs.docker.com/install/&#34;&gt;install docker&lt;/a&gt; first.&lt;/li&gt;
&lt;li&gt;If you are using a local machine, set up a Unix-like environment.&lt;/li&gt;
&lt;li&gt;Install the compilation environment of Go.&lt;/li&gt;
&lt;li&gt;Install dep. For details, see the &lt;a href=&#34;https://golang.github.io/dep/docs/installation.html&#34;&gt;official installation document of deb&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;obtain-the-code&#34;&gt;Obtain the code&lt;/h2&gt;
&lt;p&gt;Code for MOSN projects is hosted at &lt;a href=&#34;https://github.com/mosn/mosn&#34;&gt;Github&lt;/a&gt;. Run the following command to obtain the code.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;go get -u mosn.io/mosn
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If the go get command fails, manually create a project.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Access the src directory under GOPATH.&lt;/span&gt;
&lt;span style=&#34;color:#204a87&#34;&gt;cd&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;$GOPATH&lt;/span&gt;/src
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Create the mosn.io directory.&lt;/span&gt;
mkdir -p mosn.io
&lt;span style=&#34;color:#204a87&#34;&gt;cd&lt;/span&gt; mosn.io

&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Clone MOSN code.&lt;/span&gt;
git clone git@github.com:mosn/mosn.git
&lt;span style=&#34;color:#204a87&#34;&gt;cd&lt;/span&gt; mosn
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The MOSN source code is finally saved to &lt;code&gt;$GOPATH/src/mosn.io/mosn.&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;import-the-mosn-source-code-into-the-ide&#34;&gt;Import the MOSN source code into the IDE&lt;/h2&gt;
&lt;p&gt;Import &lt;code&gt;$GOPATH/src/mosn.io/mosn&lt;/code&gt; into your preferred Go IDE (Goland is recommended).&lt;/p&gt;
&lt;h2 id=&#34;compile-the-code&#34;&gt;Compile the code&lt;/h2&gt;
&lt;p&gt;In the project&amp;rsquo;s root directory, compile the binary file of MOSN by running the following commands, depending on your machine type and the environment in which you want to execute the binary file.&lt;/p&gt;
&lt;h3 id=&#34;compilation-with-a-docker-image&#34;&gt;Compilation with a docker image&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;make build // Compile a Linux 64-bit executable binary file.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;local-compilation&#34;&gt;Local compilation&lt;/h3&gt;
&lt;p&gt;Run the following command to compile a local executable binary file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;make build-local
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Cross-compile a Linux 64-bit executable binary file on a non-Linux machine.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;make build-linux64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Cross-compile a Linux 32-bit executable binary file on a non-Linux machine.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;make build-linux32
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Find the compiled binary file in &lt;code&gt;build/bundles/${version}/binary&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;create-an-rpm-package&#34;&gt;Create an RPM package&lt;/h2&gt;
&lt;p&gt;Run the following command in the project&amp;rsquo;s root directory to create an RPM package.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;make rpm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Find the package in &lt;code&gt;build/bundles/${version}/rpm&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;create-a-docker-image&#34;&gt;Create a docker image&lt;/h2&gt;
&lt;p&gt;Run the following command to create a docker image.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;make image
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;run-tests&#34;&gt;Run tests&lt;/h2&gt;
&lt;p&gt;Run the following command in the project&amp;rsquo;s root directory to start the unit test.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;make unit-test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run the following command in the project&amp;rsquo;s root directory to start the integration test (which takes some time).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;make integrate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;start-mosn-from-the-configuration-file&#34;&gt;Start MOSN from the configuration file&lt;/h2&gt;
&lt;p&gt;Run the following command to start MOSN from the configuration file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;./mosn start -c &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;$CONFIG_FILE&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;run-mosn-samples&#34;&gt;Run MOSN samples&lt;/h2&gt;
&lt;p&gt;Refer to the example projects in the &lt;code&gt;examples&lt;/code&gt; directory to &lt;a href=&#34;../../samples&#34;&gt;run samples&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;build-the-service-mesh-platform-with-mosn&#34;&gt;Build the Service Mesh platform with MOSN&lt;/h2&gt;
&lt;p&gt;For more information, see the &lt;a href=&#34;../istio&#34;&gt;Istio integration&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Use MOSN as an Istio data plane</title>
      <link>https://https://mosn.io/en/docs/quick-start/istio/</link>
      <pubDate>Mon, 20 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://https://mosn.io/en/docs/quick-start/istio/</guid>
      <description>
        
        
        

&lt;div class=&#34;pageinfo pageinfo-primary&#34;&gt;
&lt;p&gt;MOSN succeeded in the Bookinfo test for Istio 1.1.4. For more information about the support from the latest version of Istio, see &lt;a href=&#34;https://github.com/mosn/mosn/issues/933&#34;&gt;Issue #933&lt;/a&gt;.
&lt;code&gt;Note: After the MOSN 0.14.0 or later can supports xDS, And tested pass all the sample of bookinfo in istio 1.5.2, here is an [MOSN with Istio](https://katacoda.com/mosn/courses/istio/mosn-with-istio) tutorial.&lt;/code&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;This topic covers the following content:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Relationship between MOSN and Istio&lt;/li&gt;
&lt;li&gt;Preparations&lt;/li&gt;
&lt;li&gt;Istio deployment with source code&lt;/li&gt;
&lt;li&gt;Bookinfo test&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;relationship-between-mosn-and-istio&#34;&gt;Relationship between MOSN and Istio&lt;/h2&gt;
&lt;p&gt;As described in the &lt;a href=&#34;../../overview&#34;&gt;MOSN overview&lt;/a&gt;, MOSN is a service mesh data plane proxy developed in Golang.&lt;/p&gt;
&lt;p&gt;The following figure shows the operating principle of MOSN in Istio.&lt;/p&gt;
&lt;div align=center&gt;&lt;img src=&#34;mosn-with-service-mesh.png&#34; width = &#34;450&#34; height = &#34;400&#34; alt=&#34;MOSN overview&#34; /&gt;&lt;/div&gt;
&lt;h2 id=&#34;preparations&#34;&gt;Preparations&lt;/h2&gt;
&lt;p&gt;The operating system described in this topic is macOS. You can install the software versions for your OS, too.&lt;/p&gt;
&lt;h3 id=&#34;install-hyperkit&#34;&gt;Install hyperkit&lt;/h3&gt;
&lt;p&gt;Install &lt;a href=&#34;https://store.docker.com/editions/community/docker-ce-desktop-mac&#34;&gt;docker-for-mac&lt;/a&gt; and then &lt;a href=&#34;https://github.com/kubernetes/minikube/blob/master/docs/drivers.md&#34;&gt;install drivers&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;install-docker&#34;&gt;Install docker&lt;/h4&gt;
&lt;p&gt;Download the software package or run the following command to install it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ brew cask install docker
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;install-drivers&#34;&gt;Install drivers&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ curl -LO https://storage.googleapis.com/minikube/releases/latest/docker-machine-driver-hyperkit &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; chmod +x docker-machine-driver-hyperkit &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo mv docker-machine-driver-hyperkit /usr/local/bin/ &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo chown root:wheel /usr/local/bin/docker-machine-driver-hyperkit &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo chmod u+s /usr/local/bin/docker-machine-driver-hyperkit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;install-minikube-or-a-commercial-kubernetes-cluster&#34;&gt;Install Minikube (or a commercial Kubernetes cluster)&lt;/h3&gt;
&lt;p&gt;We recommend that you use Minikube v0.28 or later versions. For more information, go to &lt;a href=&#34;https://github.com/kubernetes/minikube&#34;&gt;https://github.com/kubernetes/minikube&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ brew cask install minikube
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;start-minikube&#34;&gt;Start Minikube&lt;/h3&gt;
&lt;p&gt;The pilot requires a memory space of at least 2 GB. Therefore, you can allocate resources to Minikube by adding parameters upon startup. If you do not have sufficient resources on your machine, we recommend that you use the commercial Kubernetes cluster.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ minikube start --memory&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;8192&lt;/span&gt; --cpus&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;4&lt;/span&gt; --kubernetes-version&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;v1.15.0 --vm-driver&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;hyperkit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Create an Istio namespace&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ kubectl create namespace istio-system
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;install-the-kubectl-command-line-tool&#34;&gt;Install the kubectl command-line tool&lt;/h3&gt;
&lt;p&gt;kubectl is a command line interface for executing commands against Kubernetes clusters. For details about the installation of kubectl, go to &lt;a href=&#34;https://kubernetes.io/docs/tasks/tools/install-kubectl&#34;&gt;https://kubernetes.io/docs/tasks/tools/install-kubectl&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ brew install kubernetes-cli
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;install-helm&#34;&gt;Install Helm&lt;/h3&gt;
&lt;p&gt;Helm is a package management tool of Kubernetes. For details about the installation of Helm, go to &lt;a href=&#34;https://docs.helm.sh/using_helm/#installing-helm&#34;&gt;https://docs.helm.sh/using_helm/#installing-helm&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ brew install kubernetes-helm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;istio-deployment-with-source-code&#34;&gt;Istio deployment with source code&lt;/h2&gt;


&lt;div class=&#34;pageinfo pageinfo-primary&#34;&gt;
&lt;p&gt;SOFAMesh is now directly developed based on Istio to contribute to the Istio community. Development through the fork method is not supported. It will be directly supported by Istio in the future. MOSN succeeded in the Bookinfo test for Istio 1.1.4. For more information about the support from the latest version of Istio, see &lt;a href=&#34;https://github.com/mosn/mosn/issues/933&#34;&gt;Issue #933&lt;/a&gt;.&lt;/p&gt;

&lt;/div&gt;

&lt;h3 id=&#34;download-the-sofamesh-source-code&#34;&gt;Download the SOFAMesh source code&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ git clone https://github.com/sofastack/sofa-mesh.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;install-sofamesh-with-helm&#34;&gt;Install SOFAMesh with Helm&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Run &lt;code&gt;helm template&lt;/code&gt; to install SOFAMesh.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Switch to the directory that stores the Istio source code and then install the Istio CRD and other components with Helm.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ &lt;span style=&#34;color:#204a87&#34;&gt;cd&lt;/span&gt; istio
$ helm template install/kubernetes/helm/istio-init --name istio-init --namespace istio-system &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; kubectl apply -f -
$ helm template install/kubernetes/helm/istio --name istio --namespace istio-system &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; kubectl apply -f -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;verify-the-installation&#34;&gt;Verify the installation&lt;/h3&gt;
&lt;p&gt;If all pods in the &lt;code&gt;istio-system&lt;/code&gt; namespace are running, the deployment succeeds.
If you only need to run Bookinfo, running three pods, pilot, injector, and citadel, will suffice your need.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl get pods -n istio-system
NAME                                    Â  Â READY Â  Â STATUS  Â RESTARTS   Â AGE
istio-citadel-6579c78cd9-w57lr              1/1     Running   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;          5m
istio-egressgateway-7649f76df4-zs8kw        1/1     Running   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;          5m
istio-galley-c77876cb6-nhczq                1/1     Running   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;          5m
istio-ingressgateway-5c9c8565d9-d972t       1/1     Running   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;          5m
istio-pilot-7485f9fb4b-xsvtm                1/1     Running   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;          5m
istio-policy-5766bc84b9-p2wfj               1/1     Running   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;          5m
istio-sidecar-injector-7f5f586bc7-2sdx6     1/1     Running   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;          5m
istio-statsd-prom-bridge-7f44bb5ddb-stcf6   1/1     Running   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;          5m
istio-telemetry-55ff8c77f4-q8d8q            1/1     Running   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;          5m
prometheus-84bd4b9796-nq8lg                 1/1     Running   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;          5m
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;uninstall&#34;&gt;Uninstall&lt;/h3&gt;
&lt;p&gt;Uninstall SOFAMesh.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ helm template install/kubernetes/helm/istio --name istio --namespace istio-system &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; kubectl delete -f -
$ kubectl delete namespace istio-system
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;bookinfo-test&#34;&gt;Bookinfo test&lt;/h2&gt;
&lt;p&gt;Bookinfo is a book app. It provides four basic services:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Product Page: The product page is developed in python. It displays all book information and calls the Reviews and Details services.&lt;/li&gt;
&lt;li&gt;Reviews: The review service is developed in java. It displays book reviews and calls the Ratings service.&lt;/li&gt;
&lt;li&gt;Ratings: The rating service is developed in nodejs.&lt;/li&gt;
&lt;li&gt;Details: The book details is developed in ruby.&lt;/li&gt;
&lt;/ul&gt;
&lt;div align=center&gt;&lt;img src=&#34;bookinfo.png&#34; width = &#34;550&#34; height = &#34;400&#34; alt=&#34;bookinfo&#34; /&gt;&lt;/div&gt;
&lt;h3 id=&#34;deploy-bookinfo-and-inject-mosn&#34;&gt;Deploy Bookinfo and inject MOSN&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;For details, go to &lt;a href=&#34;https://istio.io/docs/examples/bookinfo/&#34;&gt;https://istio.io/docs/examples/bookinfo/&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Inject MOSN&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl label namespace default istio-injection&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;enabled
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Deploy Bookinfo&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl apply -f samples/bookinfo/platform/kube/bookinfo.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Verify whether the deployment succeeds&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl get services
NAME                       CLUSTER-IP   EXTERNAL-IP   PORT&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;S&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;              AGE
details                    10.0.0.31    &amp;lt;none&amp;gt;        9080/TCP             6m
kubernetes                 10.0.0.1     &amp;lt;none&amp;gt;        443/TCP              7d
productpage                10.0.0.120   &amp;lt;none&amp;gt;        9080/TCP             6m
ratings                    10.0.0.15    &amp;lt;none&amp;gt;        9080/TCP             6m
reviews                    10.0.0.170   &amp;lt;none&amp;gt;        9080/TCP             6m
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Wait until all pods are running&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl get pods
NAME                                        READY     STATUS    RESTARTS   AGE
details-v1-1520924117-48z17                 2/2       Running   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;          6m
productpage-v1-560495357-jk1lz              2/2       Running   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;          6m
ratings-v1-734492171-rnr5l                  2/2       Running   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;          6m
reviews-v1-874083890-f0qf0                  2/2       Running   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;          6m
reviews-v2-1343845940-b34q5                 2/2       Running   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;          6m
reviews-v3-1813607990-8ch52                 2/2       Running   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;          6m
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;access-bookinfo-services&#34;&gt;Access Bookinfo services&lt;/h3&gt;
&lt;p&gt;Enable the gateway mode.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl apply -f samples/bookinfo/networking/bookinfo-gateway.yaml
$ kubectl get gateway        // Check whether the gateway is running.
NAME               AGE
bookinfo-gateway   24m
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Set GATEWAY_URL. For details, go to &lt;a href=&#34;https://istio.io/docs/tasks/traffic-management/ingress/ingress-control/#determining-the-ingress-ip-and-ports&#34;&gt;https://istio.io/docs/tasks/traffic-management/ingress/ingress-control/#determining-the-ingress-ip-and-ports&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ &lt;span style=&#34;color:#204a87&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;INGRESS_PORT&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;$(&lt;/span&gt;kubectl -n istio-system get service istio-ingressgateway -o &lt;span style=&#34;color:#000&#34;&gt;jsonpath&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;{.spec.ports[?(@.name==&amp;#34;http2&amp;#34;)].nodePort}&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;)&lt;/span&gt;
$ &lt;span style=&#34;color:#204a87&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;SECURE_INGRESS_PORT&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;$(&lt;/span&gt;kubectl -n istio-system get service istio-ingressgateway -o &lt;span style=&#34;color:#000&#34;&gt;jsonpath&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;{.spec.ports[?(@.name==&amp;#34;https&amp;#34;)].nodePort}&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;)&lt;/span&gt;
$ &lt;span style=&#34;color:#204a87&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;INGRESS_HOST&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;$(&lt;/span&gt;minikube ip&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;)&lt;/span&gt;
$ &lt;span style=&#34;color:#204a87&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;GATEWAY_URL&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;$INGRESS_HOST&lt;/span&gt;:&lt;span style=&#34;color:#000&#34;&gt;$INGRESS_PORT&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Check whether the gateway takes effect.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ curl -o /dev/null -s -w &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;%{http_code}\n&amp;#34;&lt;/span&gt;  http://&lt;span style=&#34;color:#000&#34;&gt;$GATEWAY_URL&lt;/span&gt;/productpage   // &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;200&lt;/span&gt; indicates a success. 
&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;200&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;View the page&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Go to &lt;code&gt;http://$GATEWAY_URL/productpage&lt;/code&gt; (replace $GATEWAY_URL with your address). The Bookinfo page is shown as follows after you refresh it. Three versions of Book Reviews are available.
The three versions will be displayed in turn when you refresh the page. For more information, go to samples/bookinfo/platform/kube/bookinfo.yaml.&lt;/p&gt;
&lt;p&gt;Page v1&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;v1.png&#34; alt=&#34;v1&#34;&gt;&lt;/p&gt;
&lt;p&gt;Page v2&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;v2.png&#34; alt=&#34;v2&#34;&gt;&lt;/p&gt;
&lt;p&gt;Page v3&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;v3.png&#34; alt=&#34;v3&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;verify-routing-by-version-in-mosn&#34;&gt;Verify routing by version in MOSN&lt;/h3&gt;
&lt;p&gt;Create a series of destination rules for Bookinfo services.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl apply -f samples/bookinfo/networking/destination-rule-all.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Specify access to only v1 of the Book Reviews service.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl apply -f samples/bookinfo/networking/virtual-service-all-v1.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Go to &lt;code&gt;http://$GATEWAY_URL/productpage&lt;/code&gt;. You will find that book reviews are now fixed to be displayed on page v1.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;v1.png&#34; alt=&#34;v1&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;verify-routing-by-weight-in-mosn&#34;&gt;Verify routing by weight in MOSN&lt;/h3&gt;
&lt;p&gt;Allocate 50% of the traffic to v1 and v3 each.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl apply -f samples/bookinfo/networking/virtual-service-reviews-50-v3.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Go to &lt;code&gt;http://$GATEWAY_URL/productpage&lt;/code&gt;. You will find that page v1 and page v3 are displayed with a possibility of 50% each.&lt;/p&gt;
&lt;h3 id=&#34;verify-routing-by-specific-header-in-mosn&#34;&gt;Verify routing by specific header in MOSN&lt;/h3&gt;
&lt;p&gt;The Bookinfo page provides a login entry in the upper-right corner. After you log in, your request will carry the end-user custom field, the value of which is the user name. MOSN supports routing by the value of this header. For example, route user Jason to v2 and others to v1. (The username and password are both jason. For the reason of using this user account, check the corresponding YAML file).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl apply -f samples/bookinfo/networking/virtual-service-reviews-test-v2.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When you go to &lt;code&gt;http://$GATEWAY_URL/productpage&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;Page v2 will be displayed if you log in as Jason.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;login.png&#34; alt=&#34;Login&#34;&gt;&lt;/p&gt;
&lt;p&gt;Page v1 will be displayed if you log in as other users.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;v1.png&#34; alt=&#34;v1&#34;&gt;&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
