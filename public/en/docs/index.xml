<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>bRPC – Docs</title>
    <link>https://brpc.incubator.apache.org/en/docs/</link>
    <description>Recent content in Docs on bRPC</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://brpc.incubator.apache.org/en/docs/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: bRPC overview</title>
      <link>https://brpc.incubator.apache.org/en/docs/overview/</link>
      <pubDate>Thu, 12 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://brpc.incubator.apache.org/en/docs/overview/</guid>
      <description>
        
        
        &lt;h1 id=&#34;what-is-rpc&#34;&gt;What is RPC?&lt;/h1&gt;
&lt;p&gt;Most machines on internet communicate with each other via &lt;a href=&#34;https://en.wikipedia.org/wiki/Internet_protocol_suite&#34;&gt;TCP/IP&lt;/a&gt;. However, TCP/IP only guarantees reliable data transmissions. We need to abstract more to build services:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What is the format of data transmission? Different machines and networks may have different byte-orders, directly sending in-memory data is not suitable. Fields in the data are added, modified or removed gradually, how do newer services talk with older services?&lt;/li&gt;
&lt;li&gt;Can TCP connection be reused for multiple requests to reduce overhead? Can multiple requests be sent through one TCP connection simultaneously?&lt;/li&gt;
&lt;li&gt;How to talk with a cluster with many machines?&lt;/li&gt;
&lt;li&gt;What should I do when the connection is broken? What if the server does not respond?&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Remote_procedure_call&#34;&gt;RPC&lt;/a&gt; addresses the above issues by abstracting network communications as &amp;ldquo;clients accessing functions on servers&amp;rdquo;: client sends a request to server, wait until server receives -&amp;gt; processes -&amp;gt; responds to the request, then do actions according to the result.
&lt;img src=&#34;../images/rpc.png&#34; alt=&#34;rpc.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s see how the issues are solved.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RPC needs serialization which is done by &lt;a href=&#34;https://github.com/google/protobuf&#34;&gt;protobuf&lt;/a&gt; pretty well. Users fill requests in format of protobuf::Message, do RPC, and fetch results from responses in protobuf::Message. protobuf has good forward and backward compatibility for users to change fields and build services incrementally. For http services, &lt;a href=&#34;http://www.json.org/&#34;&gt;json&lt;/a&gt; is used for serialization extensively.&lt;/li&gt;
&lt;li&gt;Establishment and re-using of connections is transparent to users, but users can make choices like &lt;a href=&#34;client.md#connection-type&#34;&gt;different connection types&lt;/a&gt;: short, pooled, single.&lt;/li&gt;
&lt;li&gt;Machines are discovered by a Naming Service, which can be implemented by &lt;a href=&#34;https://en.wikipedia.org/wiki/Domain_Name_System&#34;&gt;DNS&lt;/a&gt;, &lt;a href=&#34;https://zookeeper.apache.org/&#34;&gt;ZooKeeper&lt;/a&gt; or &lt;a href=&#34;https://github.com/coreos/etcd&#34;&gt;etcd&lt;/a&gt;. Inside Baidu, we use BNS (Baidu Naming Service). brpc provides &lt;a href=&#34;client.md#naming-service&#34;&gt;&amp;ldquo;list://&amp;rdquo; and &amp;ldquo;file://&amp;quot;&lt;/a&gt; as well. Users specify load balancing algorithms to choose one machine for each request from all machines, including: round-robin, randomized, &lt;a href=&#34;../cn/consistent_hashing.md&#34;&gt;consistent-hashing&lt;/a&gt;(murmurhash3 or md5) and &lt;a href=&#34;../cn/lalb.md&#34;&gt;locality-aware&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;RPC retries when the connection is broken. When server does not respond within the given time, client fails with a timeout error.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;where-can-i-use-rpc&#34;&gt;Where can I use RPC?&lt;/h1&gt;
&lt;p&gt;Almost all network communications.&lt;/p&gt;
&lt;p&gt;RPC can&amp;rsquo;t do everything surely, otherwise we don&amp;rsquo;t need the layer of TCP/IP. But in most network communications, RPC meets requirements and isolates the underlying details.&lt;/p&gt;
&lt;p&gt;Common doubts on RPC:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;My data is binary and large, using protobuf will be slow. First, this is possibly a wrong feeling and you will have to test it and prove it with &lt;a href=&#34;../cn/cpu_profiler.md&#34;&gt;profilers&lt;/a&gt;. Second, many protocols support carrying binary data along with protobuf requests and bypass the serialization.&lt;/li&gt;
&lt;li&gt;I&amp;rsquo;m sending streaming data which can&amp;rsquo;t be processed by RPC. Actually many protocols in RPC can handle streaming data, including &lt;a href=&#34;http_client.md#progressively-download&#34;&gt;ProgressiveReader in http&lt;/a&gt;, streams in h2, &lt;a href=&#34;streaming_rpc.md&#34;&gt;streaming rpc&lt;/a&gt;, and RTMP which is a specialized streaming protocol.&lt;/li&gt;
&lt;li&gt;I don&amp;rsquo;t need replies. With some inductions, we know that in your scenario requests can be dropped at any stage because the client is always unaware of the situation. Are you really sure this is acceptable? Even if you don&amp;rsquo;t need the reply, we recommend sending back small-sized replies, which are unlikely to be performance bottlenecks and will probably provide valuable clues when debugging complex bugs.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;what-is-brpcimageslogopng&#34;&gt;What is &lt;img src=&#34;../images/logo.png&#34; alt=&#34;brpc&#34;&gt;?&lt;/h1&gt;
&lt;p&gt;An industrial-grade RPC framework used throughout &lt;a href=&#34;http://ir.baidu.com/phoenix.zhtml?c=188488&amp;amp;p=irol-irhome&#34;&gt;Baidu&lt;/a&gt;, with 1,000,000+ instances(not counting clients) and thousands kinds of services, called &amp;ldquo;&lt;strong&gt;baidu-rpc&lt;/strong&gt;&amp;rdquo; inside Baidu. Only C++ implementation is opensourced right now.&lt;/p&gt;
&lt;p&gt;You can use it to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Build a server that can talk in multiple protocols (&lt;strong&gt;on same port&lt;/strong&gt;), or access all sorts of services
&lt;ul&gt;
&lt;li&gt;restful http/https, &lt;a href=&#34;https://http2.github.io/http2-spec&#34;&gt;h2&lt;/a&gt;/&lt;a href=&#34;https://grpc.io&#34;&gt;gRPC&lt;/a&gt;. using http/h2 in brpc is much more friendly than &lt;a href=&#34;https://curl.haxx.se/libcurl/&#34;&gt;libcurl&lt;/a&gt;. Access protobuf-based protocols with HTTP/h2+json, probably from another language.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;redis_client.md&#34;&gt;redis&lt;/a&gt; and &lt;a href=&#34;memcache_client.md&#34;&gt;memcached&lt;/a&gt;, thread-safe, more friendly and performant than the official clients&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/brpc/brpc/blob/master/src/brpc/rtmp.h&#34;&gt;rtmp&lt;/a&gt;/&lt;a href=&#34;https://en.wikipedia.org/wiki/Flash_Video&#34;&gt;flv&lt;/a&gt;/&lt;a href=&#34;https://en.wikipedia.org/wiki/HTTP_Live_Streaming&#34;&gt;hls&lt;/a&gt;, for building &lt;a href=&#34;https://github.com/brpc/media-server&#34;&gt;streaming services&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;hadoop_rpc (may be opensourced)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Remote_direct_memory_access&#34;&gt;rdma&lt;/a&gt; support (will be opensourced)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;thrift.md&#34;&gt;thrift&lt;/a&gt; support,  thread-safe, more friendly and performant than the official clients.&lt;/li&gt;
&lt;li&gt;all sorts of protocols used in Baidu: &lt;a href=&#34;../cn/baidu_std.md&#34;&gt;baidu_std&lt;/a&gt;, &lt;a href=&#34;streaming_rpc.md&#34;&gt;streaming_rpc&lt;/a&gt;, hulu_pbrpc, &lt;a href=&#34;https://github.com/baidu/sofa-pbrpc&#34;&gt;sofa_pbrpc&lt;/a&gt;, nova_pbrpc, public_pbrpc, ubrpc, and nshead-based ones.&lt;/li&gt;
&lt;li&gt;Build &lt;a href=&#34;https://en.wikipedia.org/wiki/High_availability&#34;&gt;HA&lt;/a&gt; distributed services using an industrial-grade implementation of &lt;a href=&#34;https://raft.github.io&#34;&gt;RAFT consensus algorithm&lt;/a&gt; which is opensourced at &lt;a href=&#34;https://github.com/brpc/braft&#34;&gt;braft&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Servers can handle requests &lt;a href=&#34;server.md&#34;&gt;synchronously&lt;/a&gt; or &lt;a href=&#34;server.md#asynchronous-service&#34;&gt;asynchronously&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Clients can access servers &lt;a href=&#34;client.md#synchronus-call&#34;&gt;synchronously&lt;/a&gt;, &lt;a href=&#34;client.md#asynchronous-call&#34;&gt;asynchronously&lt;/a&gt;, &lt;a href=&#34;client.md#semi-synchronous-call&#34;&gt;semi-synchronously&lt;/a&gt;, or use &lt;a href=&#34;combo_channel.md&#34;&gt;combo channels&lt;/a&gt; to simplify sharded or parallel accesses declaratively.&lt;/li&gt;
&lt;li&gt;Debug services &lt;a href=&#34;builtin_service.md&#34;&gt;via http&lt;/a&gt;, and run  &lt;a href=&#34;../cn/cpu_profiler.md&#34;&gt;cpu&lt;/a&gt;, &lt;a href=&#34;../cn/heap_profiler.md&#34;&gt;heap&lt;/a&gt; and &lt;a href=&#34;../cn/contention_profiler.md&#34;&gt;contention&lt;/a&gt; profilers.&lt;/li&gt;
&lt;li&gt;Get &lt;a href=&#34;#better-latency-and-throughput&#34;&gt;better latency and throughput&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;new_protocol.md&#34;&gt;Extend brpc&lt;/a&gt; with the protocols used in your organization quickly, or customize components, including &lt;a href=&#34;../cn/load_balancing.md#%E5%91%BD%E5%90%8D%E6%9C%8D%E5%8A%A1&#34;&gt;naming services&lt;/a&gt; (dns, zk, etcd), &lt;a href=&#34;../cn/load_balancing.md#%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1&#34;&gt;load balancers&lt;/a&gt; (rr, random, consistent hashing)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;advantages-of-brpc&#34;&gt;Advantages of brpc&lt;/h1&gt;
&lt;h3 id=&#34;more-friendly-api&#34;&gt;More friendly API&lt;/h3&gt;
&lt;p&gt;Only 3 (major) user headers: &lt;a href=&#34;https://github.com/brpc/brpc/blob/master/src/brpc/server.h&#34;&gt;Server&lt;/a&gt;, &lt;a href=&#34;https://github.com/brpc/brpc/blob/master/src/brpc/channel.h&#34;&gt;Channel&lt;/a&gt;, &lt;a href=&#34;https://github.com/brpc/brpc/blob/master/src/brpc/controller.h&#34;&gt;Controller&lt;/a&gt;, corresponding to server-side, client-side and parameter-set respectively. You don&amp;rsquo;t have to worry about &amp;ldquo;How to initialize XXXManager&amp;rdquo;, &amp;ldquo;How to layer all these components together&amp;rdquo;,  &amp;ldquo;What&amp;rsquo;s the relationship between XXXController and XXXContext&amp;rdquo;. All you need to do is simple:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Build service? include &lt;a href=&#34;https://github.com/brpc/brpc/blob/master/src/brpc/server.h&#34;&gt;brpc/server.h&lt;/a&gt; and follow the comments or &lt;a href=&#34;https://github.com/brpc/brpc/blob/master/example/echo_c++/server.cpp&#34;&gt;examples&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Access service? include &lt;a href=&#34;https://github.com/brpc/brpc/blob/master/src/brpc/channel.h&#34;&gt;brpc/channel.h&lt;/a&gt; and follow the comments or &lt;a href=&#34;https://github.com/brpc/brpc/blob/master/example/echo_c++/client.cpp&#34;&gt;examples&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tweak parameters? Checkout &lt;a href=&#34;https://github.com/brpc/brpc/blob/master/src/brpc/controller.h&#34;&gt;brpc/controller.h&lt;/a&gt;. Note that the class is shared by server and channel. Methods are separated into 3 parts: client-side, server-side and both-side.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We tried to make simple things simple. Take naming service as an example. In older RPC implementations you may need to copy a pile of obscure code to make it work, however, in brpc accessing BNS is expressed as &lt;code&gt;Init(&amp;quot;bns://node-name&amp;quot;, ...)&lt;/code&gt;, DNS is &lt;code&gt;Init(&amp;quot;http://domain-name&amp;quot;, ...)&lt;/code&gt; and local machine list is &lt;code&gt;Init(&amp;quot;file:///home/work/server.list&amp;quot;, ...)&lt;/code&gt;. Without any explanation, you know what it means.&lt;/p&gt;
&lt;h3 id=&#34;make-services-more-reliable&#34;&gt;Make services more reliable&lt;/h3&gt;
&lt;p&gt;brpc is extensively used in Baidu:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;map-reduce service &amp;amp; table storages&lt;/li&gt;
&lt;li&gt;high-performance computing &amp;amp; model training&lt;/li&gt;
&lt;li&gt;all sorts of indexing &amp;amp; ranking servers&lt;/li&gt;
&lt;li&gt;….&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It&amp;rsquo;s been proven.&lt;/p&gt;
&lt;p&gt;brpc pays special attentions to development and maintenance efficency, you can &lt;a href=&#34;builtin_service.md&#34;&gt;view internal status of servers&lt;/a&gt; in web browser or with curl, analyze &lt;a href=&#34;../cn/cpu_profiler.md&#34;&gt;cpu hotspots&lt;/a&gt;, &lt;a href=&#34;../cn/heap_profiler.md&#34;&gt;heap allocations&lt;/a&gt; and &lt;a href=&#34;../cn/contention_profiler.md&#34;&gt;lock contentions&lt;/a&gt; of online services, measure stats by &lt;a href=&#34;bvar.md&#34;&gt;bvar&lt;/a&gt; which is viewable in &lt;a href=&#34;vars.md&#34;&gt;/vars&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;better-latency-and-throughput&#34;&gt;Better latency and throughput&lt;/h3&gt;
&lt;p&gt;Although almost all RPC implementations claim that they&amp;rsquo;re &amp;ldquo;high-performant&amp;rdquo;, the numbers are probably just numbers. Being really high-performant in different scenarios is difficult. To unify communication infra inside Baidu, brpc goes much deeper at performance than other implementations.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reading and parsing requests from different clients is fully parallelized and users don&amp;rsquo;t need to distinguish between &amp;ldquo;IO-threads&amp;rdquo; and &amp;ldquo;Processing-threads&amp;rdquo;. Other implementations probably have &amp;ldquo;IO-threads&amp;rdquo; and &amp;ldquo;Processing-threads&amp;rdquo; and hash file descriptors(fd) into IO-threads. When a IO-thread handles one of its fds, other fds in the thread can&amp;rsquo;t be handled. If a message is large, other fds are significantly delayed. Although different IO-threads run in parallel, you won&amp;rsquo;t have many IO-threads since they don&amp;rsquo;t have too much to do generally except reading/parsing from fds. If you have 10 IO-threads, one fd may affect 10% of all fds, which is unacceptable to industrial online services (requiring 99.99% availability). The problem will be worse when fds are distributed unevenly accross IO-threads (unfortunately common), or the service is multi-tenancy (common in cloud services). In brpc, reading from different fds is parallelized and even processing different messages from one fd is parallelized as well. Parsing a large message does not block other messages from the same fd, not to mention other fds. More details can be found &lt;a href=&#34;io.md#receiving-messages&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Writing into one fd and multiple fds is highly concurrent. When multiple threads write into the same fd (common for multiplexed connections), the first thread directly writes in-place and other threads submit their write requests in &lt;a href=&#34;https://en.wikipedia.org/wiki/Non-blocking_algorithm#Wait-freedom&#34;&gt;wait-free&lt;/a&gt; manner. One fd can be written into 5,000,000 16-byte messages per second by a couple of highly-contended threads. More details can be found &lt;a href=&#34;io.md#sending-messages&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Minimal locks. High-QPS services can utilize all CPU power on the machine. For example, &lt;a href=&#34;../cn/memory_management.md&#34;&gt;creating bthreads&lt;/a&gt; for processing requests, &lt;a href=&#34;../cn/timer_keeping.md&#34;&gt;setting up timeout&lt;/a&gt;, &lt;a href=&#34;../cn/bthread_id.md&#34;&gt;finding RPC contexts&lt;/a&gt; according to response, &lt;a href=&#34;bvar.md&#34;&gt;recording performance counters&lt;/a&gt; are all highly concurrent. Users see very few contentions (via &lt;a href=&#34;../cn/contention_profiler.md&#34;&gt;contention profiler&lt;/a&gt;) caused by RPC framework even if the service runs at 500,000+ QPS.&lt;/li&gt;
&lt;li&gt;Server adjusts thread number according to load. Traditional implementations set number of threads according to latency to avoid limiting the throughput. brpc creates a new &lt;a href=&#34;../cn/bthread.md&#34;&gt;bthread&lt;/a&gt; for each request and ends the bthread when the request is done, which automatically adjusts thread number according to load.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Check &lt;a href=&#34;../cn/benchmark.md&#34;&gt;benchmark&lt;/a&gt; for a comparison between brpc and other implementations.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Documentation contribution guide</title>
      <link>https://brpc.incubator.apache.org/en/docs/contribute/github/</link>
      <pubDate>Tue, 11 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://brpc.incubator.apache.org/en/docs/contribute/github/</guid>
      <description>
        
        
        &lt;p&gt;To contribute to MOSN&amp;rsquo;s documentation, you need to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a &lt;a href=&#34;https://github.com/&#34;&gt;GitHub account&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This documentation is published in compliance with &lt;a href=&#34;https://github.com/apache/incubator-brpc-website/blob/master/LICENSE&#34;&gt;Apache 2.0&lt;/a&gt; license.&lt;/p&gt;
&lt;h2 id=&#34;how-to&#34;&gt;How to contribute&lt;/h2&gt;
&lt;p&gt;You can contribute to MOSN&amp;rsquo;s documentation in the following three ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To edit an existing topic, open the page with your browser, click &lt;strong&gt;Edit This Page&lt;/strong&gt; on the upper-right side, edit the GitHub page that appears, and submit the modifications.&lt;/li&gt;
&lt;li&gt;To make general edits, follow the procedure in &lt;a href=&#34;#add&#34;&gt;Add content&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;To review an existing pull request (PR), follow the procedure in the &lt;a href=&#34;#review&#34;&gt;Review PRs&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PRs are immediately displayed on &lt;a href=&#34;https://mosn.io&#34;&gt;https://mosn.io&lt;/a&gt; after being merged.&lt;/p&gt;
&lt;h2 id=&#34;add&#34;&gt;Add content&lt;/h2&gt;
&lt;p&gt;To add content, you need to create a repository branch and submit a PR to the mater repository from the branch. Perform the following steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Access the MOSN repository at GitHub &lt;a href=&#34;https://github.com/apache/incubator-brpc-website&#34;&gt;https://github.com/apache/incubator-brpc-website&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;Fork&lt;/strong&gt; in the upper-right corner to fork a copy of the MOSN repository to your GitHub account.&lt;/li&gt;
&lt;li&gt;Clone your fork to your computer and make modifications as required.&lt;/li&gt;
&lt;li&gt;Upload the modifications to your fork repository when you are ready to submit them to us.&lt;/li&gt;
&lt;li&gt;Go to the index page of your fork repository and click &lt;strong&gt;New pull request&lt;/strong&gt; to submit a PR.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;review&#34;&gt;Review PRs&lt;/h2&gt;
&lt;p&gt;You can directly comment on a PR. To add detailed comments, perform the following steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Add detailed comments to the PR. If possible, directly add comments to the corresponding files and file lines.&lt;/li&gt;
&lt;li&gt;Provide suggestions to the PR authors and contributors in the comments as appropriate.&lt;/li&gt;
&lt;li&gt;Publish and share your comments with the PR contributors.&lt;/li&gt;
&lt;li&gt;Merge the PR after publishing the comments and reaching an agreement with the contributors.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;preview&#34;&gt;Preview PRs&lt;/h2&gt;
&lt;p&gt;You can preview your PR online or run Hugo on your computer to access the MOSN website for real-time preview.&lt;/p&gt;
&lt;h3 id=&#34;online-preview&#34;&gt;Online preview&lt;/h3&gt;
&lt;p&gt;After you submit a PR, a series of check items are displayed on the corresponding PR page at GitHub. The &lt;code&gt;deploy/netlify&lt;/code&gt; step generates the preview page on the MOSN official website. You can click &lt;strong&gt;Details&lt;/strong&gt; to go to the preview page. A preview page is constructed each time you submit the same PR.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;website-preview.png&#34; alt=&#34;Preview&#34;&gt;&lt;/p&gt;
&lt;p&gt;This temporary website ensures normal page display after the PR is merged.&lt;/p&gt;
&lt;h3 id=&#34;local-preview&#34;&gt;Local preview&lt;/h3&gt;
&lt;p&gt;In addition to online preview, you can also preview your PR with &lt;a href=&#34;https://github.com/gohugoio/hugo&#34;&gt;Hugo&lt;/a&gt; (the v0.55.5 extended version is recommended). You can run &lt;code&gt;hugo server&lt;/code&gt; at the root directory of your code repository and then access &lt;code&gt;http://localhost:1313&lt;/code&gt; with your browser.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Core concepts of MOSN</title>
      <link>https://brpc.incubator.apache.org/en/docs/concept/core-concept/</link>
      <pubDate>Sun, 20 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://brpc.incubator.apache.org/en/docs/concept/core-concept/</guid>
      <description>
        
        
        &lt;p&gt;Modular Open Smart Network (MOSN) mainly comprises the following modules. It provides basic network proxy features, and cloud-native services such as &lt;a href=&#34;https://www.servicemesher.com/blog/envoy-xds-protocol/&#34;&gt;xDS&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;mosn-modules-arch.jpg&#34; alt=&#34;Modular diagram of MOSN&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;xds-udpa-support&#34;&gt;xDS (UDPA) support&lt;/h2&gt;
&lt;p&gt;MOSN supports cloud-native &lt;a href=&#34;https://github.com/cncf/udpa&#34;&gt;Universal Data Plane APIs (UDPAs)&lt;/a&gt; and fully dynamic configuration updates.&lt;/p&gt;
&lt;p&gt;xDS is a key concept proposed by &lt;a href=&#34;https://www.envoyproxy.io/&#34;&gt;Envoy&lt;/a&gt;. It represents a set of discovery services:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CDS: Cluster Discovery Service&lt;/li&gt;
&lt;li&gt;EDS: Endpoint Discovery Service&lt;/li&gt;
&lt;li&gt;SDS: Secret Discovery Service&lt;/li&gt;
&lt;li&gt;RDS: Route Discovery Service&lt;/li&gt;
&lt;li&gt;LDS: Listener Discovery Service&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Envoy configurations are dynamically updated through xDS requests. The Aggregated Discovery Service (ADS) determines the xDS update order through aggregation.&lt;/p&gt;
&lt;h2 id=&#34;business-support&#34;&gt;Business support&lt;/h2&gt;
&lt;p&gt;As an underlying high-performance security network proxy, MOSN supports a variety of business scenarios, such as remote procedure calls (RPCs), messaging, gateways.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;mosn-core.jpg&#34; alt=&#34;MOSN business support&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;io-model&#34;&gt;I/O model&lt;/h2&gt;
&lt;p&gt;MOSN supports the following two I/O models:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Golang&amp;rsquo;s classic netpoll model&lt;/strong&gt;: a goroutine-per-connection model applicable when the number of connections is not a bottleneck.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;RawEpoll model&lt;/strong&gt;: also known as the Reactor model, is an I/O multiplexing + non-blocking I/O model. The RawEpoll model is more suitable for scenarios with a large number of persistent connections at the access layer and gateways.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;netpoll-model&#34;&gt;netpoll model&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;netpoll-model.jpg&#34; alt=&#34;MOSN netpoll model&#34;&gt;&lt;/p&gt;
&lt;p&gt;The MOSN netpoll model is shown in the above figure. The number of goroutines is proportional to that of connections. A large number of connections indicates a large number of goroutines and high overheads, including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Stack memory overhead&lt;/li&gt;
&lt;li&gt;Read buffer overhead&lt;/li&gt;
&lt;li&gt;Runtime scheduling overhead&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;rawepoll-model&#34;&gt;RawEpoll model&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;raw-epoll-model.jpg&#34; alt=&#34;MOSN RawEpoll model&#34;&gt;&lt;/p&gt;
&lt;p&gt;The RawEpoll model is shown in the above figure. After a readable event is detected by epoll, a goroutine is allocated from the goroutine pool to process the event. The procedure is as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;After a connection is established, MOSN registers a oneshot readable event listener with epoll. To avoid conflict with the runtime netpoll, no goroutine is allowed to call conn.read at this time.&lt;/li&gt;
&lt;li&gt;After a readable event is detected, MOSN selects a goroutine from the goroutine pool to handle the event. No subsequent readable event will be triggered for the file descriptor (FD) again because the oneshot mode is used.&lt;/li&gt;
&lt;li&gt;During request handling, the goroutine scheduling process is consistent with that of the classic netpool model.&lt;/li&gt;
&lt;li&gt;After the request handling is complete, the goroutine is returned to the goroutine pool, and the FD is added back to RawEpoll.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;goroutine-model&#34;&gt;Goroutine model&lt;/h2&gt;
&lt;p&gt;The MOSN goroutine model is shown in the following figure.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;mosn-goroutine-model.jpg&#34; alt=&#34;MSON goroutine model&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;One TCP connection corresponds to one read goroutine, for receiving packets and parsing protocols.&lt;/li&gt;
&lt;li&gt;One request corresponds to one worker goroutine, for handling business and executing the proxy and write logic.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the conventional model, one TCP connection corresponds to two goroutines: read and write. We have replaced the separate write goroutine with a workerpool goroutine, to reduce scheduling latency and memory usage.&lt;/p&gt;
&lt;h2 id=&#34;capability-extension&#34;&gt;Capability extension&lt;/h2&gt;
&lt;h3 id=&#34;protocol-extension&#34;&gt;Protocol extension&lt;/h3&gt;
&lt;p&gt;MOSN implements a protocol plugin mechanism by using a unified codec engine and core codec APIs, providing support for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SOFARPC&lt;/li&gt;
&lt;li&gt;HTTP1.x/HTTP2.0&lt;/li&gt;
&lt;li&gt;Dubbo&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;networkfilter-extension&#34;&gt;NetworkFilter extension&lt;/h3&gt;
&lt;p&gt;MOSN implements a NetworkFilter extension mechanism by using a NetworkFilter registration mechanism and unified packet read/write filter APIs, providing support for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TCP proxy&lt;/li&gt;
&lt;li&gt;Fault injection&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;streamfilter-extension&#34;&gt;StreamFilter extension&lt;/h3&gt;
&lt;p&gt;MOSN implements a StreamFilter extension mechanism by using a StreamFilter registration mechanism and unified stream send/receive filter APIs, providing support for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Traffic mirroring&lt;/li&gt;
&lt;li&gt;RBAC authentication&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;tls-connections&#34;&gt;TLS connections&lt;/h2&gt;
&lt;p&gt;Based on tests, the Go-native TLS, after a lot of assembly optimization, has improved its performance to 80% of that of NGINX (OpenSSL). go-boring (which calls BoringSSL by using CGO) shows no advantage, because it is restricted by the performance of CGO. Therefore, we chose the Go-native TLS at last. We believe that the Go Runtime team will continue the optimization. We have some optimization plans, too.&lt;/p&gt;
&lt;p&gt;The following figure shows the comparison between the test results of Go and NGINX.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;mosn-tls-1.png&#34; alt=&#34;TLS performance comparison between and Go and NGINX&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Go is not optimized much for RSA encryption, and go-boring (CGO) performs twice as good as Go in this regard.&lt;/li&gt;
&lt;li&gt;Go has been assembly-optimized for ECDSA P256, and it performs better than go-boring in this respect.&lt;/li&gt;
&lt;li&gt;Go performs 20 times as good as go-boring in terms of AES-GCM symmetric encryption.&lt;/li&gt;
&lt;li&gt;Go has also been assembly-optimized for hashing algorithms such as SHA and MD.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To ensure security compliance in financial scenarios, we also support development based on Chinese encryption algorithms, which is not supported by Go Runtime. Currently, the performance of Chinese encryption algorithms is only 50% of that of the international standard AES-GCM encryption algorithms. We have some plans to improve their performance. Please stay tuned.&lt;/p&gt;
&lt;p&gt;Performance test results for Chinese encryption algorithms are shown in the following figure.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;mosn-tls-2.png&#34; alt=&#34;Performance test results for Chinese cryptographic algorithms&#34;&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Getting started</title>
      <link>https://brpc.incubator.apache.org/en/docs/getting_started/</link>
      <pubDate>Thu, 12 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://brpc.incubator.apache.org/en/docs/getting_started/</guid>
      <description>
        
        
        &lt;h1 id=&#34;build&#34;&gt;BUILD&lt;/h1&gt;
&lt;p&gt;brpc prefers static linkages of deps, so that they don&amp;rsquo;t have to be installed on every machine running the app.&lt;/p&gt;
&lt;p&gt;brpc depends on following packages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/gflags/gflags&#34;&gt;gflags&lt;/a&gt;: Extensively used to define global options.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/google/protobuf&#34;&gt;protobuf&lt;/a&gt;: Serializations of messages, interfaces of services.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/google/leveldb&#34;&gt;leveldb&lt;/a&gt;: Required by &lt;a href=&#34;rpcz.md&#34;&gt;/rpcz&lt;/a&gt; to record RPCs for tracing.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;supported-environment&#34;&gt;Supported Environment&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#ubuntulinuxmintwsl&#34;&gt;Ubuntu/LinuxMint/WSL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#fedoracentos&#34;&gt;Fedora/CentOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#linux-with-self-built-deps&#34;&gt;Linux with self-built deps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#macos&#34;&gt;MacOS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ubuntulinuxmintwsl&#34;&gt;Ubuntu/LinuxMint/WSL&lt;/h2&gt;
&lt;h3 id=&#34;prepare-deps&#34;&gt;Prepare deps&lt;/h3&gt;
&lt;p&gt;Install common deps, &lt;a href=&#34;https://github.com/gflags/gflags&#34;&gt;gflags&lt;/a&gt;, &lt;a href=&#34;https://github.com/google/protobuf&#34;&gt;protobuf&lt;/a&gt;, &lt;a href=&#34;https://github.com/google/leveldb&#34;&gt;leveldb&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sudo apt-get install -y git g++ make libssl-dev libgflags-dev libprotobuf-dev libprotoc-dev protobuf-compiler libleveldb-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you need to statically link leveldb:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sudo apt-get install -y libsnappy-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you need to enable cpu/heap profilers in examples:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sudo apt-get install -y libgoogle-perftools-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you need to run tests, install and compile libgtest-dev (which is not compiled yet):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sudo apt-get install -y cmake libgtest-dev &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;cd&lt;/span&gt; /usr/src/gtest &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo cmake . &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo make &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo mv libgtest* /usr/lib/ &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;cd&lt;/span&gt; -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The directory of gtest source code may be changed, try &lt;code&gt;/usr/src/googletest/googletest&lt;/code&gt; if &lt;code&gt;/usr/src/gtest&lt;/code&gt; is not there.&lt;/p&gt;
&lt;h3 id=&#34;compile-brpc-with-config_brpcsh&#34;&gt;Compile brpc with config_brpc.sh&lt;/h3&gt;
&lt;p&gt;git clone brpc, cd into the repo and run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ sh config_brpc.sh --headers&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;/usr/include --libs&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;/usr/lib
$ make
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To change compiler to clang, add &lt;code&gt;--cxx=clang++ --cc=clang&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To not link debugging symbols, add &lt;code&gt;--nodebugsymbols&lt;/code&gt; and compiled binaries will be much smaller.&lt;/p&gt;
&lt;p&gt;To use brpc with glog, add &lt;code&gt;--with-glog&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To enable &lt;a href=&#34;../en/thrift.md&#34;&gt;thrift support&lt;/a&gt;, install thrift first and add &lt;code&gt;--with-thrift&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Run example&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ &lt;span style=&#34;color:#204a87&#34;&gt;cd&lt;/span&gt; example/echo_c++
$ make
$ ./echo_server &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;
$ ./echo_client
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Examples link brpc statically, if you need to link the shared version, &lt;code&gt;make clean&lt;/code&gt; and &lt;code&gt;LINK_SO=1 make&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Run tests&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ &lt;span style=&#34;color:#204a87&#34;&gt;cd&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;test&lt;/span&gt;
$ make
$ sh run_tests.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;compile-brpc-with-cmake&#34;&gt;Compile brpc with cmake&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;cmake -B build &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; cmake --build build -j6
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To help VSCode or Emacs(LSP) to understand code correctly, add &lt;code&gt;-DCMAKE_EXPORT_COMPILE_COMMANDS=ON&lt;/code&gt; to generate &lt;code&gt;compile_commands.json&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To change compiler to clang, overwrite environment variable &lt;code&gt;CC&lt;/code&gt; and &lt;code&gt;CXX&lt;/code&gt; to &lt;code&gt;clang&lt;/code&gt; and &lt;code&gt;clang++&lt;/code&gt; respectively.&lt;/p&gt;
&lt;p&gt;To not link debugging symbols, remove &lt;code&gt;build/CMakeCache.txt&lt;/code&gt; and cmake with &lt;code&gt;-DWITH_DEBUG_SYMBOLS=OFF&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To use brpc with glog, cmake with &lt;code&gt;-DWITH_GLOG=ON&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To enable &lt;a href=&#34;../en/thrift.md&#34;&gt;thrift support&lt;/a&gt;, install thrift first and cmake with &lt;code&gt;-DWITH_THRIFT=ON&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Run example with cmake&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ &lt;span style=&#34;color:#204a87&#34;&gt;cd&lt;/span&gt; example/echo_c++
$ cmake -B build &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; cmake --build build -j4
$ ./echo_server &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;
$ ./echo_client
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Examples link brpc statically, if you need to link the shared version, remove &lt;code&gt;CMakeCache.txt&lt;/code&gt; and cmake with &lt;code&gt;-DLINK_SO=ON&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Run tests&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ mkdir build &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;cd&lt;/span&gt; build &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; cmake -DBUILD_UNIT_TESTS&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;ON .. &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; make &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; make &lt;span style=&#34;color:#204a87&#34;&gt;test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;fedoracentos&#34;&gt;Fedora/CentOS&lt;/h2&gt;
&lt;h3 id=&#34;prepare-deps-1&#34;&gt;Prepare deps&lt;/h3&gt;
&lt;p&gt;CentOS needs to install EPEL generally otherwise many packages are not available by default.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sudo yum install epel-release
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Install common deps:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sudo yum install git gcc-c++ make openssl-devel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Install &lt;a href=&#34;https://github.com/gflags/gflags&#34;&gt;gflags&lt;/a&gt;, &lt;a href=&#34;https://github.com/google/protobuf&#34;&gt;protobuf&lt;/a&gt;, &lt;a href=&#34;https://github.com/google/leveldb&#34;&gt;leveldb&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sudo yum install gflags-devel protobuf-devel protobuf-compiler leveldb-devel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you need to enable cpu/heap profilers in examples:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sudo yum install gperftools-devel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you need to run tests, install and compile gtest-devel (which is not compiled yet):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sudo yum install gtest-devel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;compile-brpc-with-config_brpcsh-1&#34;&gt;Compile brpc with config_brpc.sh&lt;/h3&gt;
&lt;p&gt;git clone brpc, cd into the repo and run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ sh config_brpc.sh --headers&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;/usr/include --libs&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;/usr/lib64
$ make
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To change compiler to clang, add &lt;code&gt;--cxx=clang++ --cc=clang&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To not link debugging symbols, add &lt;code&gt;--nodebugsymbols&lt;/code&gt; and compiled binaries will be much smaller.&lt;/p&gt;
&lt;p&gt;To use brpc with glog, add &lt;code&gt;--with-glog&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To enable &lt;a href=&#34;../en/thrift.md&#34;&gt;thrift support&lt;/a&gt;, install thrift first and add &lt;code&gt;--with-thrift&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Run example&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ &lt;span style=&#34;color:#204a87&#34;&gt;cd&lt;/span&gt; example/echo_c++
$ make
$ ./echo_server &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;
$ ./echo_client
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Examples link brpc statically, if you need to link the shared version, &lt;code&gt;make clean&lt;/code&gt; and &lt;code&gt;LINK_SO=1 make&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Run tests&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ &lt;span style=&#34;color:#204a87&#34;&gt;cd&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;test&lt;/span&gt;
$ make
$ sh run_tests.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;compile-brpc-with-cmake-1&#34;&gt;Compile brpc with cmake&lt;/h3&gt;
&lt;p&gt;Same with &lt;a href=&#34;#compile-brpc-with-cmake&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;linux-with-self-built-deps&#34;&gt;Linux with self-built deps&lt;/h2&gt;
&lt;h3 id=&#34;prepare-deps-2&#34;&gt;Prepare deps&lt;/h3&gt;
&lt;p&gt;brpc builds itself to both static and shared libs by default, so it needs static and shared libs of deps to be built as well.&lt;/p&gt;
&lt;p&gt;Take &lt;a href=&#34;https://github.com/gflags/gflags&#34;&gt;gflags&lt;/a&gt; as example, which does not build shared lib by default, you need to pass options to &lt;code&gt;cmake&lt;/code&gt; to change the behavior:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ cmake . -DBUILD_SHARED_LIBS&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt; -DBUILD_STATIC_LIBS&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;
$ make
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;compile-brpc&#34;&gt;Compile brpc&lt;/h3&gt;
&lt;p&gt;Keep on with the gflags example, let &lt;code&gt;../gflags_dev&lt;/code&gt; be where gflags is cloned.&lt;/p&gt;
&lt;p&gt;git clone brpc. cd into the repo and run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ sh config_brpc.sh --headers&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;../gflags_dev /usr/include&amp;#34;&lt;/span&gt; --libs&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;../gflags_dev /usr/lib64&amp;#34;&lt;/span&gt;
$ make
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here we pass multiple paths to &lt;code&gt;--headers&lt;/code&gt; and &lt;code&gt;--libs&lt;/code&gt; to make the script search for multiple places. You can also group all deps and brpc into one directory, then pass the directory to &amp;ndash;headers/&amp;ndash;libs which actually search all subdirectories recursively and will find necessary files.&lt;/p&gt;
&lt;p&gt;To change compiler to clang, add &lt;code&gt;--cxx=clang++ --cc=clang&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To not link debugging symbols, add &lt;code&gt;--nodebugsymbols&lt;/code&gt; and compiled binaries will be much smaller.&lt;/p&gt;
&lt;p&gt;To use brpc with glog, add &lt;code&gt;--with-glog&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To enable &lt;a href=&#34;../en/thrift.md&#34;&gt;thrift support&lt;/a&gt;, install thrift first and add &lt;code&gt;--with-thrift&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ ls my_dev
gflags_dev protobuf_dev leveldb_dev brpc_dev
$ &lt;span style=&#34;color:#204a87&#34;&gt;cd&lt;/span&gt; brpc_dev
$ sh config_brpc.sh --headers&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;.. --libs&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;..
$ make
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;compile-brpc-with-cmake-2&#34;&gt;Compile brpc with cmake&lt;/h3&gt;
&lt;p&gt;Same with &lt;a href=&#34;#compile-brpc-with-cmake&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;macos&#34;&gt;MacOS&lt;/h2&gt;
&lt;p&gt;Note: In the same running environment, the performance of the current Mac version is about 2.5 times worse than the Linux version. If your service is performance-critical, do not use MacOS as your production environment.&lt;/p&gt;
&lt;h3 id=&#34;prepare-deps-3&#34;&gt;Prepare deps&lt;/h3&gt;
&lt;p&gt;Install common deps:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;brew install openssl git gnu-getopt coreutils
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Install &lt;a href=&#34;https://github.com/gflags/gflags&#34;&gt;gflags&lt;/a&gt;, &lt;a href=&#34;https://github.com/google/protobuf&#34;&gt;protobuf&lt;/a&gt;, &lt;a href=&#34;https://github.com/google/leveldb&#34;&gt;leveldb&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;brew install gflags protobuf leveldb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you need to enable cpu/heap profilers in examples:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;brew install gperftools
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you need to run tests, download and compile googletest (which is not compiled yet):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;git clone https://github.com/google/googletest -b release-1.10.0 &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;cd&lt;/span&gt; googletest/googletest &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; mkdir build &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;cd&lt;/span&gt; build &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; cmake -DCMAKE_CXX_FLAGS&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;-std=c++11&amp;#34;&lt;/span&gt; .. &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; make
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After the compilation, copy include/ and lib/ into /usr/local/include and /usr/local/lib respectively to expose gtest to all apps&lt;/p&gt;
&lt;h3 id=&#34;compile-brpc-with-config_brpcsh-2&#34;&gt;Compile brpc with config_brpc.sh&lt;/h3&gt;
&lt;p&gt;git clone brpc, cd into the repo and run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ sh config_brpc.sh --headers&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;/usr/local/include --libs&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;/usr/local/lib --cc&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;clang --cxx&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;clang++
$ make
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To not link debugging symbols, add &lt;code&gt;--nodebugsymbols&lt;/code&gt; and compiled binaries will be much smaller.&lt;/p&gt;
&lt;p&gt;To use brpc with glog, add &lt;code&gt;--with-glog&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To enable &lt;a href=&#34;../en/thrift.md&#34;&gt;thrift support&lt;/a&gt;, install thrift first and add &lt;code&gt;--with-thrift&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Run example&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ &lt;span style=&#34;color:#204a87&#34;&gt;cd&lt;/span&gt; example/echo_c++
$ make
$ ./echo_server &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;
$ ./echo_client
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Examples link brpc statically, if you need to link the shared version, &lt;code&gt;make clean&lt;/code&gt; and &lt;code&gt;LINK_SO=1 make&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Run tests&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ &lt;span style=&#34;color:#204a87&#34;&gt;cd&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;test&lt;/span&gt;
$ make
$ sh run_tests.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;compile-brpc-with-cmake-3&#34;&gt;Compile brpc with cmake&lt;/h3&gt;
&lt;p&gt;Same with &lt;a href=&#34;#compile-brpc-with-cmake&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;supported-deps&#34;&gt;Supported deps&lt;/h1&gt;
&lt;h2 id=&#34;gcc-48-71&#34;&gt;GCC: 4.8-7.1&lt;/h2&gt;
&lt;p&gt;c++11 is turned on by default to remove dependencies on boost (atomic).&lt;/p&gt;
&lt;p&gt;The over-aligned issues in GCC7 is suppressed temporarily now.&lt;/p&gt;
&lt;p&gt;Using other versions of gcc may generate warnings, contact us to fix.&lt;/p&gt;
&lt;p&gt;Adding &lt;code&gt;-D__const__=&lt;/code&gt; to cxxflags in your makefiles is a must to avoid &lt;a href=&#34;thread_local.md&#34;&gt;errno issue in gcc4+&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;clang-35-40&#34;&gt;Clang: 3.5-4.0&lt;/h2&gt;
&lt;p&gt;no known issues.&lt;/p&gt;
&lt;h2 id=&#34;glibc-212-225&#34;&gt;glibc: 2.12-2.25&lt;/h2&gt;
&lt;p&gt;no known issues.&lt;/p&gt;
&lt;h2 id=&#34;protobuf-24&#34;&gt;protobuf: 2.4+&lt;/h2&gt;
&lt;p&gt;Be compatible with pb 3.x and pb 2.x with the same file:
Don&amp;rsquo;t use new types in proto3 and start the proto file with &lt;code&gt;syntax=&amp;quot;proto2&amp;quot;;&lt;/code&gt;
&lt;a href=&#34;https://github.com/brpc/brpc/blob/master/tools/add_syntax_equal_proto2_to_all.sh&#34;&gt;tools/add_syntax_equal_proto2_to_all.sh&lt;/a&gt;can add &lt;code&gt;syntax=&amp;quot;proto2&amp;quot;&lt;/code&gt; to all proto files without it.&lt;/p&gt;
&lt;p&gt;Arena in pb 3.x is not supported yet.&lt;/p&gt;
&lt;h2 id=&#34;gflags-20-221&#34;&gt;gflags: 2.0-2.2.1&lt;/h2&gt;
&lt;p&gt;no known issues.&lt;/p&gt;
&lt;h2 id=&#34;openssl-097-11&#34;&gt;openssl: 0.97-1.1&lt;/h2&gt;
&lt;p&gt;required by https.&lt;/p&gt;
&lt;h2 id=&#34;tcmalloc-17-25&#34;&gt;tcmalloc: 1.7-2.5&lt;/h2&gt;
&lt;p&gt;brpc does &lt;strong&gt;not&lt;/strong&gt; link &lt;a href=&#34;http://goog-perftools.sourceforge.net/doc/tcmalloc.html&#34;&gt;tcmalloc&lt;/a&gt; by default. Users link tcmalloc on-demand.&lt;/p&gt;
&lt;p&gt;Comparing to ptmalloc embedded in glibc, tcmalloc often improves performance. However different versions of tcmalloc may behave really differently. For example, tcmalloc 2.1 may make multi-threaded examples in brpc perform significantly worse(due to a spinlock in tcmalloc) than the one using tcmalloc 1.7 and 2.5. Even different minor versions may differ. When you program behave unexpectedly, remove tcmalloc or try another version.&lt;/p&gt;
&lt;p&gt;Code compiled with gcc 4.8.2 and linked to a tcmalloc compiled with earlier GCC may crash or deadlock before main(), E.g:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../images/tcmalloc_stuck.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;When you meet the issue, compile tcmalloc with the same GCC.&lt;/p&gt;
&lt;p&gt;Another common issue with tcmalloc is that it does not return memory to system as early as ptmalloc. So when there&amp;rsquo;s an invalid memory access, the program may not crash directly, instead it crashes at a unrelated place, or even not crash. When you program has weird memory issues, try removing tcmalloc.&lt;/p&gt;
&lt;p&gt;If you want to use &lt;a href=&#34;cpu_profiler.md&#34;&gt;cpu profiler&lt;/a&gt; or &lt;a href=&#34;heap_profiler.md&#34;&gt;heap profiler&lt;/a&gt;, do link &lt;code&gt;libtcmalloc_and_profiler.a&lt;/code&gt;. These two profilers are based on tcmalloc.&lt;a href=&#34;contention_profiler.md&#34;&gt;contention profiler&lt;/a&gt; does not require tcmalloc.&lt;/p&gt;
&lt;p&gt;When you remove tcmalloc, not only remove the linkage with tcmalloc but also the macro &lt;code&gt;-DBRPC_ENABLE_CPU_PROFILER&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;glog-33&#34;&gt;glog: 3.3+&lt;/h2&gt;
&lt;p&gt;brpc implements a default &lt;a href=&#34;../../src/butil/logging.h&#34;&gt;logging utility&lt;/a&gt; which conflicts with glog. To replace this with glog, add &lt;em&gt;&amp;ndash;with-glog&lt;/em&gt; to config_brpc.sh or add &lt;code&gt;-DWITH_GLOG=ON&lt;/code&gt; to cmake.&lt;/p&gt;
&lt;h2 id=&#34;valgrind-38&#34;&gt;valgrind: 3.8+&lt;/h2&gt;
&lt;p&gt;brpc detects valgrind automatically (and registers stacks of bthread). Older valgrind(say 3.2) is not supported.&lt;/p&gt;
&lt;h2 id=&#34;thrift-093-0110&#34;&gt;thrift: 0.9.3-0.11.0&lt;/h2&gt;
&lt;p&gt;no known issues.&lt;/p&gt;
&lt;h1 id=&#34;track-instances&#34;&gt;Track instances&lt;/h1&gt;
&lt;p&gt;We provide a program to help you to track and monitor all brpc instances. Just run &lt;a href=&#34;https://github.com/brpc/brpc/tree/master/tools/trackme_server/&#34;&gt;trackme_server&lt;/a&gt; somewhere and launch need-to-be-tracked instances with -trackme_server=SERVER. The trackme_server will receive pings from instances periodically and print logs when it does. You can aggregate instance addresses from the log and call builtin services of the instances for further information.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Performance benchmark</title>
      <link>https://brpc.incubator.apache.org/en/docs/benchmark/</link>
      <pubDate>Thu, 12 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://brpc.incubator.apache.org/en/docs/benchmark/</guid>
      <description>
        
        
        &lt;h1 id=&#34;序言&#34;&gt;序言&lt;/h1&gt;
&lt;p&gt;在多核的前提下，性能和线程是紧密联系在一起的。线程间的跳转对高频IO操作的性能有决定性作用: 一次跳转意味着至少3-20微秒的延时，由于每个核心的L1 cache独立（我们的cpu L2 cache也是独立的），随之而来是大量的cache miss，一些变量的读取、写入延时会从纳秒级上升几百倍至微秒级: 等待cpu把对应的cacheline同步过来。有时这带来了一个出乎意料的结果，当每次的处理都很简短时，一个多线程程序未必比一个单线程程序更快。因为前者可能在每次付出了大的切换代价后只做了一点点“正事”，而后者在不停地做“正事”。不过单线程也是有代价的，它工作良好的前提是“正事”都很快，否则一旦某次变慢就使后续的所有“正事”都被延迟了。在一些处理时间普遍较短的程序中，使用（多个不相交的）单线程能最大程度地”做正事“，由于每个请求的处理时间确定，延时表现也很稳定，各种http server正是这样。但我们的检索服务要做的事情可就复杂多了，有大量的后端服务需要访问，广泛存在的长尾请求使每次处理的时间无法确定，排序策略也越来越复杂。如果还是使用（多个不相交的）单线程的话，一次难以预计的性能抖动，或是一个大请求可能导致后续一堆请求被延迟。&lt;/p&gt;
&lt;p&gt;为了避免请求之间相互影响，请求级的线程跳转是brpc必须付出的代价，我们能做的是使&lt;a href=&#34;io.md#the-full-picture&#34;&gt;线程跳转最优化&lt;/a&gt;。不过，对服务的性能测试还不能很好地体现这点。测试中的处理往往极为简单，使得线程切换的影响空前巨大，通过控制多线程和单线程处理的比例，我们可以把一个测试服务的qps从100万到500万操纵自如（同机），这损伤了性能测试结果的可信度。要知道，真实的服务并不是在累加一个数字，或者echo一个字符串，一个qps几百万的echo程序没有指导意义。鉴于此，在发起性能测试一年后（15年底），在brpc又经历了1200多次改动后，我们需要review所有的测试，加强其中的线程因素，以获得对真实场景有明确意义的结果。具体来说:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;请求不应等长，要有长尾。这能考察RPC能否让请求并发，否则一个慢请求会影响大量后续请求。&lt;/li&gt;
&lt;li&gt;要有多级server的场景。server内用client访问下游server，这能考察server和client的综合表现。&lt;/li&gt;
&lt;li&gt;要有一个client访问多个server的场景。这能考察负载均衡是否足够并发，真实场景中很少一个client只访问一个server。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们希望这套测试场景对其他服务的性能测试有借鉴意义。&lt;/p&gt;
&lt;h1 id=&#34;测试目标&#34;&gt;测试目标&lt;/h1&gt;
&lt;h2 id=&#34;ub&#34;&gt;UB&lt;/h2&gt;
&lt;p&gt;百度在08年开发的RPC框架，在百度产品线广泛使用，已被brpc代替。UB的每个请求独占一个连接(连接池)，在大规模服务中每台机器都需要保持大量的连接，限制了其使用场景，像百度的分布式系统没有用UB。UB只支持nshead+mcpack协议，也没怎么考虑扩展性，所以增加新协议和新功能往往要调整大段代码，在实践中大部分人“知难而退”了。UB缺乏调试和运维接口，服务的运行状态对用户基本是黑盒，只能靠低效地打日志来追踪问题，服务出现问题时常要拉上维护者一起排查，效率很低。UB有多个变种:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ubrpc: 百度在10年基于UB开发的RPC框架，用.idl文件(类似.proto)描述数据的schema，而不是手动打包。这个RPC有被使用，但不广泛。&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;nova_pbrpc: 百度网盟团队在12年基于UB开发的RPC框架，用protobuf代替mcpack作为序列化方法，协议是nshead + user&amp;rsquo;s protobuf。&lt;/li&gt;
&lt;li&gt;public_pbrpc: 百度在13年初基于UB开发的RPC框架，用protobuf代替mcpack作为序列化方法，但协议与nova_pbrpc不同，大致是nshead + meta protobuf。meta protobuf中有个string字段包含user&amp;rsquo;s protobuf。由于用户数据要序列化两次，这个RPC的性能很差，没有被推广开来。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们以在百度网盟团队广泛使用的nova_pbrpc为UB的代表。测试时其代码为r10500。早期的UB支持CPOOL和XPOOL，分别使用&lt;a href=&#34;http://linux.die.net/man/2/select&#34;&gt;select&lt;/a&gt;和&lt;a href=&#34;http://kircher-schwanninger.de/michael/publications/lf.pdf&#34;&gt;leader-follower模型&lt;/a&gt;，后来提供了EPOLL，使用&lt;a href=&#34;http://man7.org/linux/man-pages/man7/epoll.7.html&#34;&gt;epoll&lt;/a&gt;处理多路连接。鉴于产品线大都是用EPOLL模型，我们的UB配置也使用EPOLL。UB只支持&lt;a href=&#34;client.md#%E8%BF%9E%E6%8E%A5%E6%96%B9%E5%BC%8F&#34;&gt;连接池&lt;/a&gt;，结果用“&lt;strong&gt;ubrpc_mc&lt;/strong&gt;&amp;ldquo;指代（mc代表&amp;quot;multiple
connection&amp;rdquo;）。虽然这个名称不太准确（见上文对ubrpc的介绍），但在本文的语境下，请默认ubrpc = UB。&lt;/p&gt;
&lt;h2 id=&#34;hulu-pbrpc&#34;&gt;hulu-pbrpc&lt;/h2&gt;
&lt;p&gt;百度在13年基于saber(kylin变种)和protobuf实现的RPC框架，hulu在多线程实现上有较多问题，已被brpc代替，测试时其代码为&lt;code&gt;pbrpc_2-0-15-27959_PD_BL&lt;/code&gt;。hulu-pbrpc只支持单连接，结果用“&lt;strong&gt;hulu-pbrpc&lt;/strong&gt;&amp;ldquo;指代。&lt;/p&gt;
&lt;h2 id=&#34;brpc&#34;&gt;brpc&lt;/h2&gt;
&lt;p&gt;INF在2014年底开发至今的rpc产品，支持百度内所有协议（不限于protobuf），并第一次统一了百度主要分布式系统和业务线的RPC框架。测试时代码为r31906。brpc既支持单连接也支持连接池，前者的结果用&amp;rdquo;&lt;strong&gt;baidu-rpc&lt;/strong&gt;&amp;ldquo;指代，后者用“&lt;strong&gt;baidu-rpc_mc&lt;/strong&gt;&amp;ldquo;指代。&lt;/p&gt;
&lt;h2 id=&#34;sofa-pbrpc&#34;&gt;sofa-pbrpc&lt;/h2&gt;
&lt;p&gt;百度大搜团队在13年基于boost::asio和protobuf实现的RPC框架，有多个版本，咨询相关同学后，确认ps/opensource下的和github上的较新，且会定期同步。故测试使用使用ps/opensource下的版本。测试时其代码为&lt;code&gt;sofa-pbrpc_1-0-2_BRANCH&lt;/code&gt;。sofa-pbrpc只支持单连接，结果用“&lt;strong&gt;sofa-pbrpc&lt;/strong&gt;”指代。&lt;/p&gt;
&lt;h2 id=&#34;apache-thrift&#34;&gt;apache thrift&lt;/h2&gt;
&lt;p&gt;thrift是由facebook最早在07年开发的序列化方法和rpc框架，包含独特的序列化格式和IDL，支持很多编程语言。开源后改名&lt;a href=&#34;https://thrift.apache.org/&#34;&gt;apache thrift&lt;/a&gt;，fb自己有一个&lt;a href=&#34;https://github.com/facebook/fbthrift&#34;&gt;fbthrift分支&lt;/a&gt;，我们使用的是apache thrift。测试时其代码为&lt;code&gt;thrift_0-9-1-400_PD_BL&lt;/code&gt;。thrift的缺点是: 代码看似分层清晰，client和server选择很多，但没有一个足够通用，每个server实现都只能解决很小一块场景，每个client都线程不安全，实际使用很麻烦。由于thrift没有线程安全的client，所以每个线程中都得建立一个client，使用独立的连接。在测试中thrift其实是占了其他实现的便宜: 它的client不需要处理多线程问题。thrift的结果用&amp;rdquo;&lt;strong&gt;thrift_mc&lt;/strong&gt;&amp;ldquo;指代。&lt;/p&gt;
&lt;h2 id=&#34;grpc&#34;&gt;gRPC&lt;/h2&gt;
&lt;p&gt;由google开发的rpc框架，使用http/2和protobuf 3.0，测试时其代码为&lt;a href=&#34;https://github.com/grpc/grpc/tree/release-0_11&#34;&gt;https://github.com/grpc/grpc/tree/release-0_11&lt;/a&gt;。gRPC并不是stubby，定位更像是为了推广http/2和protobuf 3.0，但鉴于很多人对它的表现很感兴趣，我们也（很麻烦地）把它加了进来。gRPC的结果用&amp;rdquo;&lt;strong&gt;grpc&lt;/strong&gt;&amp;ldquo;指代。&lt;/p&gt;
&lt;h1 id=&#34;测试方法&#34;&gt;测试方法&lt;/h1&gt;
&lt;p&gt;如序言中解释的那样，性能数字有巨大的调整空间。这里的关键在于，我们对RPC的底线要求是什么，脱离了这个底线，测试中的表现就严重偏离真实环境中的了。&lt;/p&gt;
&lt;p&gt;这个底线我们认为是&lt;strong&gt;RPC必须能处理长尾&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;在百度的环境中，这是句大白话，哪个产品线，哪个系统没有长尾呢？作为承载大部分服务的RPC框架自然得处理好长尾，减少长尾对正常请求的影响。但在实现层面，这个问题对设计的影响太大了。如果测试中没有长尾，那么RPC实现就可以假设每个请求都差不多快，这时候最优的方法是用多个线程独立地处理请求。由于没有上下文切换和cache一致性同步，程序的性能会显著高于多个线程协作时的表现。&lt;/p&gt;
&lt;p&gt;比如简单的echo程序，处理一个请求只需要200-300纳秒，单个线程可以达到300-500万的吞吐。但如果多个线程协作，即使在极其流畅的系统中，也要付出3-5微秒的上下文切换代价和1微秒的cache同步代价，这还没有考虑多个线程间的其他互斥逻辑，一般来说单个线程的吞吐很难超过10万，即使24核全部用满，吞吐也只有240万，不及一个线程。这正是以http server为典型的服务选用&lt;a href=&#34;threading_overview.md#%E5%8D%95%E7%BA%BF%E7%A8%8Breactor&#34;&gt;单线程模型&lt;/a&gt;的原因（多个线程独立运行eventloop）: 大部分http请求的处理时间是可预测的，对下游的访问也不会有任何阻塞代码。这个模型可以最大化cpu利用率，同时提供可接受的延时。&lt;/p&gt;
&lt;p&gt;多线程付出这么大的代价是为了&lt;strong&gt;隔离请求间的影响&lt;/strong&gt;。一个计算复杂或索性阻塞的过程不会影响到其他请求，1%的长尾最终只会影响到1%的性能。而多个独立的线程是保证不了这点的，一个请求进入了一个线程就等于“定了终生”，如果前面的请求慢了一下，那也只能跟着慢了。1%的长尾会影响远超1%的请求，最终表现不佳。换句话说，乍看上去多线程模型“慢”了，但在真实应用中反而会获得更好的综合性能。&lt;/p&gt;
&lt;p&gt;延时能精确地体现出长尾的干扰作用，如果普通请求的延时没有被长尾请求干扰，就说明RPC成功地隔离了请求。而QPS无法体现这点，只要CPU都在忙，即使一个正常请求进入了挤满长尾的队列而被严重延迟，最终的QPS也变化不大。为了测量长尾的干扰作用，我们在涉及到延时的测试中都增加了1%的长尾请求。&lt;/p&gt;
&lt;h1 id=&#34;开始测试&#34;&gt;开始测试&lt;/h1&gt;
&lt;h2 id=&#34;环境&#34;&gt;环境&lt;/h2&gt;
&lt;p&gt;性能测试使用的机器配置为:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单机1: CPU开超线程24核，E5-2620 @ 2.00GHz；64GB内存；OS linux 2.6.32_1-15-0-0&lt;/li&gt;
&lt;li&gt;多机1（15台+8台）: CPU均未开超线程12核，其中15台的CPU为E5-2420 @ 1.90GHz.，64GB内存，千兆网卡，无法开启多队列。其余8台为E5-2620 2.0GHz，千兆网卡，绑定多队列到前8个核。这些长期测试机器比较杂，跨了多个机房，测试中延时在1ms以上的就是这批机器。&lt;/li&gt;
&lt;li&gt;多机2（30台）: CPU未开超线程12核，E5-2620 v3 @ 2.40GHz.；96GB内存；OS linux 2.6.32_1-17-0-0；万兆网卡，绑定多队列到前8个核。这是临时借用的新机器，配置非常好，都在广州机房，延时非常短，测试中延时在几百微秒的就是这批机器。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面所有的曲线图是使用brpc开发的dashboard程序绘制的，去掉路径后可以看到和所有brpc
server一样的&lt;a href=&#34;builtin_service.md&#34;&gt;内置服务&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;配置&#34;&gt;配置&lt;/h2&gt;
&lt;p&gt;如无特殊说明，所有测试中的配置只是数量差异（线程数，请求大小，client个数etc），而不是模型差异。我们确保用户看到的qps和延时是同一个场景的不同维度，而不是无法统一的两个场景。&lt;/p&gt;
&lt;p&gt;所有RPC server都配置了24个工作线程，这些线程一般运行用户的处理逻辑。关于每种RPC的特殊说明:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UB: 配置了12个reactor线程，使用EPOOL模型。连接池限制数配置为线程个数（24）&lt;/li&gt;
&lt;li&gt;hulu-pbrpc: 额外配置了12个IO线程。这些线程会处理fd读取，请求解析等任务。hulu有个“共享队列“的配置项，默认不打开，作用是把fd静态散列到多个线程中，由于线程间不再争抢，hulu的qps会显著提高，但会明显地被长尾影响（原因见&lt;a href=&#34;#%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95&#34;&gt;测试方法&lt;/a&gt;）。考虑到大部分使用者并不会去改配置，我们也选择不打开。&lt;/li&gt;
&lt;li&gt;thrift: 额外配置了12个IO线程。这些线程会处理fd读取，请求解析等任务。thrift的client不支持多线程，每个线程得使用独立的client，连接也都是分开的。&lt;/li&gt;
&lt;li&gt;sofa-pbrpc: 按照sofa同学的要求，把io_service_pool_size配置为24，work_thread_num配置为1。大概含义是使用独立的24组线程池，每组1个worker thread。和hulu不打开“共享队列”时类似，这个配置会显著提高sofa-pbrpc的QPS，但同时使它失去了处理长尾的能力。如果你在真实产品中使用，我们不建议这个配置。（而应该用io_service_pool_size=1, work_thread_num=24)&lt;/li&gt;
&lt;li&gt;brpc: 尽管brpc的client运行在bthread中时会获得10%~20%的QPS提升和更低的延时，但测试中的client都运行统一的pthread中。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所有的RPC client都以多个线程同步方式发送，这种方法最接近于真实系统中的情况，在考察QPS时也兼顾了延时因素。&lt;/p&gt;
&lt;p&gt;一种流行的方案是client不停地往连接中写入数据看server表现，这个方法的弊端在于: server一下子能读出大量请求，不同RPC的比拼变成了“for循环执行用户代码”的比拼，而不是分发请求的效率。在真实系统中server很少能同时读到超过4个请求。这个方法也完全放弃了延时，client其实是让server陷入了雪崩时才会进入的状态，所有请求都因大量排队而超时了。&lt;/p&gt;
&lt;h2 id=&#34;同机单client单server在不同请求下的qps越高越好&#34;&gt;同机单client→单server在不同请求下的QPS（越高越好）&lt;/h2&gt;
&lt;p&gt;本测试运行在&lt;a href=&#34;#%E7%8E%AF%E5%A2%83&#34;&gt;单机1&lt;/a&gt;上。图中的数值均为用户数据的字节数，实际的请求尺寸还要包括协议头，一般会增加40字节左右。&lt;/p&gt;
&lt;p&gt;（X轴是用户数据的字节数，Y轴是对应的QPS）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../images/qps_vs_reqsize.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;以_mc结尾的曲线代表client和server保持多个连接（线程数个），在本测试中会有更好的表现。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分析&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;brpc: 当请求包小于16KB时，单连接下的吞吐超过了多连接的ubrpc_mc和thrift_mc，随着请求包变大，内核对单个连接的写入速度成为瓶颈。而多连接下的brpc则达到了测试中最高的2.3GB/s。注意: 虽然使用连接池的brpc在发送大包时吞吐更高，但也会耗费更多的CPU（UB和thrift也是这样）。下图中的单连接brpc已经可以提供800多兆的吞吐，足以打满万兆网卡，而使用的CPU可能只有多链接下的1/2(写出过程是&lt;a href=&#34;io.md#%E5%8F%91%E6%B6%88%E6%81%AF&#34;&gt;wait-free的&lt;/a&gt;)，真实系统中请优先使用单链接。&lt;/li&gt;
&lt;li&gt;thrift: 初期明显低于brpc，随着包变大超过了单连接的brpc。&lt;/li&gt;
&lt;li&gt;UB:和thrift类似的曲线，但平均要低4-5万QPS，在32K包时超过了单连接的brpc。整个过程中QPS几乎没变过。&lt;/li&gt;
&lt;li&gt;gRPC: 初期几乎与UB平行，但低1万左右，超过8K开始下降。&lt;/li&gt;
&lt;li&gt;hulu-pbrpc和sofa-pbrpc: 512字节前高于UB和gRPC，但之后就急转直下，相继垫底。这个趋势是写不够并发的迹象。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;同机单client单server在不同线程数下的qps越高越好&#34;&gt;同机单client→单server在不同线程数下的QPS（越高越好）&lt;/h2&gt;
&lt;p&gt;本测试运行在&lt;a href=&#34;#%E7%8E%AF%E5%A2%83&#34;&gt;单机1&lt;/a&gt;上。&lt;/p&gt;
&lt;p&gt;（X轴是线程数，Y轴是对应的QPS）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../images/qps_vs_threadnum.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分析&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;brpc: 随着发送线程增加，QPS在快速增加，有很好的多线程扩展性。&lt;/p&gt;
&lt;p&gt;UB和thrift: 8个线程下高于brpc，但超过8个线程后被brpc迅速超过，thrift继续“平移”，UB出现了明显下降。&lt;/p&gt;
&lt;p&gt;gRPC，hulu-pbrpc，sofa-pbrpc: 几乎重合，256个线程时相比1个线程时只有1倍的提升，多线程扩展性不佳。&lt;/p&gt;
&lt;h2 id=&#34;同机单client单server在固定qps下的延时cdfvarsmd统计和查看分位值越左越好越直越好&#34;&gt;同机单client→单server在固定QPS下的延时&lt;a href=&#34;vars.md#%E7%BB%9F%E8%AE%A1%E5%92%8C%E6%9F%A5%E7%9C%8B%E5%88%86%E4%BD%8D%E5%80%BC&#34;&gt;CDF&lt;/a&gt;（越左越好，越直越好）&lt;/h2&gt;
&lt;p&gt;本测试运行在&lt;a href=&#34;#%E7%8E%AF%E5%A2%83&#34;&gt;单机1&lt;/a&gt;上。考虑到不同RPC的处理能力，我们选择了一个较低、在不少系统中会达到的的QPS: 1万。&lt;/p&gt;
&lt;p&gt;本测试中有1%的长尾请求耗时5毫秒，长尾请求的延时不计入结果，因为我们考察的是普通请求是否被及时处理了。&lt;/p&gt;
&lt;p&gt;（X轴是延时（微秒），Y轴是小于X轴延时的请求比例）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../images/latency_cdf.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分析&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;brpc: 平均延时短，几乎没有被长尾影响。&lt;/li&gt;
&lt;li&gt;UB和thrift: 平均延时比brpc高1毫秒，受长尾影响不大。&lt;/li&gt;
&lt;li&gt;hulu-pbrpc: 走向和UB和thrift类似，但平均延时进一步增加了1毫秒。&lt;/li&gt;
&lt;li&gt;gRPC : 初期不错，到长尾区域后表现糟糕，直接有一部分请求超时了。（反复测试都是这样，像是有bug）&lt;/li&gt;
&lt;li&gt;sofa-pbrpc: 30%的普通请求（上图未显示）被长尾严重干扰。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;跨机多client单server的qps越高越好&#34;&gt;跨机多client→单server的QPS（越高越好）&lt;/h2&gt;
&lt;p&gt;本测试运行在&lt;a href=&#34;#%E7%8E%AF%E5%A2%83&#34;&gt;多机1&lt;/a&gt;上。&lt;/p&gt;
&lt;p&gt;（X轴是client数，Y轴是对应的QPS）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../images/qps_vs_multi_client.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分析&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;brpc: 随着cilent增加，server的QPS在快速增加，有不错的client扩展性。&lt;/li&gt;
&lt;li&gt;sofa-pbrpc: 随着client增加，server的QPS也在快速增加，但幅度不如brpc，client扩展性也不错。从16个client到32个client时的提升较小。&lt;/li&gt;
&lt;li&gt;hulu-pbrpc: 随着client增加，server的QPS在增加，但幅度进一步小于sofa-pbrpc。&lt;/li&gt;
&lt;li&gt;UB: 增加client几乎不能增加server的QPS。&lt;/li&gt;
&lt;li&gt;thrift: 平均QPS低于UB，增加client几乎不能增加server的QPS。&lt;/li&gt;
&lt;li&gt;gRPC: 垫底、增加client几乎不能增加server的QPS。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;跨机多client单server在固定qps下的延时cdfvarsmd统计和查看分位值越左越好越直越好&#34;&gt;跨机多client→单server在固定QPS下的延时&lt;a href=&#34;vars.md#%E7%BB%9F%E8%AE%A1%E5%92%8C%E6%9F%A5%E7%9C%8B%E5%88%86%E4%BD%8D%E5%80%BC&#34;&gt;CDF&lt;/a&gt;（越左越好，越直越好）&lt;/h2&gt;
&lt;p&gt;本测试运行在&lt;a href=&#34;#%E7%8E%AF%E5%A2%83&#34;&gt;多机1&lt;/a&gt;上。负载均衡算法为round-robin或RPC默认提供的。由于有32个client且一些RPC的单client能力不佳，我们为每个client仅设定了2500QPS，这是一个真实业务系统能达到的数字。&lt;/p&gt;
&lt;p&gt;本测试中有1%的长尾请求耗时15毫秒，长尾请求的延时不计入结果，因为我们考察的是普通请求是否被及时处理了。&lt;/p&gt;
&lt;p&gt;（X轴是延时（微秒），Y轴是小于X轴延时的请求比例）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../images/multi_client_latency_cdf.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分析&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;brpc: 平均延时短，几乎没有被长尾影响。&lt;/li&gt;
&lt;li&gt;UB和thrift: 平均延时短，受长尾影响小，平均延时高于brpc&lt;/li&gt;
&lt;li&gt;sofa-pbrpc: 14%的普通请求被长尾严重干扰。&lt;/li&gt;
&lt;li&gt;hulu-pbrpc: 15%的普通请求被长尾严重干扰。&lt;/li&gt;
&lt;li&gt;gRPC: 已经完全失控，非常糟糕。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;跨机多client多server在固定qps下的延时cdfvarsmd统计和查看分位值越左越好越直越好&#34;&gt;跨机多client→多server在固定QPS下的延时&lt;a href=&#34;vars.md#%E7%BB%9F%E8%AE%A1%E5%92%8C%E6%9F%A5%E7%9C%8B%E5%88%86%E4%BD%8D%E5%80%BC&#34;&gt;CDF&lt;/a&gt;（越左越好，越直越好）&lt;/h2&gt;
&lt;p&gt;本测试运行在&lt;a href=&#34;#%E7%8E%AF%E5%A2%83&#34;&gt;多机2&lt;/a&gt;上。20台每台运行4个client，多线程同步访问10台server。负载均衡算法为round-robin或RPC默认提供的。由于gRPC访问多server较麻烦且有很大概率仍表现不佳，这个测试不包含gRPC。&lt;/p&gt;
&lt;p&gt;本测试中有1%的长尾请求耗时10毫秒，长尾请求的延时不计入结果，因为我们考察的是普通请求是否被及时处理了。&lt;/p&gt;
&lt;p&gt;（X轴是延时（微秒），Y轴是小于X轴延时的请求比例）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../images/multi_server_latency_cdf.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分析&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;brpc和UB: 平均延时短，几乎没有被长尾影响。&lt;/li&gt;
&lt;li&gt;thrift: 平均延时显著高于brpc和UB。&lt;/li&gt;
&lt;li&gt;sofa-pbrpc: 2.5%的普通请求被长尾严重干扰。&lt;/li&gt;
&lt;li&gt;hulu-pbrpc: 22%的普通请求被长尾严重干扰。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;跨机多client多server多server在固定qps下的延时cdfvarsmd统计和查看分位值越左越好越直越好&#34;&gt;跨机多client→多server→多server在固定QPS下的延时&lt;a href=&#34;vars.md#%E7%BB%9F%E8%AE%A1%E5%92%8C%E6%9F%A5%E7%9C%8B%E5%88%86%E4%BD%8D%E5%80%BC&#34;&gt;CDF&lt;/a&gt;（越左越好，越直越好）&lt;/h2&gt;
&lt;p&gt;本测试运行在&lt;a href=&#34;#%E7%8E%AF%E5%A2%83&#34;&gt;多机2&lt;/a&gt;上。14台每台运行4个client，多线程同步访问8台server，这些server还会同步访问另外8台server。负载均衡算法为round-robin或RPC默认提供的。由于gRPC访问多server较麻烦且有很大概率仍表现不佳，这个测试不包含gRPC。&lt;/p&gt;
&lt;p&gt;本测试中有1%的长尾请求耗时10毫秒，长尾请求的延时不计入结果，因为我们考察的是普通请求是否被及时处理了。&lt;/p&gt;
&lt;p&gt;（X轴是延时（微秒），Y轴是小于X轴延时的请求比例）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../images/twolevel_server_latency_cdf.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分析&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;brpc: 平均延时短，几乎没有被长尾影响。&lt;/li&gt;
&lt;li&gt;UB: 平均延时短，长尾区域略差于brpc。&lt;/li&gt;
&lt;li&gt;thrift: 平均延时显著高于brpc和UB。&lt;/li&gt;
&lt;li&gt;sofa-pbrpc: 17%的普通请求被长尾严重干扰，其中2%的请求延时极长。&lt;/li&gt;
&lt;li&gt;hulu-pbrpc: 基本消失在视野中，已无法正常工作。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;结论&#34;&gt;结论&lt;/h1&gt;
&lt;p&gt;brpc: 在吞吐，平均延时，长尾处理上都表现优秀。&lt;/p&gt;
&lt;p&gt;UB: 平均延时和长尾处理的表现都不错，吞吐的扩展性较差，提高线程数和client数几乎不能提升吞吐。&lt;/p&gt;
&lt;p&gt;thrift: 单机的平均延时和吞吐尚可，多机的平均延时明显高于brpc和UB。吞吐的扩展性较差，提高线程数和client数几乎不能提升吞吐。&lt;/p&gt;
&lt;p&gt;sofa-pbrpc: 处理小包的吞吐尚可，大包的吞吐显著低于其他RPC，延时受长尾影响很大。&lt;/p&gt;
&lt;p&gt;hulu-pbrpc: 单机表现和sofa-pbrpc类似，但多机的延时表现极差。&lt;/p&gt;
&lt;p&gt;gRPC: 几乎在所有参与的测试中垫底，可能它的定位是给google cloud platform的用户提供一个多语言，对网络友好的实现，性能还不是要务。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Create a page</title>
      <link>https://brpc.incubator.apache.org/en/docs/contribute/creating-pages/</link>
      <pubDate>Tue, 11 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://brpc.incubator.apache.org/en/docs/contribute/creating-pages/</guid>
      <description>
        
        
        &lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;Before you start to write a MOSN document, create a MOSN document repository and be familiar with the MOSN document structure.&lt;/p&gt;
&lt;h2 id=&#34;page-types&#34;&gt;Page types&lt;/h2&gt;
&lt;h3 id=&#34;documentation&#34;&gt;Documentation&lt;/h3&gt;
&lt;p&gt;The documentation that systematically describe how to use MOSN are maintained by the MOSN team.&lt;/p&gt;
&lt;h3 id=&#34;blogs&#34;&gt;Blogs&lt;/h3&gt;
&lt;p&gt;The periodically published MOSN blogs are contributed by the community.&lt;/p&gt;
&lt;h3 id=&#34;news&#34;&gt;News&lt;/h3&gt;
&lt;p&gt;The news about the MOSN community.&lt;/p&gt;
&lt;h3 id=&#34;releases&#34;&gt;Releases&lt;/h3&gt;
&lt;p&gt;Release notes about new versions of MOSN.&lt;/p&gt;
&lt;h2 id=&#34;topic-structure&#34;&gt;Topic structure&lt;/h2&gt;
&lt;p&gt;All topics of the MOSN documentation are saved under the &lt;code&gt;content&lt;/code&gt; directory: &lt;code&gt;content/zh&lt;/code&gt; for Chinese topics, and &lt;code&gt;content/en&lt;/code&gt; for English topics. To create a topic under an existing one, you need to first create a directory and comply with the following naming rules:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Name all topics without sub-directories as &lt;code&gt;index.md&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Name all topics with sub-directories as &lt;code&gt;_index.md&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;topic-metadata&#34;&gt;Topic metadata&lt;/h2&gt;
&lt;p&gt;Each topic has its metadata, which is separated by three hyphens (&amp;quot;-&amp;quot;) between two YAML blocks. The following metadata is required:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#000&#34;&gt;title=&amp;#34;Title&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;linkTitle&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Title&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;date&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;2020-02-11&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;weight&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;description&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;The brief description of the page.&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Details are described as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;title&lt;/code&gt;: The title of the topic.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;linkTitle&lt;/code&gt;: The topic title displayed in the left-side content pane, which is usually consistent with &lt;code&gt;title&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;date&lt;/code&gt;: The date when the topic was created, in the &lt;code&gt;YYYY-MM-dd&lt;/code&gt; format.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;weight&lt;/code&gt;: Among topics of the same level, the one with the smallest weight is displayed at the top in the left-side content pane.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;description&lt;/code&gt;: The brief description of the document.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Author information is required for blogs, releases notes, and news articles:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;author&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Author information&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note: The value of author can be edited in the Markdown format.&lt;/p&gt;
&lt;h2 id=&#34;naming-conventions&#34;&gt;Naming conventions&lt;/h2&gt;
&lt;p&gt;The URL of a document is determined based on the level of its directory. Document directories are named according to the following conventions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use English names&lt;/li&gt;
&lt;li&gt;Connect words with hyphens&lt;/li&gt;
&lt;li&gt;Avoid punctuation marks&lt;/li&gt;
&lt;li&gt;Minimize the name&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Format guide</title>
      <link>https://brpc.incubator.apache.org/en/docs/contribute/style-guide/</link>
      <pubDate>Tue, 11 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://brpc.incubator.apache.org/en/docs/contribute/style-guide/</guid>
      <description>
        
        
        &lt;h2 id=&#34;format-standard&#34;&gt;Format standard&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Edit the document body in the Markdown format.&lt;/li&gt;
&lt;li&gt;Start with Heading 2 in the document body.&lt;/li&gt;
&lt;li&gt;Use local images, save them to the same directory as that of the &lt;code&gt;index.md&lt;/code&gt; file, and use relative paths for references.&lt;/li&gt;
&lt;li&gt;Specify the languages for all code.&lt;/li&gt;
&lt;li&gt;Use ordered and unordered lists separately, to avoid format confusion.&lt;/li&gt;
&lt;li&gt;Enclose a separate URL with &lt;code&gt;&amp;lt;URL&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Enclose uncommon terms and code phrases with grave accents (`).&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Sidecar pattern</title>
      <link>https://brpc.incubator.apache.org/en/docs/concept/sidecar-pattern/</link>
      <pubDate>Sun, 20 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://brpc.incubator.apache.org/en/docs/concept/sidecar-pattern/</guid>
      <description>
        
        
        &lt;p&gt;The sidecar pattern is commonly used in service mesh. It is a container design pattern that came into being earlier than service mesh did. This topic will help you have a general idea about the sidecar pattern.&lt;/p&gt;
&lt;h2 id=&#34;what-is-the-sidecar-pattern&#34;&gt;What is the sidecar pattern?&lt;/h2&gt;
&lt;p&gt;In the &lt;strong&gt;sidecar pattern&lt;/strong&gt;, features of applications are separated as processes. As shown in the following figure, the sidecar pattern allows you to add more features alongside every application container, without configuring third-party components or modifying the application code.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;sidecar-pattern.jpg&#34; alt=&#34;Sidecar pattern&#34;&gt;&lt;/p&gt;
&lt;p&gt;Similar to a sidecar mounted to a three-wheeled motorcycle, in a software architecture, a sidecar is connected to a primary application and adds extension or advanced features to it. Sidecar applications and primary applications are loosely coupled. This pattern can cover the difference between programming languages, and unify microservice features such as observability, monitoring, logging, configuration, and circuit breaker.&lt;/p&gt;
&lt;h2 id=&#34;benefits&#34;&gt;Benefits&lt;/h2&gt;
&lt;p&gt;Benefits of using the sidecar pattern are as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Moves features unrelated to the application business logic into the common infrastructure. This reduces code complexity of microservices.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Avoids repeatedly writing configuration files and code for third-party components. This reduces duplicated code in the microservice architecture.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Loosens the coupling between the application code and the underlying platform.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;how-does-the-sidecar-pattern-work&#34;&gt;How does the sidecar pattern work?&lt;/h2&gt;
&lt;p&gt;Sidecar is a container widely used in service mesh. For details, see &lt;a href=&#34;https://aspenmesh.io/service-mesh-architectures/&#34;&gt;Service Mesh Architectures&lt;/a&gt;. That blog describes the &lt;strong&gt;node agent&lt;/strong&gt; and &lt;strong&gt;sidecar&lt;/strong&gt; service mesh architectures in detail.&lt;/p&gt;
&lt;p&gt;You can deploy a sidecar service mesh without having to run a new agent on every node, but you will be running multiple copies of an identical sidecar. In sidecar deployments, you have one adjacent container deployed for every application container. This container is a sidecar. The sidecar handles all the network traffic in and out of the application container. In a Kubernetes pod, a sidecar container is deployed alongside the original application container. These two containers share resources such as storage and network. If we take the pod that runs the sidecar container and the application container as a host, these two containers share all host resources.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Traffic hijacking</title>
      <link>https://brpc.incubator.apache.org/en/docs/concept/traffic-hijack/</link>
      <pubDate>Mon, 20 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://brpc.incubator.apache.org/en/docs/concept/traffic-hijack/</guid>
      <description>
        
        
        &lt;p&gt;This topic describes the traffic hijacking solution when MOSN is used as a sidecar.&lt;/p&gt;
&lt;p&gt;When MOSN is deployed as a sidecar in the same pod as that of the business application container, both inbound and outbound service requests of the business application must be handled by the sidecar. UUnlike the Istio community that uses iptables for transparent traffic hijacking, MOSN currently uses a traffic takeover solution and is actively exploring a transparent hijacking solution for large amounts of traffic.&lt;/p&gt;
&lt;h2 id=&#34;traffic-takeover&#34;&gt;Traffic takeover&lt;/h2&gt;
&lt;p&gt;MOSN uses the following traffic takeover solution, instead of the &lt;a href=&#34;https://jimmysong.io/istio-handbook/concepts/sidecar-injection-deep-dive.html&#34;&gt;iptables-based traffic hijacking solution&lt;/a&gt; used by the Istio community:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Assume that the server runs on a machine with an IP address of 1.2.3.4 and listens on port 20880. The server will first send a service registration request to its sidecar, to notify it of the service to be registered, as well as the IP address and port number (1.2.3.4:20880).&lt;/li&gt;
&lt;li&gt;The server&amp;rsquo;s sidecar will send a service registration request to the service registry (for example, SOFA Registry), to notify it of the service to be registered as well as the IP address and port number. Note that the port to be registered is not the port (20880) of the business application. Instead, it should be the port (for example, 20881) on which the sidecar listens.&lt;/li&gt;
&lt;li&gt;The caller sends a service subscription request to its own sidecar, to notify it of the service to be subscribed to.&lt;/li&gt;
&lt;li&gt;The caller&amp;rsquo;s sidecar then pushes the service endpoint to the caller. Note that the service endpoint here is the local IP address of the caller and the port (for example, 20882) on which the caller&amp;rsquo;s sidecar listens.&lt;/li&gt;
&lt;li&gt;The caller&amp;rsquo;s sidecar sends a service subscription request to the service registry (for example, SOFA Registry), to notify it of the service to be subscribed to.&lt;/li&gt;
&lt;li&gt;The service registry (for example, SOFA Registry) pushes the service endpoint (1.2.3.4:20881) to the caller&amp;rsquo;s sidecar.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;traffic-hijacking.png&#34; alt=&#34;Traffic takeover diagram&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;service-call-procedure&#34;&gt;Service call procedure&lt;/h3&gt;
&lt;p&gt;After going through the above service discovery procedure, the traffic forwarding procedure is quite easy to understand:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The caller receives the so called &amp;ldquo;service endpoint&amp;rdquo; &lt;code&gt;127.0.0.1:20882&lt;/code&gt;, and then sends a service call to this endpoint.&lt;/li&gt;
&lt;li&gt;After receiving the request from the caller, the caller&amp;rsquo;s sidecar parses the request header to identify the service to be called. Then the sidecar retrieves the endpoint previously returned by the service registry, and then sends a real call to this endpoint: &lt;code&gt;1.2.3.4:20881&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;After receiving the request from the caller&amp;rsquo;s sidecar, the server&amp;rsquo;s sidecar processes the request and then sends the request to the server:&lt;code&gt;127.0.0.1:20880&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;service-call-process.png&#34; alt=&#34;Service call procedure&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;transparent-hijacking&#34;&gt;Transparent hijacking&lt;/h2&gt;
&lt;p&gt;In the above service registration procedure, the server endpoint is replaced with the local sidecar endpoint to implement lightweight &amp;ldquo;traffic hijacking&amp;rdquo;. This mode works well in scenarios where a service registry is available and both the caller and the server use the same SDK. Traffic hijacking is not possible unless both conditions are met. To solve this problem, we introduced transparent hijacking.&lt;/p&gt;
&lt;h3 id=&#34;iptables-based-traffic-hijacking&#34;&gt;iptables-based traffic hijacking&lt;/h3&gt;
&lt;p&gt;iptables redirect traffic by using the REDIRECT action of the NAT table. A new connection will be triggered at the netfilter layer through the SYN packet. When subsequent packets arrive at the netfilter layer, netfilter looks for the corresponding connections, and modifies the destination addresses and ports. The original destination address is recorded when the new connection is being established, and the application can obtain the real destination addresses of the packets through &lt;code&gt;SOL_IP&lt;/code&gt; and &lt;code&gt;SO_ORIGINAL_DST&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The following figure shows the principle of iptables-based traffic hijacking.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;iptables.png&#34; alt=&#34;Principle of iptables-based traffic hijacking&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;drawbacks-of-iptables-based-traffic-hijacking&#34;&gt;Drawbacks of iptables-based traffic hijacking&lt;/h3&gt;
&lt;p&gt;Currently, iptables-based traffic hijacking used by Istio has the following drawbacks:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Connections need to be tracked by the conntrack module. When there are a large number of connections, the resource consumption will be high, and the track table may become full. To address this problem, some industry practitioners, such as Alibaba, have disabled the conntrack module.&lt;/li&gt;
&lt;li&gt;iptables is a common module that takes effect globally, and related modifications cannot be explicitly prohibited, resulting in poor controllability.&lt;/li&gt;
&lt;li&gt;iptables-based traffic redirection is essentially data exchange through loopback. The outbound traffic progresses through the stack twice, degrading the forwarding performance in high-concurrency scenarios.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The above drawbacks do not exist in every scenario. For example, iptables is a simple and desirable solution for scenarios where the number of connections is small and no NAT table is used. To adapt to more scenarios, transparent hijacking needs to be optimized to eliminate the above drawbacks.&lt;/p&gt;
&lt;h3 id=&#34;optimization-for-transparent-hijacking&#34;&gt;Optimization for transparent hijacking&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Use TProxy to handle inbound traffic&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;TProxy can be used to redirect inbound traffic without modifying the destination IP address/port number in messages. No connection needs to be tracked, and the conntrack module does not need to create large numbers of connections. TProxy is not suitable for handling outbound traffic due to the limit of the kernel version. Currently, Istio supports using TProxy to handle inbound traffic.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Use hook connect to handle outbound traffic&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To adapt to more application scenarios, hook connect is used to handle outbound traffic. The implementation principle is as follows:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;hook-connect.png&#34; alt=&#34;Principle of hook connect&#34;&gt;&lt;/p&gt;
&lt;p&gt;Regardless of which transparent hijacking solution is adopted, the real destination IP address/port number needs to be identified. In the iptables solution, the destination address is identified by calling the getsockopt function. TProxy can directly read the address. In the hook connect solution, the sidecar can also read the original IP/port number by calling the getsockopt function.&lt;/p&gt;
&lt;p&gt;After implementing transparent hijacking, if the kernel version meets the requirement (4.16 or later), we can use sockmap to shorten the message processing path, and improve the forwarding performance in the outbound direction.&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;An application can hijack traffic in combination with the registry when publishing/subscribing to services through the registry. In transparent hijacking scenarios, we can use iptables to redirect traffic under low performance pressure. TProxy and hook connect can be used under high concurrency pressure.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: TLS connections</title>
      <link>https://brpc.incubator.apache.org/en/docs/concept/tls/</link>
      <pubDate>Mon, 20 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://brpc.incubator.apache.org/en/docs/concept/tls/</guid>
      <description>
        
        
        &lt;p&gt;This topic describes the TLS security capability of MOSN.&lt;/p&gt;
&lt;h2 id=&#34;certificate-solution&#34;&gt;Certificate solution&lt;/h2&gt;
&lt;p&gt;MOSN provides a certificate issuance solution based on Istio Citadel. It configures Sidecar certificates by using the &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/configuration/security/secret&#34;&gt;Secret Discovery Service (SDS)&lt;/a&gt; of the Istio community. Dynamic certificate discovery and hot updates are supported. To provide advanced security capabilities, MOSN obtains certificates by connecting to the internal Key Management Service (KMS) system, without relying on the self-certificate issuance capability of Citadel. MOSN also supports certificate caching, pushing, and updates.&lt;/p&gt;
&lt;p&gt;The following figure shows the architecture of the MOSN&amp;rsquo;s certificate solution.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;mosn-certificate-arch.png&#34; alt=&#34;MOSN&amp;rsquo;s certificate solution&#34;&gt;&lt;/p&gt;
&lt;p&gt;Roles of the components are described as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pilot: sends policies and SDS configurations (not shown in the figure for brevity).&lt;/li&gt;
&lt;li&gt;Citadel: acts as the Certificate Provider as well as the MCP Server to provide resources to the Citadel Agent such as Pods and custom resources (CRs).&lt;/li&gt;
&lt;li&gt;Citadel Agent: provides SDS Server services and sends certificates and CRs for MOSN, DB Sidecar, and Security Sidecar.&lt;/li&gt;
&lt;li&gt;KMS: issues certificates.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;certificate-acquisition-procedure&#34;&gt;Certificate acquisition procedure&lt;/h3&gt;
&lt;p&gt;After having a general idea about the overall architecture, we can break down the certificate acquisition procedure for the sidecar as shown in the following figure.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;certificate-request-process.png&#34; alt=&#34;Certificate acquisition procedure&#34;&gt;&lt;/p&gt;
&lt;p&gt;Each step in the figure is described as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Citadel synchronizes Pod and CR information with the Citadel Agent (nodeagent) through the Mesh Configuration Protocol (MCP). This avoids overload of the API Server caused by direct requests from the Citadel Agent to the API Server.&lt;/li&gt;
&lt;li&gt;MOSN sends an SDS request to the Citadel Agent by using the Unix Domain Socket.&lt;/li&gt;
&lt;li&gt;The Citadel Agent performs tamper-proof verification and extracts the appkey.&lt;/li&gt;
&lt;li&gt;The Citadel Agent uses the appkey to request Citadel to issue a certificate.&lt;/li&gt;
&lt;li&gt;Citadel checks whether a certificate has been cached. If a valid certificate is cached, Citadel directly returns the cached certificate.&lt;/li&gt;
&lt;li&gt;If no certificate is cached, Citadel constructs a certificate issuance request and requests the KMS to issue a certificate.&lt;/li&gt;
&lt;li&gt;The KMS returns a certificate to Citadel. The KMS also generates certificate expiration and rotation notifications.&lt;/li&gt;
&lt;li&gt;After receiving the certificate, Citadel transfers it to the corresponding Citadel Agent.&lt;/li&gt;
&lt;li&gt;After receiving the certificate, the Citadel Agent caches it in memory and sends it to MOSN.&lt;/li&gt;
&lt;/ol&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: MOSN hot upgrade</title>
      <link>https://brpc.incubator.apache.org/en/docs/concept/smooth-upgrade/</link>
      <pubDate>Mon, 20 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://brpc.incubator.apache.org/en/docs/concept/smooth-upgrade/</guid>
      <description>
        
        
        &lt;p&gt;Sidecar O&amp;amp;M is always challenging for a service mesh, while sidecar upgrades are common at the data plane. This topic describes how to upgrade the sidecar (MOSN) without affecting the business and how to migrate existing persistent connections.&lt;/p&gt;
&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;
&lt;p&gt;This topic describes why and how MOSN supports hot upgrade. For details about the basic concepts of hot upgrade, see the &lt;a href=&#34;https://brpc.incubator.apache.org/zh/blog/posts/nginx-envoy-mosn-hot-upgrade/&#34;&gt;NGINX vs Envoy vs MOSN hot upgrade&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;First, why don&amp;rsquo;t NGINX and Envoy require a connection-lossless migration solution like MOSN does? This depends on their business scenarios. NGINX and Envoy mainly support the HTTP1 and HTTP2 protocols. The &lt;code&gt;connection: Close&lt;/code&gt; request/response header in HTTP1 and GOAWAY frame in HTTP2 allow a client to actively close a connection and establish a new one to a new process. However, common multiplexing protocols such as Dubbo and SOFARPC do not provide control frames, and a request will fail if the connection to the old process is closed.&lt;/p&gt;
&lt;p&gt;A common upgrade approach is to: cut off the application&amp;rsquo;s traffic, for example, by unpublishing the service; upgrade MOSN when no new request is received; and then publish the service again. This process takes a rather long time, and the service is unavailable during this period of time. In addition, the application usage also needs to be considered. Achieving a balance between service availability and the upgrade in a large-scale scenario is difficult. To adapt to business scenarios of MOSN, a persistent-connection migration solution is developed to migrate persistent connections to new processes. The entire procedure is transparent to the client, and no connection needs to be re-established, implementing a request-lossless hot upgrade.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;reqeust-smooth-upgrade-process.png&#34; alt=&#34;Request-lossless hot upgrade procedure of MOSN&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;normal-procedure&#34;&gt;Normal procedure&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;normal-process.png&#34; alt=&#34;Normal procedure&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A client sends a request to MOSN.&lt;/li&gt;
&lt;li&gt;MOSN forwards the request to a server.&lt;/li&gt;
&lt;li&gt;The server returns a response to MOSN.&lt;/li&gt;
&lt;li&gt;MOSN returns the response to the client.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The preceding figure briefly shows a normal request procedure. Next, we need to migrate TCP1 connections between the client and MOSN. TCP2 connections between MOSN and the server do not need to be migrated, because the server accessed by MOSN is selected through load balancing. The connection/disconnection with the server is not our concern.&lt;/p&gt;
&lt;h2 id=&#34;hot-upgrade-procedure&#34;&gt;Hot upgrade procedure&lt;/h2&gt;
&lt;h3 id=&#34;trigger-conditions&#34;&gt;Trigger conditions&lt;/h3&gt;
&lt;p&gt;We can trigger a hot upgrade through either of the following methods:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Register a SIGHUP event listener with MOSN, and send a SIGHUP signal to the MOSN process to call ForkExec to generate a new MOSN process.&lt;/li&gt;
&lt;li&gt;Directly start a new MOSN process.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Why do we provide two methods? In the beginning, only the first method was supported, which is used by NGINX and Envoy. In this method, we can replace the old MOSN binary file in a virtual machine or container for an upgrade. However, our scenarios require cross-container upgrades. We need to start a new container (a new MOSN process) to implement a hot upgrade. That is why the second method is provided. Cross-container upgrades also require support from operators, but this will not be discussed in detail here.&lt;/p&gt;
&lt;h3 id=&#34;interaction-procedure&#34;&gt;Interaction procedure&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;interaction-process.png&#34; alt=&#34;Interaction procedure&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;interaction-process-timeline.png&#34; alt=&#34;Sequence diagram of an interaction procedure&#34;&gt;&lt;/p&gt;
&lt;p&gt;The old MOSN process will start a goroutine to run the &lt;code&gt;ReconfigureHandler()&lt;/code&gt; function to listen to a domain socket (&lt;code&gt;reconfig.sock&lt;/code&gt;) in the last stage. This operation enables the new MOSN process to detect whether an old MOSN process exists.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ReconfigureHandler&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;l&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;net&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Listen&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;unix&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;types&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ReconfigureDomainSocket&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;

    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#000&#34;&gt;uc&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ul&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;AcceptUnix&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
        &lt;span style=&#34;color:#000&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;uc&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Write&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;([]&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;})&lt;/span&gt;
        &lt;span style=&#34;color:#000&#34;&gt;reconfigure&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Both hot upgrade triggering methods start a new MOSN process at last. The new MOSN process will then successively call the &lt;code&gt;GetInheritListeners()&lt;/code&gt; and &lt;code&gt;isReconfigure()&lt;/code&gt; functions to verify whether an old MOSN process exists (whether the &lt;code&gt;reconfig.sock&lt;/code&gt; listener exists). If yes, MOSN starts the migration procedure; otherwise, MOSN starts a normal startup procedure.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// The core procedure is kept.
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;GetInheritListeners&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;([]&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;net&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Listener&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;net&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Conn&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;error&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;isReconfigure&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;nil&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;nil&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;nil&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#000&#34;&gt;l&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;net&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Listen&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;unix&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;types&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;TransferListenDomainSocket&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;uc&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ul&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;AcceptUnix&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;oobn&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;uc&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ReadMsgUnix&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;buf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;oob&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;file&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;os&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;NewFile&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;fd&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;fileListener&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;net&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;FileListener&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;file&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;listeners&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;uc&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;nil&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If the migration procedure starts, the new MOSN process will listen to a new domain socket (&lt;code&gt;listen.sock&lt;/code&gt;). This ensures that the old MOSN process can transfer the listen FD to the new MOSN process. sendMsg and recvMsg are used to transfer the listen FD. After receiving the listen FD, the new MOSN process calls the &lt;code&gt;net.FileListener()&lt;/code&gt; function to generate a listener. In this case, the new and old MOSN processes have the same listen socket.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// FileListener returns a copy of the network listener corresponding
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// to the open file f.
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// It is the caller&amp;#39;s responsibility to close ln when finished.
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// Closing ln does not affect f, and closing f does not affect ln.
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;FileListener&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;f&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;os&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ln&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Listener&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;error&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;ln&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;fileListener&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;OpError&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Op&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;file&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Net&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;file+net&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Source&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;nil&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Addr&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;fileAddr&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()),&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Err&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The migration procedure of MOSN is different from that of NGINX. In NGINX, after the forking is done, the child process automatically inherits the listen FD. However, MOSN starts a new process that is independent from the old one, without a parent-child relationship. Therefore, sendMsg is required for transferring the listen FD.&lt;/p&gt;
&lt;p&gt;A total of two domain sockets are used to start the migration and transfer the listen FD.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;reconfig.sock&lt;/code&gt; is the old MOSN listener used by the new MOSN process to verify whether an old MOSN process exists.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;listen.sock&lt;/code&gt; is the new MOSN listener used by the old MOSN process to transfer the listen FD.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These two sockets are actually interchangeable. For example, &lt;code&gt;reconfig.sock&lt;/code&gt; can also be used for transferring the listen FD. These two sockets are used for some historical reasons. They can be merged into one later on, to make the code simpler and easier to read.&lt;/p&gt;
&lt;p&gt;Let us take a look at the handling procedure of the old MOSN process. After receiving the notification from the new MOSN process, the old MOSN process starts the &lt;code&gt;reconfigure(false)&lt;/code&gt; procedure. It first calls &lt;code&gt;sendInheritListeners()&lt;/code&gt; to transfer the listen FD to the new MOSN process as described above, and then calls &lt;code&gt;WaitConnectionsDone()&lt;/code&gt; to migrate existing persistent connections.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// The core procedure is kept.
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;reconfigure&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;start&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;start&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#000&#34;&gt;startNewMosn&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// transfer listen fd
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;notify&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;sendInheritListeners&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;();&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// Wait for all connections to be finished
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#000&#34;&gt;WaitConnectionsDone&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;GracefulTimeout&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;

    &lt;span style=&#34;color:#000&#34;&gt;os&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Exit&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After receiving the listen FD, the new MOSN process starts the migration process based on the configurations. Then the new MOSN process starts a goroutine to run &lt;code&gt;TransferServer()&lt;/code&gt; to listen to a new &lt;code&gt;domain socket (conn.sock)&lt;/code&gt;, for receiving persistent connections from the old MOSN process subsequently. The migration function is &lt;code&gt;transferHandler().&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;TransferServer&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;handler&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;types&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ConnectionHandler&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;l&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;net&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Listen&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;unix&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;types&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;TransferConnDomainSocket&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;

    &lt;span style=&#34;color:#000&#34;&gt;utils&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;GoWithRecover&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#000&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;l&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Accept&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
            &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;transferHandler&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;handler&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;transferMap&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;

        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;},&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;nil&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The old MOSN process starts persistent-connection migration through &lt;code&gt;transferRead()&lt;/code&gt; and &lt;code&gt;transferWrite()&lt;/code&gt;. This is analyzed as follows.&lt;/p&gt;
&lt;h3 id=&#34;persistent-connection-migration-procedure&#34;&gt;Persistent-connection migration procedure&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;long-connection-migrating-process.png&#34; alt=&#34;Persistent-connection migration procedure&#34;&gt;&lt;/p&gt;
&lt;p&gt;First, let us take a look at the migration procedure of a new request.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A client sends a request to MOSN.&lt;/li&gt;
&lt;li&gt;MOSN (the old MOSN process) sends the FD and connection status data of TCP1 to New MOSN (the new MOSN process).&lt;/li&gt;
&lt;li&gt;New MOSN receives the FD and request data, creates a new connection structure, and sends the connection ID to the MOSN. At this time, New MOSN has a copy of the TCP1 connection.&lt;/li&gt;
&lt;li&gt;New MOSN selects a new server by using the load balancer, establishes a TCP3 connection, and forwards the request to the server.&lt;/li&gt;
&lt;li&gt;The server returns a response to New MOSN.&lt;/li&gt;
&lt;li&gt;New MOSN returns a response to the client based on the copy of TCP1 connection transferred from MOSN.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In the original &lt;code&gt;WaitConnectionsDone()&lt;/code&gt; function, &lt;code&gt;s.stopChan&lt;/code&gt; has been disabled. In ReadLoop of the connection, a &lt;code&gt;[TransferTimeout, 2 * TransferTimeout]&lt;/code&gt; random time interval will be set for the migration procedure. The random interval is intended to discretize the migration time for TCP connections of each client, to ensure smooth migration.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;connection&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;startReadLoop&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;transferTime&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Time&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;select&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;stopChan&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;
            &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;transferTime&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;IsZero&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;transferCallbacks&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;transferCallbacks&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
                    &lt;span style=&#34;color:#000&#34;&gt;randTime&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Duration&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;rand&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Intn&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;TransferTimeout&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Nanoseconds&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;())))&lt;/span&gt;
                    &lt;span style=&#34;color:#000&#34;&gt;transferTime&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Now&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Add&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;TransferTimeout&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Add&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;randTime&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
                    &lt;span style=&#34;color:#000&#34;&gt;log&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;DefaultLogger&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Infof&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;[network] [read loop] transferTime: Wait %d Second&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;TransferTimeout&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;randTime&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1e9&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
                &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
                    &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// set a long time, not transfer connection, wait mosn exit.
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;                    &lt;span style=&#34;color:#000&#34;&gt;transferTime&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Now&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Add&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;TransferTimeout&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
                    &lt;span style=&#34;color:#000&#34;&gt;log&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;DefaultLogger&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Infof&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;[network] [read loop] not support transfer connection, Connection = %d, Local Address = %+v, Remote Address = %+v&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
                        &lt;span style=&#34;color:#000&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;rawConnection&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;LocalAddr&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(),&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;RemoteAddr&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;())&lt;/span&gt;
                &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
            &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;transferTime&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Before&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Now&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
                    &lt;span style=&#34;color:#000&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;transfer&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
                    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt;
                &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
            &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After one random interval elapses, the &lt;code&gt;c.transfer()&lt;/code&gt; function is called. &lt;code&gt;c.notifyTransfer()&lt;/code&gt; is used for suspending write operations. No write operation is allowed during migration of read operations, because data confusion will occur if write operations are performed simultaneously in the old and new MOSN processes.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;connection&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;transfer&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;notifyTransfer&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;transferRead&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;transferWrite&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then the &lt;code&gt;transferRead()&lt;/code&gt; function is called to transfer the FD and status data of a connection to New MOSN through &lt;code&gt;conn.sock&lt;/code&gt;. Similar to migrating the listen FD, New MOSN returns an ID after successful processing. This ID identifies the new connection established by New MOSN and will be used later.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// old mosn transfer readloop
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;transferRead&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;connection&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;uint64&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;error&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;unixConn&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;net&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Dial&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;unix&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;types&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;TransferConnDomainSocket&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;

    &lt;span style=&#34;color:#000&#34;&gt;file&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;tlsConn&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;transferGetFile&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;

    &lt;span style=&#34;color:#000&#34;&gt;uc&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;unixConn&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.(&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;net&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;UnixConn&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
    
    &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// send type and TCP FD
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;transferSendType&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;uc&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;file&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
    
    &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// send header + buffer + TLS
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;transferReadSendData&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;uc&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;tlsConn&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;readBuffer&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;log&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;DefaultLogger&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
    
    &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// recv ID
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#000&#34;&gt;id&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;transferRecvID&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;uc&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;nil&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We constructed a simple read transfer protocol, which mainly involves the length of the TCP raw data, the length of the TLS data, the TCP raw data, and the TLS data.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;/**&lt;/span&gt;
 &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;  &lt;span style=&#34;color:#000&#34;&gt;transfer&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;read&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;protocol&lt;/span&gt;
 &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;  &lt;span style=&#34;color:#000&#34;&gt;header&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;bytes&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;readBuffer&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;TLS&lt;/span&gt;
 &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;
 &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;                       &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;4&lt;/span&gt;                       &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;8&lt;/span&gt;
 &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+-----+-----+-----+-----+-----+-----+-----+-----+&lt;/span&gt;
 &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#000&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;length&lt;/span&gt;      &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt;     &lt;span style=&#34;color:#000&#34;&gt;TLS&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;length&lt;/span&gt;        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt;
 &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+-----+-----+-----+-----+-----+-----+-----+-----+&lt;/span&gt;
 &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt;                     &lt;span style=&#34;color:#000&#34;&gt;data&lt;/span&gt;                      &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt;
 &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+-----+-----+-----+-----+-----+-----+-----+-----+&lt;/span&gt;
 &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt;                     &lt;span style=&#34;color:#000&#34;&gt;TLS&lt;/span&gt;                       &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt;
 &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+-----+-----+-----+-----+-----+-----+-----+-----+&lt;/span&gt;
 &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, let us take a look at the handling procedure of the new MOSN process. After receiving migration requests, the new MOSN process starts a goroutine for each migration request to run the &lt;code&gt;transferHandler()&lt;/code&gt; function. The function distinguishes read and write transfer requests based on the protocol read. Read transfer is described first. The new MOSN process calls transferNewConn to generate a new connection structure based on the FD and packets transferred from the old MOSN process. Then the new MOSN process transfers the new connection ID to the old MOSN process.&lt;/p&gt;
&lt;p&gt;The new MOSN process starts to read data from the new TCP connection, and proceeds with a normal business request procedure.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;transferHandler&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;net&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Conn&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;handler&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;types&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ConnectionHandler&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;transferMap&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;sync&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Map&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// recv type
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#000&#34;&gt;conn&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;transferRecvType&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;uc&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#000&#34;&gt;log&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;DefaultLogger&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Errorf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;[network] [transfer] [handler] transferRecvType error :%v&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;conn&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// transfer read
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// recv header + buffer
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#000&#34;&gt;dataBuf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;tlsBuf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;transferReadRecvData&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;uc&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#000&#34;&gt;log&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;DefaultLogger&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Errorf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;[network] [transfer] [handler] transferRecvData error :%v&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
            &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt;
        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#000&#34;&gt;connection&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;transferNewConn&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;conn&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;dataBuf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;tlsBuf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;handler&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;transferMap&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;connection&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#000&#34;&gt;transferSendID&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;uc&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;connection&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#000&#34;&gt;transferSendID&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;uc&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;transferErr&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// transfer write
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// recv header + buffer
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#000&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;buf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;transferWriteRecvData&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;uc&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#000&#34;&gt;log&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;DefaultLogger&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Errorf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;[network] [transfer] [handler] transferRecvData error :%v&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#000&#34;&gt;connection&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;transferFindConnection&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;transferMap&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;uint64&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;))&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;connection&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#000&#34;&gt;log&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;DefaultLogger&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Errorf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;[network] [transfer] [handler] transferFindConnection failed, id = %d&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
            &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt;
        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;transferWriteBuffer&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;connection&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;buf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#000&#34;&gt;log&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;DefaultLogger&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Errorf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;[network] [transfer] [handler] transferWriteBuffer error :%v&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
            &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt;
        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then the new MOSN process replaces the old MOSN process, to read data from the TCP1 connection and process the data. For the new request, the entire migration procedure is completed.&lt;/p&gt;
&lt;h3 id=&#34;residual-response-migration-procedure&#34;&gt;Residual-response migration procedure&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;remaining-responses-migrating-process.png&#34; alt=&#34;Residual-response migration procedure&#34;&gt;&lt;/p&gt;
&lt;p&gt;Why is a residual-response migration procedure required? Because of the multiplexing protocol, during the previous migration of read connections, residual responses for TCP2 connections are waiting to be returned to the client. The data may go out of order if both the old and new MOSN processes simultaneously write data to TCP1 connections. Therefore, we want the new MOSN process to uniformly handle the residual responses for TCP2 connections.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The server returns a residual response to MOSN.&lt;/li&gt;
&lt;li&gt;MOSN transfers the connection ID and response data previously obtained from New MOSN back to New MOSN through domain socket (conn.sock).&lt;/li&gt;
&lt;li&gt;New MOSN queries the TCP1 connection based on the ID and returns the response to the client.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;After the &lt;code&gt;transferRead()&lt;/code&gt; (the read transfer) ends, the &lt;code&gt;transferWrite()&lt;/code&gt; (the write transfer) starts. In this stage, packets to be written and the connection ID previously obtained from New MOSN are sent to New MOSN.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// old mosn transfer writeloop
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;transferWrite&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;connection&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;id&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;uint64&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;error&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color:#000&#34;&gt;unixConn&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;net&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Dial&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;unix&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;types&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;TransferConnDomainSocket&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;

    &lt;span style=&#34;color:#000&#34;&gt;uc&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;unixConn&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.(&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;net&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;UnixConn&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;transferSendType&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;uc&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;nil&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;

    &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// build net.Buffers to IoBuffer
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#000&#34;&gt;buf&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;transferBuildIoBuffer&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// send header + buffer
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;transferWriteSendData&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;uc&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;buf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#000&#34;&gt;log&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;DefaultLogger&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Errorf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;[network] [transfer] [write] transferWrite failed: %v&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;nil&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We constructed a simple write transfer protocol, which mainly involves the length of the TCP raw data, the connection ID, and the TCP raw data.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt; *  transfer write protocol
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt; *  header (8 bytes) + (writeBuffer data)
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt; *
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt; * 0                       4                       8
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt; * +-----+-----+-----+-----+-----+-----+-----+-----+
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt; * |      data length      |    connection  ID     |
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt; * +-----+-----+-----+-----+-----+-----+-----+-----+
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt; * |                     data                      |
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt; * +-----+-----+-----+-----+-----+-----+-----+-----+
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt; *
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;**/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The new MOSN process calls the transferHandler() function to identify the write transfer protocol. Then the new MOSN process calls the &lt;code&gt;transferFindConnection()&lt;/code&gt; function to locate the TCP1 connection based on the connection ID, and directly write the data.&lt;/p&gt;
&lt;p&gt;Note that new requests are now forwarded to the server through TCP3 connections, and only responses to previous requests will be returned through TCP2 connections. If no response is returned within 2 * TransferTimeout during the entire migration, the requests will time out and fail.&lt;/p&gt;
&lt;h3 id=&#34;connection-status-data&#34;&gt;Connection status data&lt;/h3&gt;
&lt;p&gt;During the connection migration, both the TCP FD and the connection status are migrated so that the new MOSN process knows how to initialize the new connection.&lt;/p&gt;
&lt;p&gt;The following status data is involved:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Read buffer&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The data that has been read from TCP but has not been processed at the application layer during migration.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Write data&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The response data received by MOSN after migration.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TLS status data migration&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In case of a TLS encrypted request, the following TLS status data must to be migrated:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Encryption key&lt;/li&gt;
&lt;li&gt;Sequence&lt;/li&gt;
&lt;li&gt;Read buffer data (encrypted/unencrypted)&lt;/li&gt;
&lt;li&gt;Cipher type&lt;/li&gt;
&lt;li&gt;TLS version&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;TransferTLSInfo&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;Vers&lt;/span&gt;         &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;uint16&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;CipherSuite&lt;/span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;uint16&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;MasterSecret&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[]&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;byte&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;ClientRandom&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[]&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;byte&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;ServerRandom&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[]&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;byte&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;InSeq&lt;/span&gt;        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;byte&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;OutSeq&lt;/span&gt;       &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;byte&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;RawInput&lt;/span&gt;     &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[]&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;byte&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;Input&lt;/span&gt;        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[]&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;byte&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;FD migration is a common operation for persistent connection migration, and can be performed through either sendMsg or connection repair.&lt;/p&gt;
&lt;p&gt;The most challenging part in the entire procedure is the migration of the application layer data. The general idea is to migrate all data structures of the application layer to the new process, for example, structures such as protocol headers that have been read. However, this increases the migration complexity, because each protocol needs to be handled separately.&lt;/p&gt;
&lt;p&gt;To address this problem, MOSN moves migration to the I/O layer, regardless of the protocols used at the application layer. The original TCP packets are migrated, and then the new MOSN process encodes/decodes the packets to assemble the header and other structures. This is a standard procedure that enables migration without parsing protocols. This migration framework can automatically support any stateless protocols.&lt;/p&gt;
&lt;p&gt;You may doubt about the residual-response migration procedure. Why don&amp;rsquo;t we start migration after all responses are returned? This procedure seems to be unnecessary. The reason is that when we use a multiplexing protocol, requests are being sent all the time. You cannot always find a time point when all responses are returned.&lt;/p&gt;
&lt;h2 id=&#34;feedback&#34;&gt;Feedback&lt;/h2&gt;
&lt;p&gt;For more information about discussions on this issue, go to Github Issue at &lt;a href=&#34;https://github.com/mosn/mosn/issues/866&#34;&gt;MOSN smooth upgrade problem #866&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: FAQ</title>
      <link>https://brpc.incubator.apache.org/en/docs/faq/</link>
      <pubDate>Mon, 02 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://brpc.incubator.apache.org/en/docs/faq/</guid>
      <description>
        
        
        &lt;h3 id=&#34;why-use-mosn-instead-of-istios-default-data-plane&#34;&gt;Why use MOSN instead of Istio&amp;rsquo;s default data plane?&lt;/h3&gt;
&lt;p&gt;Before the Service Mesh transformation, we have expected that as the next generation of Ant Group&amp;rsquo;s infrastructure, Meshization will inevitably bring revolutionary changes and evolution costs. We have a very ambitious blueprint: ready to integrate the original network and middleware various capabilities have been re-precipitated and polished to create a low-level platform for the next-generation architecture of the future, which will carry the responsibility of various service communications.&lt;/p&gt;
&lt;p&gt;This is a long-term planning project that takes many years to build and meets the needs of the next five or even ten years, and cooperates to build a team that spans business, SRE, middleware, and infrastructure departments. We must have a network proxy forwarding plane with flexible expansion, high performance, and long-term evolution. Nginx and Envoy have a very long-term capacity accumulation and active community in the field of network agents. We have also borrowed from other excellent open source network agents such as Nginx and Envoy. At the same time, we have enhanced research and development efficiency and flexible expansion. Mesh transformation involves a large number of departments and R &amp;amp; D personnel. We must consider the landing cost of cross-team cooperation. Therefore, we have developed a new network proxy MOSN based on Go in the cloud-native scenario. For Go&amp;rsquo;s performance, we also did a full investigation and test in the early stage to meet the performance requirements of Ant Group&amp;rsquo;s services.&lt;/p&gt;
&lt;p&gt;At the same time, we received a lot of feedback and needs from the end user community. Everyone has the same needs and thoughts. So we combined the actual situation of the community and ourselves to conduct the research and development of MOSN from the perspective of satisfying the community and users. We believe that the open source competition is mainly competition between standards and specifications. We need to make the most suitable implementation choice based on open source standards.&lt;/p&gt;
&lt;h3 id=&#34;what-is-the-difference-between-mosn-and-envoy-what-are-the-advantages-of-mosn&#34;&gt;What is the difference between MOSN and Envoy? What are the advantages of MOSN?&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Differences in language stacks&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;MOSN is written in Go. Go has strong guarantees in terms of production efficiency and memory security. At the same time, Go has an extensive library ecosystem in the cloud-native era. The performance is acceptable and usable in the Service Mesh scenario. Therefore, MOSN has a lower intellectual cost for companies and individuals using languages such as Go and Java.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Differentiation of core competence&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MOSN supports a multi-protocol framework, and users can easily access private protocols with a unified routing framework;&lt;/li&gt;
&lt;li&gt;Multi-process plug-in mechanism, which can easily extend the plug-ins of independent MOSN processes through the plug-in framework, and do some other management, bypass and other functional module extensions;&lt;/li&gt;
&lt;li&gt;Transport layer national secret algorithm support with Chinese encryption compliance;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;is-the-open-source-mosn-the-same-version-as-the-mosn-used-internally-by-ant-group&#34;&gt;Is the open source MOSN the same version as the MOSN used internally by Ant Group?&lt;/h3&gt;
&lt;p&gt;First of all, there is no so-called independent MOSN version inside Ant Group. Ant Group has many modules developed based on MOSN, and the internal modules rely on the open source version of MOSN. The research and development of business-independent MOSN core capabilities are carried out directly on the open source version.&lt;/p&gt;
&lt;h3 id=&#34;what-is-the-difference-between-the-open-source-and-commercial-versions-of-mosn&#34;&gt;What is the difference between the open source and commercial versions of MOSN?&lt;/h3&gt;
&lt;p&gt;Ant Group has commercial Mesh products. Commercial products mainly provide a complete solution from development to delivery runtime. At the same time, in order to meet the business needs of enterprise users, MOSN will be extended, so the so-called MOSN commercial version It mainly carries the version of the business user&amp;rsquo;s own business module.&lt;/p&gt;
&lt;h3 id=&#34;what-is-mosns-open-source-plan&#34;&gt;What is MOSN&amp;rsquo;s open source plan?&lt;/h3&gt;
&lt;p&gt;The release cycle of MOSN open source is one month. We are about to announce Roadmap for 2020, and we look forward to co-building with more enterprises.&lt;/p&gt;
&lt;h3 id=&#34;what-version-of-istio-does-mosn-support-when-will-it-be-available-in-istio&#34;&gt;What version of Istio does MOSN support? When will it be available in Istio?&lt;/h3&gt;
&lt;p&gt;MOSN currently runs the &lt;a href=&#34;https://brpc.incubator.apache.org/en/docs/quick-start/istio/&#34;&gt;bookinfo example&lt;/a&gt; based on Istio 1.5.2. In September 2020, Istio is expected to fully support the capabilities of Istio and become an integral part of Istio Sidecar deployment options available. Please join the &lt;a href=&#34;https://brpc.incubator.apache.org/en/docs/community&#34;&gt;MOSN community&lt;/a&gt; to learn about working with Istio.&lt;/p&gt;
&lt;h3 id=&#34;what-service-registration-and-discovery-mechanisms-does-mosn-support&#34;&gt;What service registration and discovery mechanisms does MOSN support?&lt;/h3&gt;
&lt;p&gt;MOSN mainly supports two service registration and discovery mechanisms: one is to directly adapt to Istio, and the other is to integrate the SDK and use it with different registration centers and configuration centers.&lt;/p&gt;
&lt;h3 id=&#34;how-to-participate-in-the-mosn-open-source-community&#34;&gt;How to participate in the MOSN open source community?&lt;/h3&gt;
&lt;p&gt;Join the MOSN slack worksapce &lt;a href=&#34;https://mosnproxy.slack.com&#34;&gt;https://mosnproxy.slack.com&lt;/a&gt; to participate in the open source community. You can also visit the &lt;a href=&#34;https://github.com/mosn/community&#34;&gt;Community repository&lt;/a&gt; to learn about the organizational structure of the MOSN open source community and to obtain community materials.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
